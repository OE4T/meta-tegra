From 250c0c9031615421204279eadb541652e5dee6df Mon Sep 17 00:00:00 2001
From: Ilies CHERGUI <ilies.chergui@gmail.com>
Date: Wed, 30 Mar 2022 23:02:28 +0100
Subject: [PATCH 9/9] camera_v4l2_cuda: add option for setting max frame count

to a allow for an automated timed run, instead of interactive.

Signed-off-by: Matt Madison <matt@madison.systems>
---
 samples/12_camera_v4l2_cuda/camera_v4l2_cuda.cpp | 12 +++++++++++-
 samples/12_camera_v4l2_cuda/camera_v4l2_cuda.h   |  1 +
 2 files changed, 12 insertions(+), 1 deletion(-)

diff --git a/samples/12_camera_v4l2_cuda/camera_v4l2_cuda.cpp b/samples/12_camera_v4l2_cuda/camera_v4l2_cuda.cpp
index 44508d3..c755044 100644
--- a/samples/12_camera_v4l2_cuda/camera_v4l2_cuda.cpp
+++ b/samples/12_camera_v4l2_cuda/camera_v4l2_cuda.cpp
@@ -61,6 +61,7 @@ print_usage(void)
            "\t-f\t\tSet output pixel format of video device (supports only YUYV/YVYU/UYVY/VYUY/GREY/MJPEG)\n"
            "\t-r\t\tSet renderer frame rate (30 fps by default)\n"
            "\t-n\t\tSave the n-th frame before VIC processing\n"
+           "\t-N\t\tRun for N frames instead\n"
            "\t-c\t\tEnable CUDA aglorithm (draw a black box in the upper left corner)\n"
            "\t-v\t\tEnable verbose message\n"
            "\t-h\t\tPrint this usage\n\n"
@@ -78,7 +79,7 @@ parse_cmdline(context_t * ctx, int argc, char **argv)
         exit(EXIT_SUCCESS);
     }
 
-    while ((c = getopt(argc, argv, "d:s:f:r:n:cvh")) != -1)
+    while ((c = getopt(argc, argv, "d:s:f:r:n:N:cvh")) != -1)
     {
         switch (c)
         {
@@ -122,6 +123,9 @@ parse_cmdline(context_t * ctx, int argc, char **argv)
             case 'c':
                 ctx->enable_cuda = true;
                 break;
+            case 'N':
+                ctx->total_frames = strtol(optarg, NULL, 10);
+                break;
             case 'v':
                 ctx->enable_verbose = true;
                 break;
@@ -150,6 +154,7 @@ set_defaults(context_t * ctx)
     ctx->cam_h = 480;
     ctx->frame = 0;
     ctx->save_n_frame = 0;
+    ctx->total_frames = 0;
 
     ctx->g_buff = NULL;
     ctx->capture_dmabuf = true;
@@ -644,6 +649,7 @@ start_capture(context_t * ctx)
                 /* Convert the decoded buffer to YUV420P */
                 if (NvBufSurf::NvTransform(&transform_params, fd, ctx->render_dmabuf_fd))
                     ERROR_RETURN("Failed to convert the buffer");
+
             } else {
                 NvBufSurface *pSurf = NULL;
                 if (-1 == NvBufSurfaceFromFd(ctx->g_buff[v4l2_buf.index].dmabuff_fd,
@@ -678,6 +684,10 @@ start_capture(context_t * ctx)
             if (ioctl(ctx->cam_fd, VIDIOC_QBUF, &v4l2_buf))
                 ERROR_RETURN("Failed to queue camera buffers: %s (%d)",
                         strerror(errno), errno);
+
+            if (ctx->total_frames && ctx->frame >= ctx->total_frames)
+                quit = true;
+
         }
     }
 
diff --git a/samples/12_camera_v4l2_cuda/camera_v4l2_cuda.h b/samples/12_camera_v4l2_cuda/camera_v4l2_cuda.h
index 094e6db..d6149f6 100644
--- a/samples/12_camera_v4l2_cuda/camera_v4l2_cuda.h
+++ b/samples/12_camera_v4l2_cuda/camera_v4l2_cuda.h
@@ -73,6 +73,7 @@ typedef struct
     unsigned int cam_h;
     unsigned int frame;
     unsigned int save_n_frame;
+    unsigned int total_frames;
 
     /* Global buffer ptr */
     nv_buffer * g_buff;
-- 
2.32.0

