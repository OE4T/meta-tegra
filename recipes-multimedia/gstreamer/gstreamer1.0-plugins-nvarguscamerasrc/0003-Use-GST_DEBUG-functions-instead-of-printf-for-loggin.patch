From b6efb6e9c2aa56cd3b71f98eef2c42059c9f41f0 Mon Sep 17 00:00:00 2001
From: Matt Madison <matt@madison.systems>
Date: Sun, 31 Jan 2021 11:03:25 -0800
Subject: [PATCH] Use GST_DEBUG functions instead of printf for logging

Signed-off-by: Matt Madison <matt@madison.systems>
---
 gstnvarguscamerasrc.cpp | 179 ++++++++++++++++++++++++----------------
 1 file changed, 106 insertions(+), 73 deletions(-)

Index: gst-nvarguscamera/gstnvarguscamerasrc.cpp
===================================================================
--- gst-nvarguscamera.orig/gstnvarguscamerasrc.cpp
+++ gst-nvarguscamera/gstnvarguscamerasrc.cpp
@@ -115,8 +115,10 @@ bool ThreadArgus::initialize(GstNvArgusC
 
   this->src = src;
 
-  if (pthread_create(&m_threadID, NULL, threadFunctionStub, this) != 0)
-    ORIGINATE_ERROR("Failed to create thread.");
+  if (pthread_create(&m_threadID, NULL, threadFunctionStub, this) != 0) {
+    GST_ERROR_OBJECT(src, "Failed to create thread.");
+    return false;
+  }
 
   // wait for the thread to start up
   while (m_threadState == THREAD_INACTIVE)
@@ -130,8 +132,10 @@ bool ThreadArgus::shutdown()
   if (m_threadID)
   {
     m_doShutdown = true;
-    if (pthread_join(m_threadID, NULL) != 0)
-      ORIGINATE_ERROR("Failed to join thread");
+    if (pthread_join(m_threadID, NULL) != 0) {
+      GST_ERROR("Failed to join thread");
+      return false;
+    }
     m_threadID = 0;
     m_doShutdown = false;
     m_threadState = THREAD_INACTIVE;
@@ -143,8 +147,10 @@ bool ThreadArgus::shutdown()
 bool ThreadArgus::waitRunning(useconds_t timeoutUs)
 {
   // Can only wait for a thread which is initializing or already running
-  if ((m_threadState != THREAD_INITIALIZING) && (m_threadState != THREAD_RUNNING))
-    ORIGINATE_ERROR("Invalid thread state %d", m_threadState.get());
+  if ((m_threadState != THREAD_INITIALIZING) && (m_threadState != THREAD_RUNNING)) {
+    GST_ERROR("Invalid thread state %d", m_threadState.get());
+    return false;
+  }
 
   // wait for the thread to run
   const useconds_t sleepTimeUs = 100;
@@ -187,31 +193,28 @@ bool ThreadArgus::threadFunction(GstNvAr
 {
   m_threadState = THREAD_INITIALIZING;
 
-  PROPAGATE_ERROR(threadInitialize(src));
+  if (!threadInitialize(src))
+    return false;
 
   m_threadState = THREAD_RUNNING;
 
   while (!m_doShutdown)
   {
-    PROPAGATE_ERROR(threadExecute(src));
+    if (!threadExecute(src))
+      return false;
   }
 
-  PROPAGATE_ERROR(threadShutdown(src));
+  return threadShutdown(src);
 
-  return true;
 }
 
-}; // namespace ArgusSamples
+} // namespace ArgusSamples
 
 namespace ArgusCamera
 {
 
 // Constants
 
-#define GST_ARGUS_PRINT(...) printf("GST_ARGUS: " __VA_ARGS__)
-#define CONSUMER_PRINT(...) printf("CONSUMER: " __VA_ARGS__)
-#define GST_ARGUS_ERROR(...) printf("ARGUS_ERROR: Error generated. %s, %s: %d %s", __FILE__, __FUNCTION__, __LINE__, __VA_ARGS__)
-
 const char* getStatusString(Argus::Status status);
 
 /*******************************************************************************
@@ -278,10 +281,10 @@ bool StreamConsumer::threadExecute(GstNv
   IFrameConsumer *iFrameConsumer = interface_cast<IFrameConsumer>(m_consumer);
 
   // Wait until the producer has connected to the stream.
-  CONSUMER_PRINT("Waiting until producer is connected...\n");
+  GST_DEBUG_OBJECT(src, "Waiting until producer is connected...\n");
   if (iStream->waitUntilConnected() != STATUS_OK)
     ORIGINATE_ERROR("Stream failed to connect.");
-  CONSUMER_PRINT("Producer has connected; continuing.\n");
+  GST_DEBUG_OBJECT(src, "Producer has connected; continuing.\n");
   IAutoControlSettings* l_iAutoControlSettings_ptr = (IAutoControlSettings *)src->iAutoControlSettings_ptr;
   ICaptureSession* l_iCaptureSession               = (ICaptureSession *)src->iCaptureSession_ptr;
   IDenoiseSettings* l_iDenoiseSettings_ptr         = (IDenoiseSettings *)src->iDenoiseSettings_ptr;
@@ -572,7 +575,7 @@ bool StreamConsumer::threadExecute(GstNv
                 src->cap_pix_fmt,
                 NvBufferLayout_BlockLinear);
         if (!src->silent)
-          CONSUMER_PRINT("Acquired Frame. %d\n", src->frameInfo->fd);
+          GST_DEBUG_OBJECT(src, "Acquired Frame. %d\n", src->frameInfo->fd);
       }
       else if (iNativeBuffer->copyToNvBuffer(src->frameInfo->fd) != STATUS_OK)
       {
@@ -580,7 +583,7 @@ bool StreamConsumer::threadExecute(GstNv
       }
 
       if (!src->silent)
-        CONSUMER_PRINT("Acquired Frame: %llu, time %llu\n",
+        GST_DEBUG_OBJECT(src, "Acquired Frame: %llu, time %llu\n",
                    static_cast<unsigned long long>(iFrame->getNumber()),
                    static_cast<unsigned long long>(iFrame->getTime()));
 
@@ -610,10 +613,9 @@ bool StreamConsumer::threadExecute(GstNv
 
   if (!src->argus_in_error)
   {
-      CONSUMER_PRINT("Done Success\n");
+      GST_DEBUG_OBJECT(src, "Done Success\n");
   }
-  PROPAGATE_ERROR(requestShutdown());
-  return true;
+  return requestShutdown();
 }
 
 bool StreamConsumer::threadShutdown(GstNvArgusCameraSrc *src)
@@ -635,30 +637,40 @@ static bool execute(int32_t cameraIndex,
   // Create the CameraProvider object
   static UniqueObj<CameraProvider> cameraProvider(CameraProvider::create());
   ICameraProvider *iCameraProvider = interface_cast<ICameraProvider>(cameraProvider);
-  if (!iCameraProvider)
-    ORIGINATE_ERROR("Failed to create CameraProvider");
+  if (!iCameraProvider) {
+    GST_ERROR_OBJECT(src, "Failed to create CameraProvider");
+    return false;
+  }
 
   // Get the camera devices.
   std::vector<CameraDevice*> cameraDevices;
   iCameraProvider->getCameraDevices(&cameraDevices);
-  if (cameraDevices.size() == 0)
-    ORIGINATE_ERROR("No cameras available");
+  if (cameraDevices.size() == 0) {
+    GST_ERROR_OBJECT(src, "No cameras available");
+    return false;
+  }
 
-  if (static_cast<uint32_t>(cameraIndex) >= cameraDevices.size())
-    ORIGINATE_ERROR("Invalid camera device specified %d specified, %d max index",
-                                      cameraIndex, static_cast<int32_t>(cameraDevices.size())-1);
+  if (static_cast<uint32_t>(cameraIndex) >= cameraDevices.size()) {
+    GST_ERROR_OBJECT(src, "Invalid camera device specified %d specified, %d max index",
+                     cameraIndex, static_cast<int32_t>(cameraDevices.size())-1);
+    return false;
+  }
 
   // Create the capture session using the specified device.
   UniqueObj<CaptureSession> captureSession(
       iCameraProvider->createCaptureSession(cameraDevices[cameraIndex]));
   ICaptureSession *iCaptureSession = interface_cast<ICaptureSession>(captureSession);
-  if (!iCaptureSession)
-    ORIGINATE_ERROR("Failed to create CaptureSession");
+  if (!iCaptureSession) {
+    GST_ERROR_OBJECT(src, "Failed to create CaptureSession");
+    return false;
+  }
 
   src->iCaptureSession_ptr = iCaptureSession;
   IEventProvider *iEventProvider = interface_cast<IEventProvider>(captureSession);
-  if (!iEventProvider)
+  if (!iEventProvider) {
     GST_ERROR_OBJECT (src, "Failed to create Event Provider");
+    return false;
+  }
 
   src->iEventProvider_ptr = iEventProvider;
 
@@ -670,12 +682,14 @@ static bool execute(int32_t cameraIndex,
 
   src->queue = UniqueObj<EventQueue>(iEventProvider->createEventQueue(eventTypes));
   IEventQueue *iQueue = interface_cast<IEventQueue>(src->queue);
-  if (!iQueue)
+  if (!iQueue) {
     GST_ERROR_OBJECT (src, "EventQ interface is NULL");
+    return false;
+  }
 
   src->iEventQueue_ptr = iQueue;
 
-  GST_ARGUS_PRINT("Creating output stream\n");
+  GST_DEBUG_OBJECT(src, "Creating output stream\n");
   UniqueObj<OutputStreamSettings> streamSettings(iCaptureSession->createOutputStreamSettings(STREAM_TYPE_EGL));
   IEGLOutputStreamSettings *iStreamSettings = interface_cast<IEGLOutputStreamSettings>(streamSettings);
   if (iStreamSettings)
@@ -688,22 +702,28 @@ static bool execute(int32_t cameraIndex,
   }
   UniqueObj<OutputStream> outputStream(iCaptureSession->createOutputStream(streamSettings.get()));
   IEGLOutputStream *iStream = interface_cast<IEGLOutputStream>(outputStream);
-  if (!iStream)
-    ORIGINATE_ERROR("Failed to create OutputStream");
+  if (!iStream) {
+    GST_ERROR_OBJECT(src, "Failed to create OutputStream");
+    return false;
+  }
 
   StreamConsumer consumerThread(outputStream.get());
 
-  PROPAGATE_ERROR(consumerThread.initialize(src));
+  if (!consumerThread.initialize(src))
+    return false;
 
   // Wait until the consumer is connected to the stream.
-  PROPAGATE_ERROR(consumerThread.waitRunning());
+  if (!consumerThread.waitRunning())
+    return false;
 
   // Create capture request and enable output stream.
   UniqueObj<Request> request(iCaptureSession->createRequest());
   IRequest *iRequest = interface_cast<IRequest>(request);
   src->iRequest_ptr = iRequest;
-  if (!iRequest)
-    ORIGINATE_ERROR("Failed to create Request");
+  if (!iRequest) {
+    GST_ERROR_OBJECT(src, "Failed to create Request");
+    return false;
+  }
   iRequest->enableOutputStream(outputStream.get());
 
   IAutoControlSettings* iAutoControlSettings =
@@ -711,23 +731,29 @@ static bool execute(int32_t cameraIndex,
   src->iAutoControlSettings_ptr = iAutoControlSettings;
   std::vector<SensorMode*> modes;
   ICameraProperties *camProps = interface_cast<ICameraProperties>(cameraDevices[cameraIndex]);
-  if (!camProps)
-    ORIGINATE_ERROR("Failed to create camera properties");
+  if (!camProps) {
+    GST_ERROR_OBJECT(src, "Failed to create camera properties");
+    return false;
+  }
   camProps->getAllSensorModes(&modes);
 
   ISourceSettings *requestSourceSettings =
                                   interface_cast<ISourceSettings>(iRequest->getSourceSettings());
-  if (!requestSourceSettings)
-    ORIGINATE_ERROR("Failed to get request source settings");
+  if (!requestSourceSettings) {
+    GST_ERROR_OBJECT(src, "Failed to get request source settings");
+    return false;
+  }
   src->iRequestSourceSettings_ptr = requestSourceSettings;
 
-  if (cameraMode != NVARGUSCAM_DEFAULT_SENSOR_MODE_STATE && static_cast<uint32_t>(cameraMode) >= modes.size())
-    ORIGINATE_ERROR("Invalid sensor mode %d selected %d present", cameraMode,
-                                                          static_cast<int32_t>(modes.size()));
+  if (cameraMode != NVARGUSCAM_DEFAULT_SENSOR_MODE_STATE && static_cast<uint32_t>(cameraMode) >= modes.size()) {
+    GST_ERROR_OBJECT(src, "Invalid sensor mode %d selected %d present", cameraMode,
+                     static_cast<int32_t>(modes.size()));
+    return false;
+  }
 
   src->total_sensor_modes = modes.size();
 
- GST_ARGUS_PRINT("Available Sensor modes :\n");
+  GST_DEBUG_OBJECT(src, "Available Sensor modes :\n");
   frameRate = src->fps_n/ src->fps_d;
   duration = 1e9 * src->fps_d/ src->fps_n;
   ISensorMode *iSensorMode[modes.size()];
@@ -740,7 +766,7 @@ static bool execute(int32_t cameraIndex,
     iSensorMode[index] = interface_cast<ISensorMode>(modes[index]);
     sensorModeAnalogGainRange = iSensorMode[index]->getAnalogGainRange();
     limitExposureTimeRange = iSensorMode[index]->getExposureTimeRange();
-    GST_ARGUS_PRINT("%d x %d FR = %f fps Duration = %lu ; Analog Gain range min %f, max %f; Exposure Range min %ju, max %ju;\n\n",
+    GST_DEBUG_OBJECT(src, "%d x %d FR = %f fps Duration = %lu ; Analog Gain range min %f, max %f; Exposure Range min %ju, max %ju;\n\n",
                     iSensorMode[index]->getResolution().width(), iSensorMode[index]->getResolution().height(),
                     (1e9/(iSensorMode[index]->getFrameDurationRange().min())),
                     iSensorMode[index]->getFrameDurationRange().min(),
@@ -787,17 +813,21 @@ static bool execute(int32_t cameraIndex,
   if (frameRate > round((1e9/(iSensorMode[cameraMode]->getFrameDurationRange().min()))))
   {
     src->argus_in_error = TRUE;
-    GST_ARGUS_ERROR("Frame Rate specified is greater than supported\n");
+    GST_ERROR_OBJECT(src, "Frame Rate specified is greater than supported\n");
   }
 
   IDenoiseSettings *denoiseSettings = interface_cast<IDenoiseSettings>(request);
-  if (!denoiseSettings)
-    ORIGINATE_ERROR("Failed to get DenoiseSettings interface");
+  if (!denoiseSettings) {
+    GST_ERROR_OBJECT(src, "Failed to get DenoiseSettings interface");
+    return false;
+  }
   src->iDenoiseSettings_ptr = denoiseSettings;
 
   IEdgeEnhanceSettings *eeSettings = interface_cast<IEdgeEnhanceSettings>(request);
-  if (!eeSettings)
-    ORIGINATE_ERROR("Failed to get EdgeEnhancementSettings interface");
+  if (!eeSettings) {
+    GST_ERROR_OBJECT(src, "Failed to get EdgeEnhancementSettings interface");
+    return false;
+  }
   src->iEeSettings_ptr = eeSettings;
 
   /* Setting Noise Reduction Mode and Strength*/
@@ -904,7 +934,7 @@ static bool execute(int32_t cameraIndex,
     src->aeLockPropSet = FALSE;
   }
 
-  GST_ARGUS_PRINT("Running with following settings:\n"
+  GST_DEBUG_OBJECT(src, "Running with following settings:\n"
              "   Camera index = %d \n"
              "   Camera mode  = %d \n"
              "   Output Stream W = %d H = %d \n"
@@ -996,18 +1026,20 @@ static bool execute(int32_t cameraIndex,
 
   requestSourceSettings->setFrameDurationRange(Range<uint64_t>(1e9/frameRate));
 
-  GST_ARGUS_PRINT("Setup Complete, Starting captures for %d seconds\n", secToRun);
+  GST_DEBUG_OBJECT(src, "Setup Complete, Starting captures for %d seconds\n", secToRun);
 
-  GST_ARGUS_PRINT("Starting repeat capture requests.\n");
+  GST_DEBUG_OBJECT(src, "Starting repeat capture requests.\n");
   Request* captureRequest = request.get();
   src->request_ptr = captureRequest;
   iCaptureSession->capture(captureRequest);
-  if (iCaptureSession->capture(captureRequest) == 0)
-    ORIGINATE_ERROR("Failed to start capture request");
+  if (iCaptureSession->capture(captureRequest) == 0) {
+    GST_ERROR_OBJECT(src, "Failed to start capture request");
+    return false;
+  }
 
   if (src->argus_in_error)
   {
-    GST_ARGUS_ERROR("InvalidState.\n");
+    GST_ERROR_OBJECT(src, "InvalidState.\n");
     iCaptureSession->cancelRequests();
     src->timeout = 1;
   }
@@ -1027,7 +1059,7 @@ static bool execute(int32_t cameraIndex,
     }
   }
 
-  GST_ARGUS_PRINT("Cleaning up\n");
+  GST_DEBUG_OBJECT(src, "Cleaning up\n");
 
   iCaptureSession->stopRepeat();
 
@@ -1047,12 +1079,13 @@ static bool execute(int32_t cameraIndex,
     g_mutex_unlock (&src->argus_buffer_consumed_lock);
   }
   // Wait for the consumer thread to complete.
-  PROPAGATE_ERROR(consumerThread.shutdown());
+  if (!consumerThread.shutdown())
+    return false;
 
   if (src->argus_in_error)
     return false;
 
-  GST_ARGUS_PRINT("Done Success\n");
+  GST_DEBUG_OBJECT(src, "Done Success\n");
 
   return true;
 }
@@ -1669,21 +1702,21 @@ static gboolean set_range (GstNvArgusCam
   if(prop_id == PROP_GAIN_RANGE)
   {
     str = src->gainRangeString;
-    GST_ARGUS_PRINT("NvArgusCameraSrc: Setting Gain Range : %s\n", str);
+    GST_DEBUG_OBJECT(src, "NvArgusCameraSrc: Setting Gain Range : %s\n", str);
   }
   else if(prop_id == PROP_EXPOSURE_TIME_RANGE)
   {
     str = src->exposureTimeString;
-    GST_ARGUS_PRINT("NvArgusCameraSrc: Setting Exposure Time Range : %s\n", str);
+    GST_DEBUG_OBJECT(src, "NvArgusCameraSrc: Setting Exposure Time Range : %s\n", str);
   }
   else if(prop_id == PROP_DIGITAL_GAIN_RANGE)
   {
     str = src->ispDigitalGainRangeString;
-    GST_ARGUS_PRINT("NvArgusCameraSrc: Setting ISP Digital Gain Range : %s\n", str);
+    GST_DEBUG_OBJECT(src, "NvArgusCameraSrc: Setting ISP Digital Gain Range : %s\n", str);
   }
   else
   {
-    GST_ARGUS_PRINT("NvArgusCameraSrc: property not defined\n");
+    GST_DEBUG_OBJECT(src, "NvArgusCameraSrc: property not defined\n");
     return FALSE;
   }
 
@@ -1699,7 +1732,7 @@ static gboolean set_range (GstNvArgusCam
 
     if (index == 2)
     {
-      GST_ARGUS_PRINT ("Invalid Range Input\n");
+      GST_DEBUG_OBJECT(src, "Invalid Range Input\n");
       ret = FALSE;
       goto done;
     }
@@ -1712,7 +1745,7 @@ static gboolean set_range (GstNvArgusCam
      if(prop_id == PROP_GAIN_RANGE)
      {
        if (array[0] < MIN_GAIN || array[1] > MAX_GAIN) {
-         GST_ARGUS_PRINT("Invalid Gain Range Input\n");
+         GST_DEBUG_OBJECT(src, "Invalid Gain Range Input\n");
          ret = FALSE;
          goto done;
        }
@@ -1723,7 +1756,7 @@ static gboolean set_range (GstNvArgusCam
      else if(prop_id == PROP_EXPOSURE_TIME_RANGE)
      {
        if (array[0] < MIN_EXPOSURE_TIME || array[1] > MAX_EXPOSURE_TIME) {
-         GST_ARGUS_PRINT("Invalid Exposure Time Range Input\n");
+         GST_DEBUG_OBJECT(src, "Invalid Exposure Time Range Input\n");
          ret = FALSE;
          goto done;
        }
@@ -1734,7 +1767,7 @@ static gboolean set_range (GstNvArgusCam
      else if(prop_id == PROP_DIGITAL_GAIN_RANGE)
      {
        if (array[0] < MIN_DIGITAL_GAIN || array[1] > MAX_DIGITAL_GAIN) {
-         GST_ARGUS_PRINT("Invalid ISP Digital Gain Range Input\n");
+         GST_DEBUG_OBJECT(src, "Invalid ISP Digital Gain Range Input\n");
          ret = FALSE;
          goto done;
        }
@@ -1744,13 +1777,13 @@ static gboolean set_range (GstNvArgusCam
      }
      else
      {
-       GST_ARGUS_PRINT("NvArgusCameraSrc: property not defined\n");
+       GST_DEBUG_OBJECT(src, "NvArgusCameraSrc: property not defined\n");
        return FALSE;
      }
   }
   else
   {
-    GST_ARGUS_PRINT ("Need two values to set range\n");
+    GST_DEBUG_OBJECT(src, "Need two values to set range\n");
     ret = FALSE;
     goto done;
   }
