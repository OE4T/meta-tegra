Index: gst-nvarguscamera/gstnvarguscamerasrc.cpp
===================================================================
--- gst-nvarguscamera.orig/gstnvarguscamerasrc.cpp
+++ gst-nvarguscamera/gstnvarguscamerasrc.cpp
@@ -320,7 +320,7 @@ bool StreamConsumer::threadExecute(GstNv
     if (!iEvent)
     {
       src->argus_in_error = true;
-      ORIGINATE_ERROR("Failed to get IEvent interface");
+      GST_ERROR_OBJECT (src, "Failed to get IEvent interface");
     }
 
     if (iEvent->getEventType() == EVENT_TYPE_ERROR)
@@ -331,7 +331,7 @@ bool StreamConsumer::threadExecute(GstNv
       src->argus_in_error = TRUE;
       const IEventError* iEventError = interface_cast<const IEventError>(event);
       Argus::Status argusStatus = iEventError->getStatus();
-      error = g_error_new (domain, argusStatus, getStatusString(argusStatus));
+      error = g_error_new (domain, argusStatus, "%s", getStatusString(argusStatus));
       GstMessage *message = gst_message_new_error (GST_OBJECT(src), error, "Argus Error Status");
       gst_element_post_message (GST_ELEMENT_CAST(src), message);
       g_mutex_lock (&src->argus_buffers_queue_lock);
@@ -353,7 +353,7 @@ bool StreamConsumer::threadExecute(GstNv
         if (!src->timeout_complete)
         {
           src->argus_in_error = true;
-          error = g_error_new (domain, frame_status, getStatusString(frame_status));
+          error = g_error_new (domain, frame_status, "%s", getStatusString(frame_status));
           GstMessage *message = gst_message_new_error (GST_OBJECT(src), error, "Argus Error Status");
           gst_element_post_message (GST_ELEMENT_CAST(src), message);
           g_mutex_lock (&src->argus_buffers_queue_lock);
@@ -658,7 +658,7 @@ static bool execute(int32_t cameraIndex,
   src->iCaptureSession_ptr = iCaptureSession;
   IEventProvider *iEventProvider = interface_cast<IEventProvider>(captureSession);
   if (!iEventProvider)
-    ORIGINATE_ERROR("Failed to create Event Provider");
+    GST_ERROR_OBJECT (src, "Failed to create Event Provider");
 
   src->iEventProvider_ptr = iEventProvider;
 
@@ -671,7 +671,7 @@ static bool execute(int32_t cameraIndex,
   src->queue = UniqueObj<EventQueue>(iEventProvider->createEventQueue(eventTypes));
   IEventQueue *iQueue = interface_cast<IEventQueue>(src->queue);
   if (!iQueue)
-    ORIGINATE_ERROR("EventQ interface is NULL");
+    GST_ERROR_OBJECT (src, "EventQ interface is NULL");
 
   src->iEventQueue_ptr = iQueue;
 
