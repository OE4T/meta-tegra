From 5549f0b3ae9a1f11453ce4d745c2ce7d58098063 Mon Sep 17 00:00:00 2001
From: Matt Madison <matt@madison.systems>
Date: Fri, 27 Jan 2023 06:40:49 -0800
Subject: [PATCH 2/4] Fix RCM boot detection

PlatformBootOrderLib was identifying any boot device path that
had an NVIDIA-attached option to it as a 'boot.img' (aka RCM boot).
However, such an option gets added to any boot device path that
contains an Android-style image with embedded kernel command
parameters, including one that might be found on a NVMe storage
device that has already been flashed.

This prevents re-flashing via initrd-flash of a Jetson that was
already flashed to boot off an NVMe drive, since the kernel on
the NVMe will take priority over the RCM boot kernel. (This can
be worked around by interrupting UEFI and explicitly choosing
to boot the RCM boot kernel.)

This patch changes the check to use the GUID assigned to the
RCM boot image, which ensures that if the boot priority passed
in the L4TConfiguration DTB overlay is set to 'boot.img' (as
it is for RCM booting), the correct boot option is used.

Logging levels are also increased in this patch, to make it
easier to debug with a regular DEBUG mode build.

Signed-off-by: Matt Madison <matt@madison.systems>
Signed-off-by: Jose Quaresma <jose.quaresma@foundries.io>

Upstream-Status: Pending
---
 .../PlatformBootOrderLib.c                    | 37 ++++++++-----------
 .../PlatformBootOrderLib.inf                  |  1 +
 2 files changed, 17 insertions(+), 21 deletions(-)

diff --git a/Silicon/NVIDIA/Library/PlatformBootOrderLib/PlatformBootOrderLib.c b/Silicon/NVIDIA/Library/PlatformBootOrderLib/PlatformBootOrderLib.c
index d4cb9f6e..42325f84 100644
--- a/Silicon/NVIDIA/Library/PlatformBootOrderLib/PlatformBootOrderLib.c
+++ b/Silicon/NVIDIA/Library/PlatformBootOrderLib/PlatformBootOrderLib.c
@@ -57,7 +57,6 @@ GetDevicePriority (
   EFI_STATUS                    Status;
   CHAR16                        OptionName[sizeof ("Boot####")];
   EFI_BOOT_MANAGER_LOAD_OPTION  Option;
-  UINTN                         OptionalDataSize;
   UINTN                         BootPriorityIndex;
   EFI_DEVICE_PATH_PROTOCOL      *DevicePathNode;
   UINT8                         ExtraSpecifier;
@@ -68,28 +67,23 @@ GetDevicePriority (
     return MAX_INT32;
   }
 
-  OptionalDataSize = 0;
-  if (Option.OptionalData != NULL) {
-    OptionalDataSize = StrSize ((CONST CHAR16 *)Option.OptionalData);
-  }
-
-  if ((Option.OptionalData != NULL) &&
-      (Option.OptionalDataSize == OptionalDataSize + sizeof (EFI_GUID)) &&
-      CompareGuid (
-        (EFI_GUID *)((UINT8 *)Option.OptionalData + OptionalDataSize),
-        &gNVIDIABmBootOptionGuid
-        ))
-  {
-    for (BootPriorityIndex = 0; BootPriorityIndex < ARRAY_SIZE (mBootPriority); BootPriorityIndex++) {
-      if (mBootPriority[BootPriorityIndex].ExtraSpecifier == NVIDIA_BOOT_TYPE_BOOTIMG) {
-        DEBUG ((DEBUG_VERBOSE, "Found %s priority to be %d\r\n", ConvertDevicePathToText (Option.FilePath, TRUE, FALSE), mBootPriority[BootPriorityIndex].PriorityOrder));
-        return mBootPriority[BootPriorityIndex].PriorityOrder;
+  DevicePathNode = Option.FilePath;
+  if (!IsDevicePathEndType (DevicePathNode)) {
+    if ((DevicePathType (DevicePathNode) == HARDWARE_DEVICE_PATH) &&
+        (DevicePathSubType (DevicePathNode) == HW_VENDOR_DP)) {
+      VENDOR_DEVICE_PATH *VendorPath = (VENDOR_DEVICE_PATH *)DevicePathNode;
+      if (CompareGuid (&VendorPath->Guid, &gNVIDIARcmKernelGuid)) {
+        for (BootPriorityIndex = 0; BootPriorityIndex < ARRAY_SIZE (mBootPriority); BootPriorityIndex++) {
+          if (mBootPriority[BootPriorityIndex].ExtraSpecifier == NVIDIA_BOOT_TYPE_BOOTIMG) {
+            DEBUG ((DEBUG_WARN, "Found %s priority to be %d (bootimg)\r\n", ConvertDevicePathToText (Option.FilePath, TRUE, FALSE), mBootPriority[BootPriorityIndex].PriorityOrder));
+            return mBootPriority[BootPriorityIndex].PriorityOrder;
+          }
+        }
       }
     }
   }
 
   ExtraSpecifier = MAX_UINT8;
-  DevicePathNode = Option.FilePath;
   while (!IsDevicePathEndType (DevicePathNode)) {
     if ((DevicePathType (DevicePathNode) == MESSAGING_DEVICE_PATH) &&
         (DevicePathSubType (DevicePathNode) == MSG_URI_DP))
@@ -108,7 +102,8 @@ GetDevicePriority (
           (DevicePathSubType (DevicePathNode) == mBootPriority[BootPriorityIndex].SubType) &&
           (ExtraSpecifier == mBootPriority[BootPriorityIndex].ExtraSpecifier))
       {
-        DEBUG ((DEBUG_VERBOSE, "Found %s priority to be %d\r\n", ConvertDevicePathToText (Option.FilePath, TRUE, FALSE), mBootPriority[BootPriorityIndex].PriorityOrder));
+        DEBUG ((DEBUG_WARN, "Found %s priority to be %d\r\n", ConvertDevicePathToText (Option.FilePath, TRUE, FALSE), mBootPriority[BootPriorityIndex].PriorityOrder));
+        DEBUG ((DEBUG_WARN, "  Node: %s, Type: %d Subtype: %d\r\n", ConvertDeviceNodeToText (DevicePathNode, TRUE, FALSE), DevicePathType (DevicePathNode), DevicePathSubType (DevicePathNode)));
         return mBootPriority[BootPriorityIndex].PriorityOrder;
       }
     }
@@ -116,7 +111,7 @@ GetDevicePriority (
     DevicePathNode = NextDevicePathNode (DevicePathNode);
   }
 
-  DEBUG ((DEBUG_VERBOSE, "Found %s priority to be %d\r\n", ConvertDevicePathToText (Option.FilePath, TRUE, FALSE), MAX_INT32));
+  DEBUG ((DEBUG_WARN, "Found %s priority to be %d (not in priority list)\r\n", ConvertDevicePathToText (Option.FilePath, TRUE, FALSE), MAX_INT32));
   return MAX_INT32;
 }
 
@@ -207,7 +202,7 @@ SetBootOrder (
       if ((BootPriorityMatchLen == CurrentBootPriorityLen) &&
           (CompareMem (CurrentBootPriorityStr, mBootPriority[BootPriorityIndex].OrderName, CurrentBootPriorityLen) == 0))
       {
-        DEBUG ((DEBUG_INFO, "Setting %a priority to %d\r\n", mBootPriority[BootPriorityIndex].OrderName, Priority));
+        DEBUG ((DEBUG_WARN, "Setting %a priority to %d\r\n", mBootPriority[BootPriorityIndex].OrderName, Priority));
         mBootPriority[BootPriorityIndex].PriorityOrder = Priority;
         Priority++;
         break;
diff --git a/Silicon/NVIDIA/Library/PlatformBootOrderLib/PlatformBootOrderLib.inf b/Silicon/NVIDIA/Library/PlatformBootOrderLib/PlatformBootOrderLib.inf
index 277692b3..403e4747 100644
--- a/Silicon/NVIDIA/Library/PlatformBootOrderLib/PlatformBootOrderLib.inf
+++ b/Silicon/NVIDIA/Library/PlatformBootOrderLib/PlatformBootOrderLib.inf
@@ -34,3 +34,4 @@
   gEfiGlobalVariableGuid
   gNVIDIATokenSpaceGuid
   gNVIDIABmBootOptionGuid
+  gNVIDIARcmKernelGuid
-- 
2.34.1

