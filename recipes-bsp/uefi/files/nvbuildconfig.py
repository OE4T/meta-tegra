import sys
import os
from kconfiglib import Kconfig

# Adapted from edk2-nvidia/Silicon/NVIDIA/edk2nv/stuart/builder.py BuildConfigFile method
def build_config_file(kconf_path, defconfig_file, config_out_dir):
    kconf = Kconfig(kconf_path, warn_to_stderr=False,
                    suppress_traceback=True)
    kconf.warn_assign_undef = True
    kconf.warn_assign_override = False
    kconf.warn_assign_redun = False

    configs = [defconfig_file]
    print(kconf.load_config(configs[0]))
    for config in configs[1:]:
        # replace=False creates a merged configuration
        print(kconf.load_config(config, replace=False))

    config_out = os.path.join(config_out_dir, ".config")
    if os.path.exists(config_out):
        print(kconf.load_config(config_out, replace=False))

    kconf.write_config(os.devnull)

    if kconf.warnings:
        # Put a blank line between warnings to make them easier to read
        for warning in kconf.warnings:
            print("\n" + warning, file=sys.stderr)

        # Turn all warnings into errors, so that e.g. assignments to undefined
        # Kconfig symbols become errors.
        #
        # A warning is generated by this script whenever a symbol gets a
        # different value than the one it was assigned. Keep that one as just a
        # warning for now.
        raise ValueError("Aborting due to Kconfig warnings")

    # Write the merged configuration
    print(kconf.write_config(config_out))
    # Write the platform/build GUID
    guid_out = os.path.join(config_out_dir, "PLATFORM_GUID")
    if "PLATFORM_GUID" in kconf.syms:
        with open(guid_out, "w") as f:
            print(kconf.syms["PLATFORM_GUID"].str_value, file=f)
    elif os.path.exists(guid_out):
        os.unlink(guid_out)
    return 0

build_config_file(sys.argv[1], sys.argv[2], sys.argv[3])

# Convert the Kbuild-style config into edk2-style build config
with open(os.path.join(sys.argv[3], ".config"), "r") as f, open(os.path.join(sys.argv[3], "config.dsc.inc"), "w") as fo:
    for line in f:
        line = line.rstrip().replace('"', '').replace("'", "")
        if line.startswith("CONFIG_") and line.endswith("="):
            line = "# " + line[:-1] + " is not set"
        print(line, file=fo)
