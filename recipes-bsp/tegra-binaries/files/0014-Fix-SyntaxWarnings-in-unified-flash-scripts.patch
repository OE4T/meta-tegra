From a25f0ef416e4a42cbc323aaf43ca4758e5104150 Mon Sep 17 00:00:00 2001
From: Matt Madison <matt@madison.systems>
Date: Fri, 3 Oct 2025 08:01:45 -0700
Subject: [PATCH] Fix SyntaxWarnings in unified flash scripts

Upstream-Status: Pending
Signed-off-by: Matt Madison <matt@madison.systems>
---
 .../tools/flashtools/bootburn_t264_py/bootburn_adb.py     | 8 ++++----
 .../tools/flashtools/bootburn_t264_py/bootburn_bct.py     | 4 ++--
 .../tools/flashtools/bootburn_t264_py/bootburn_lib.py     | 2 +-
 .../tools/flashtools/bootburn_t264_py/bootburn_parser.py  | 2 +-
 .../tools/flashtools/bootburn_t264_py/bootburn_thor.py    | 2 +-
 .../tools/flashtools/bootburn_t264_py/flash_utilities.py  | 2 +-
 6 files changed, 10 insertions(+), 10 deletions(-)

diff --git a/unified_flash/tools/flashtools/bootburn_t264_py/bootburn_adb.py b/unified_flash/tools/flashtools/bootburn_t264_py/bootburn_adb.py
index 16b62af..efdcad3 100644
--- a/unified_flash/tools/flashtools/bootburn_t264_py/bootburn_adb.py
+++ b/unified_flash/tools/flashtools/bootburn_t264_py/bootburn_adb.py
@@ -80,10 +80,10 @@ class bootburn_adb(object):
     partitionInfoList = []
     s_sdmmc_device_name_list=["/dev/block/3400000.sdhci", "/dev/block/3440000.sdhci", "/dev/block/3460000.sdhci"]
     s_qspi_device_name_list = ["/dev/block/810c5b0000.spi", "/dev/block/1810c5b0000.spi"]
-    s_scsi_device_name_re = "\/dev\/sd[a-z]+" # Regular expression to match hard drives like /dev/sda, /dev/sdb, etc.
-    s_nvme_device_name_re = "\/dev\/nvme[0-9]+n[0-9]+" # Regular expression to match NVMe devices like /dev/nvme0n1, /dev/nvme1n1, etc.
-    s_emmc_device_name_re = "\/dev\/(block\/)?mmcblk[0-9]+" # Regular expression to match eMMC devices like /dev/mmcblk0, /dev/block/mmcblk0, etc.
-    s_ufs_device_name_re = "\/dev\/(block\/)?[0-9a-f]+[0-9a-f]+0000.ufshci" # Regular expression to match UFS devices like /dev/block/810c5b0000.ufshci
+    s_scsi_device_name_re = r"\/dev\/sd[a-z]+" # Regular expression to match hard drives like /dev/sda, /dev/sdb, etc.
+    s_nvme_device_name_re = r"\/dev\/nvme[0-9]+n[0-9]+" # Regular expression to match NVMe devices like /dev/nvme0n1, /dev/nvme1n1, etc.
+    s_emmc_device_name_re = r"\/dev\/(block\/)?mmcblk[0-9]+" # Regular expression to match eMMC devices like /dev/mmcblk0, /dev/block/mmcblk0, etc.
+    s_ufs_device_name_re = r"\/dev\/(block\/)?[0-9a-f]+[0-9a-f]+0000.ufshci" # Regular expression to match UFS devices like /dev/block/810c5b0000.ufshci
     s_external_storage_device_name_re = { "eMMC": s_emmc_device_name_re, "SCSI": s_scsi_device_name_re, "NVMe": s_nvme_device_name_re, "UFS": s_ufs_device_name_re}
 
     def __init__(self, tConfig, futils):
diff --git a/unified_flash/tools/flashtools/bootburn_t264_py/bootburn_bct.py b/unified_flash/tools/flashtools/bootburn_t264_py/bootburn_bct.py
index c169599..daa835c 100644
--- a/unified_flash/tools/flashtools/bootburn_t264_py/bootburn_bct.py
+++ b/unified_flash/tools/flashtools/bootburn_t264_py/bootburn_bct.py
@@ -368,7 +368,7 @@ class StorageConfigParser(object):
 
         configData = configData.replace("<SKU>", s_BpmpName)
 
-        partitionList = re.findall("\[partition\]\n+(.*)", configData)
+        partitionList = re.findall(r"\[partition\]\n+(.*)", configData)
 
         if (configData.find("ufshci") != -1):
             self.targetConfig.n_ufshci = True
@@ -1366,4 +1366,4 @@ class BootburnMb1MultiSkuBct(BootburnBct):
                     self.targetConfig.sysMonitor.log(
                         "File %s doesn't exist, so couldn't delete it",
                         bctFilePath
-                    )
\ No newline at end of file
+                    )
diff --git a/unified_flash/tools/flashtools/bootburn_t264_py/bootburn_lib.py b/unified_flash/tools/flashtools/bootburn_t264_py/bootburn_lib.py
index 40914dd..01b57e1 100644
--- a/unified_flash/tools/flashtools/bootburn_t264_py/bootburn_lib.py
+++ b/unified_flash/tools/flashtools/bootburn_t264_py/bootburn_lib.py
@@ -3476,7 +3476,7 @@ class bootburn_lib(object):
                     bctMatches = None
                     with open(fileToFlashPath, "r", encoding="utf-8") as fileToFlash:
                         fileToFlashContent = fileToFlash.read()
-                        bctMatches = re.findall(".*((die._)*._bct_BR.*\.bct)", fileToFlashContent, re.MULTILINE)
+                        bctMatches = re.findall(r".*((die._)*._bct_BR.*\.bct)", fileToFlashContent, re.MULTILINE)
 
                     if (bctMatches is None):
                         if (len(self.targetConfig.s_UpdatePartitions) != 0) or (len(self.targetConfig.s_CreatePartialPartitions) != 0):
diff --git a/unified_flash/tools/flashtools/bootburn_t264_py/bootburn_parser.py b/unified_flash/tools/flashtools/bootburn_t264_py/bootburn_parser.py
index 55e6786..bc9796c 100644
--- a/unified_flash/tools/flashtools/bootburn_t264_py/bootburn_parser.py
+++ b/unified_flash/tools/flashtools/bootburn_t264_py/bootburn_parser.py
@@ -430,7 +430,7 @@ class commandline_parser(object):
                         continue
                     targetConfig.f_PkcKeyFilePath = os.path.join(os.getcwd(), f"sign_{choice}_dummy_key.txt")
                     targetConfig.n_SecurebootFlash = True
-                    m = re.search(f'[\d]+{choice}', argument[0])
+                    m = re.search(rf'[\d]+{choice}', argument[0])
                     if m:
                         targetConfig.HSMAuthStr = m.group(0)
                     else:
diff --git a/unified_flash/tools/flashtools/bootburn_t264_py/bootburn_thor.py b/unified_flash/tools/flashtools/bootburn_t264_py/bootburn_thor.py
index bf9cda1..cbcc775 100644
--- a/unified_flash/tools/flashtools/bootburn_t264_py/bootburn_thor.py
+++ b/unified_flash/tools/flashtools/bootburn_t264_py/bootburn_thor.py
@@ -415,7 +415,7 @@ class bootburn_thor(bootburn_lib):
         Returns:
             str: Path to the binary
         """
-        s_BinRegex = "filename\s*=\s*(.*" + binName + ".*bin)"
+        s_BinRegex = r"filename\s*=\s*(.*" + binName + ".*bin)"
         binPath = None
 
         # Search in the global file and chain specific file
diff --git a/unified_flash/tools/flashtools/bootburn_t264_py/flash_utilities.py b/unified_flash/tools/flashtools/bootburn_t264_py/flash_utilities.py
index 5a2108e..923e073 100644
--- a/unified_flash/tools/flashtools/bootburn_t264_py/flash_utilities.py
+++ b/unified_flash/tools/flashtools/bootburn_t264_py/flash_utilities.py
@@ -228,7 +228,7 @@ class shell_utilities(object):
 
     # https://stackoverflow.com/questions/8110310/simple-way-to-query-connected-usb-devices-info-in-python
     def lsusb(self):
-        device_re = re.compile("Bus\s+(?P<bus>\d+)\s+Device\s+(?P<device>\d+).+ID\s(?P<id>\w+:\w+)\s(?P<tag>.+)$", re.I)
+        device_re = re.compile(r"Bus\s+(?P<bus>\d+)\s+Device\s+(?P<device>\d+).+ID\s(?P<id>\w+:\w+)\s(?P<tag>.+)$", re.I)
         df = subprocess.check_output("lsusb").decode("utf-8")
         devices = {}
         for i in df.split('\n'):
