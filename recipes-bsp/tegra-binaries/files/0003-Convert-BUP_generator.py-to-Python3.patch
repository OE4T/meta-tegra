From 98915ba48a31a528ea24636604981c3d521cc75b Mon Sep 17 00:00:00 2001
From: Matt Madison <matt@madison.systems>
Date: Tue, 3 Jan 2023 10:20:22 -0800
Subject: [PATCH] Convert BUP_generator.py to Python3

Ran it through 2to3 for the conversion, then
made some additional fixes not caught by the tool.

Signed-off-by: Matt Madison <matt@madison.systems>

Upstream-Status: Pending
---
 bootloader/BUP_generator.py | 26 +++++++++++++-------------
 1 file changed, 13 insertions(+), 13 deletions(-)

Index: Linux_for_Tegra/bootloader/BUP_generator.py
===================================================================
--- Linux_for_Tegra.orig/bootloader/BUP_generator.py
+++ Linux_for_Tegra/bootloader/BUP_generator.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/env python3
 #
 # Copyright (c) 2017-2022, NVIDIA CORPORATION.  All rights reserved.
 #
@@ -52,7 +52,7 @@ Appendix:
                   (extract all partition bins for "ota.blob" to "OUT/*.raw.bin" without displaying blob info)
 """
 
-from __future__ import print_function
+
 
 import copy
 import sys
@@ -450,7 +450,7 @@ class inspect_update_payload(update_payl
         self.raw_extract_bin_list = arg.inspect_extract_bin_list
 
         self.blob_header_tuple = struct.unpack(self.header_packing, self.blob_file.read(struct.calcsize(self.header_packing)))
-        self.blob_header_dict = dict(zip(self.header_name_tuple, self.blob_header_tuple))
+        self.blob_header_dict = dict(list(zip(self.header_name_tuple, self.blob_header_tuple)))
 
         # # Detect if optional accessory field (8 bytes) is present
         if self.blob_header_dict['header_size'] > struct.calcsize(self.header_packing):
@@ -493,7 +493,7 @@ class inspect_update_payload(update_payl
         for idx, blob_entry in enumerate(self.blob_entry_list):
             try:
                 blob_entry_tuple = struct.unpack(self.entry_packing, self.blob_file.read(struct.calcsize(self.entry_packing)))
-                blob_entry_dict = dict(zip(self.entry_name_tuple, blob_entry_tuple))
+                blob_entry_dict = dict(list(zip(self.entry_name_tuple, blob_entry_tuple)))
                 self.blob_entry_list[idx] = blob_entry_dict
 
                 for n in range(len(self.blob_entry_max_width_list)):
@@ -578,8 +578,8 @@ class inspect_update_payload(update_payl
         part_name_list = list()
         spec_info_list = list()
         for blob_entry in self.blob_entry_list:
-            part_name = str(blob_entry['part_name']).strip(' \t\n\0')
-            tnspec = str(blob_entry['tnspec']).strip(' \t\n\0')
+            part_name = str(blob_entry['part_name'].decode('utf-8')).strip(' \t\n\0')
+            tnspec = str(blob_entry['tnspec'].decode('utf-8')).strip(' \t\n\0')
 
             if tnspec == "":
                 continue
@@ -609,16 +609,16 @@ class inspect_update_payload(update_payl
         # Verify every entry in spec_info_list must have an entry in part_name_list
         valid = True
         for part in part_name_list:
-            blob_entry = filter(lambda entry: (str(entry['part_name']).strip(' \t\n\0') == part), self.blob_entry_list)
+            blob_entry = [entry for entry in self.blob_entry_list if (str(entry['part_name'].decode('utf-8')).strip(' \t\n\0') == part)]
             blob_entry = copy.deepcopy(blob_entry)
 
             for spec in spec_info_list:
                 found = False
                 for idx, entry in enumerate(blob_entry):
-                    e_spec = str(entry['tnspec']).strip(' \t\n\0')
+                    e_spec = str(entry['tnspec'].decode('utf-8')).strip(' \t\n\0')
                     if spec == e_spec:
                         found = True
-                        blob_entry.remove(blob_entry[idx])
+                        del blob_entry[idx]
                         break
                 if (found == False):
                     valid = False
@@ -639,7 +639,7 @@ class inspect_update_payload(update_payl
 
         print ("Saving partitions to \"" + out_path + "\"")
         print ("File names are of format \"<part_name>[" + out_delim + "<op_str>][" + out_delim + "<tnspec>]" + out_ext + "\"")
-        print
+        print()
 
         for blob_entry in self.blob_entry_list:
             part_name = str(blob_entry['part_name'].decode('utf-8')).strip(' \t\n\0')
@@ -660,7 +660,7 @@ class inspect_update_payload(update_payl
 
             if (part_name in extract_bin_set) or ("all" in extract_bin_set):
                 # Binary will be saved to <OUT>/<part_name>[_<op_str>][_<tnspec>].raw.bin
-                binary_name = out_delim.join(filter(None, [part_name, op_str, tnspec])) + out_ext
+                binary_name = out_delim.join([_f for _f in [part_name, op_str, tnspec] if _f]) + out_ext
                 binary_path = os.path.join(out_path, binary_name)
 
                 try:
