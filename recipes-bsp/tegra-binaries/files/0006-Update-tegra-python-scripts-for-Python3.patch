From 82d30197f786360ce90d8c6410692c0f6449d261 Mon Sep 17 00:00:00 2001
From: Ilies CHERGUI <ichergui@nvidia.com>
Date: Sun, 6 Oct 2024 14:16:52 +0100
Subject: [PATCH] Update tegra python scripts for Python3

Upstream-Status: Inappropriate [OE specific]

Signed-off-by: Matt Madison <matt@madison.systems>
Signed-off-by: Ilies CHERGUI <ichergui@nvidia.com>
---
 bootloader/dtbcheck.py              |  4 ++--
 bootloader/tegraflash_impl_t234.py  |  7 ++++---
 bootloader/tegraflash_internal.py   | 13 ++++++-------
 bootloader/tegrasign_v3_internal.py |  7 ++++---
 4 files changed, 16 insertions(+), 15 deletions(-)

diff --git a/bootloader/dtbcheck.py b/bootloader/dtbcheck.py
index fc11369..391e94e 100755
--- a/bootloader/dtbcheck.py
+++ b/bootloader/dtbcheck.py
@@ -190,10 +190,10 @@ def __parse_dt_struct(header, data, offset):
     token_fmt = '>L'
     prop_fmt = '>2L'
 
-    node_chars = '[0-9A-Za-z\+,\-\._]'
+    node_chars = r'[0-9A-Za-z\+,\-\._]'
     node_pattern = re.compile('^{0:}+(@{0:}+)?$'.format(node_chars))
 
-    prop_chars = '[0-9A-Za-z#\+,\-\.\?_]'
+    prop_chars = r'[0-9A-Za-z#\+,\-\.\?_]'
     prop_pattern = re.compile('^{}+$'.format(prop_chars))
 
     root = None
diff --git a/bootloader/tegraflash_impl_t234.py b/bootloader/tegraflash_impl_t234.py
index fa5b887..6c8c2a4 100644
--- a/bootloader/tegraflash_impl_t234.py
+++ b/bootloader/tegraflash_impl_t234.py
@@ -1,3 +1,4 @@
+#!/usr/bin/env python3
 #
 # SPDX-FileCopyrightText: Copyright (c) 2014-2024, NVIDIA Corporation.  All Rights Reserved.
 # SPDX-License-Identifier: LicenseRef-NvidiaProprietary
@@ -1530,7 +1531,7 @@ class TFlashT23x_Base(object):
 
             bpmp_dtb_in_layout = get_partition_filename('bpmp_fw_dtb', 'type')
             if (values['--bins']):
-                m = re.search('bpmp_fw_dtb[\s]+([\w._-]+)', values['--bins'])
+                m = re.search(r'bpmp_fw_dtb[\s]+([\w._-]+)', values['--bins'])
                 if m:
                     bpmp_dtb = m.group(1)
             if bpmp_dtb == None and bpmp_dtb_in_layout == None:
@@ -3022,7 +3023,7 @@ class TFlashT23x_Base(object):
             command.extend(['--generategpt', '--pt', self.tegraparser_values['--pt']])
             run_command(command)
 
-            patt = re.compile(".*(mbr|gpt).*\.bin")
+            patt = re.compile(r".*(mbr|gpt).*\.bin")
             contents = os.listdir('.')
             for f in contents:
                 if patt.match(f):
@@ -3084,7 +3085,7 @@ class TFlashT23x_Base(object):
             binaries.extend([values['--bl']])
 
         if values['--cfg'] is not None :
-            info_print("Copying enc\/signed file in " + output_dir)
+            info_print("Copying enc and signed file in " + output_dir)
             signed_files.extend(self.tegraflash_copy_signed_binaries(self.tegrahost_values['--signed_list'], output_dir))
             if self.tegrabct_values['--bct'] is None and not values['--external_device']:
                 raise tegraflash_exception("Unable to find bct file")
diff --git a/bootloader/tegraflash_internal.py b/bootloader/tegraflash_internal.py
index 345419c..c4c1ea6 100755
--- a/bootloader/tegraflash_internal.py
+++ b/bootloader/tegraflash_internal.py
@@ -1,3 +1,4 @@
+#!/usr/bin/env python3
 #
 # SPDX-FileCopyrightText: Copyright (c) 2014-2024, NVIDIA Corporation.  All Rights Reserved.
 # SPDX-License-Identifier: LicenseRef-NvidiaProprietary
@@ -1269,8 +1270,7 @@ def tegraflash_encrypt_and_sign(exports):
         command = exec_file('tegraparser')
         command.extend(['--generategpt', '--pt', tegraparser_values['--pt']])
         run_command(command)
-        import re
-        patt = re.compile(".*(mbr|gpt).*\.bin")
+        patt = re.compile(r".*(mbr|gpt).*\.bin")
         contents = os.listdir('.')
         for f in contents:
             if patt.match(f):
@@ -1385,8 +1385,7 @@ def tegraflash_sign(exports):
             command = exec_file('tegraparser')
             command.extend(['--generategpt', '--pt', tegraparser_values['--pt']])
             run_command(command)
-            import re
-            patt = re.compile(".*(mbr|gpt).*\.bin")
+            patt = re.compile(r".*(mbr|gpt).*\.bin")
             contents = os.listdir('.')
             for f in contents:
                 if patt.match(f):
@@ -4055,7 +4054,7 @@ def tegraflash_bpmp_update_valid_entries(ramcode, lines, dtb_start_pos,
     for i in range(0, len(dtb_start_pos)):
         for line_num in range(dtb_start_pos[i], dtb_end_pos[i]):
             if "phandle" in lines[line_num] and not "linux" in lines[line_num]:
-                cur_strap_id = re.search('<(.+?)>', lines[line_num]).group(1)
+                cur_strap_id = re.search(r'<(.+?)>', lines[line_num]).group(1)
                 if cur_strap_id == strap_ids_ph_str[ramcode]:
                     valid_entry.append(True)
                 else:
@@ -4124,7 +4123,7 @@ def tegraflash_bpmp_get_strap_handles(ramcode, test_dts):
             #   emc-strap {
             #       select = <0xa 0x0 0x0 0x0>;
             #   };
-            strap_ids_ph_str = re.search('<(.+?)>', line).group(1)
+            strap_ids_ph_str = re.search(r'<(.+?)>', line).group(1)
             strap_ids_ph_str = strap_ids_ph_str.split(' ')
             break
 
@@ -4586,7 +4585,7 @@ def tegraflash_update_t194_bpmp_dtb(bpmp_uphy_config):
 
     bpmp_dtb = get_partition_filename('bpmp_fw_dtb', 'type')
     if (values['--bins']):
-        m = re.search('bpmp_fw_dtb[\s]+([\w._-]+)', values['--bins'])
+        m = re.search(r'bpmp_fw_dtb[\s]+([\w._-]+)', values['--bins'])
         if m:
             bpmp_dtb = m.group(1)
     if bpmp_dtb == None:
diff --git a/bootloader/tegrasign_v3_internal.py b/bootloader/tegrasign_v3_internal.py
index bd8671b..53ca1a9 100755
--- a/bootloader/tegrasign_v3_internal.py
+++ b/bootloader/tegrasign_v3_internal.py
@@ -1,3 +1,4 @@
+#!/usr/bin/env python3
 #
 # Copyright (c) 2018-2024, NVIDIA Corporation.  All Rights Reserved.
 #
@@ -1121,7 +1122,7 @@ def is_PKC_key(keyfilename, p_key, pkh, mont):
         return False
 
     # scan the return string for decimal value
-    m = re.search('Key size is (\d+)', ret_str)
+    m = re.search(r'Key size is (\d+)', ret_str)
     if m:
         p_key.keysize = int(m.group(1))
         if (p_key.keysize > 0) and (p_key.keysize < NV_RSA_MAX_KEY_SIZE):
@@ -1166,7 +1167,7 @@ def is_PKC_pubkey(keyfilename, p_key, pkh, mont):
         return False
 
     # scan the return string for decimal value
-    m = re.search('Key size is (\d+)', ret_str)
+    m = re.search(r'Key size is (\d+)', ret_str)
     if m:
         p_key.keysize = int(m.group(1))
         if (p_key.keysize > 0) and (p_key.keysize < NV_RSA_MAX_KEY_SIZE):
@@ -1524,7 +1525,7 @@ def do_kdf_oem_enc(kdf_list, p_key, blockSize):
     # Replace '+' with '_' in patt
     patt = patt.replace('+', '_')
 
-    re_string = 'kdf_args_' + temp_stem + '(\d).yaml'
+    re_string = 'kdf_args_' + temp_stem + r'(\d).yaml'
     # Replace '+' with '_' in re_string
     re_string = re_string.replace('+', '_')
     pattd = re.compile(re_string)
-- 
2.34.1

