From 314fd6130891521cebc97e4d65790ed691cfc97e Mon Sep 17 00:00:00 2001
From: Matt Madison <matt@madison.systems>
Date: Tue, 27 Apr 2021 05:36:52 -0700
Subject: [PATCH] Rework logging in l4t_sign_image.sh

to be more compatible with the pseudo environment during
builds, which wasn't happy about the output redirection
cloning that the script was using.

Signed-off-by: Matt Madison <matt@madison.systems>
---
 l4t_sign_image.sh | 22 ++++++++--------------
 1 file changed, 8 insertions(+), 14 deletions(-)

diff --git a/l4t_sign_image.sh b/l4t_sign_image.sh
index a04fc39..cdfeb61 100755
--- a/l4t_sign_image.sh
+++ b/l4t_sign_image.sh
@@ -72,7 +72,7 @@ function write_size_to_sig
 	local sig_file="${1}"
 	local size="${2}"
 	if [ "${chip}" != "0x19" ]; then
-		echo "${SCRIPT_NAME}: chip ${chip}: Don't need to do anything" >&5
+		[ $quiet -eq 1 ] || echo "${SCRIPT_NAME}: chip ${chip}: Don't need to do anything"
 		return 0
 	fi
 	local offset=${FILE_SIZE_OFFSET_T19x}
@@ -88,8 +88,8 @@ function write_size_to_sig
 	fi
 	local tempfile
 	tempfile=$(mktemp)
-	echo "${SCRIPT_NAME}: chip ${chip}: add $(printf "0x%x" "${size}") to offset "\
-		"$(printf "0x%x" "${offset}") in sig file" >&5
+	[ $quiet -eq 1 ] || echo "${SCRIPT_NAME}: chip ${chip}: add $(printf "0x%x" "${size}") to offset "\
+		"$(printf "0x%x" "${offset}") in sig file"
 	# Convert size to bytes in little endian
 	python3 -c "f = open(\"${tempfile}\",'wb'); f.write(int(${size}).to_bytes(8,'little')); f.close()"
 	# write to header at position 0x8
@@ -191,13 +191,6 @@ if [ -n "${encryptkey}" ]; then
 	fi;
 fi
 
-# Create a new file descriptor to duplicate the output to both a variable and
-# stdout
-if [ ${quiet} -eq 1 ]; then
-	exec 5>/dev/null
-else
-	exec 5>&1
-fi
 set_params_using_chipid
 
 CMD="${L4T_BOOTLOADER_DIR}/tegraflash.py "
@@ -206,8 +199,9 @@ if [ -n "${encryptkey}" ]; then
 	options+=("--encrypt_key" "${encryptkey}")
 fi
 
-echo "${CMD} --chip ${chip} ${options[*]} --cmd sign ${file}" >&5
-output="$(${CMD} --chip "${chip}" "${options[@]}" --cmd "sign ${file}" | tee >(cat - >&5))"
+[ $quiet -eq 1 ] || echo "${CMD} --chip ${chip} ${options[*]} --cmd sign ${file}"
+output="$(${CMD} --chip "${chip}" "${options[@]}" --cmd "sign ${file}")"
+[ $quiet -eq 1 ] || echo $output
 if [ -n "${encryptkey}" ]; then
 	signedfile="$(echo "${output}" | grep "Signed and encrypted file:" | \
 	sed -n "s/.*Signed and encrypted file: //p")"
@@ -218,10 +212,10 @@ if ! [ -f "${signedfile}" ]; then
 	echo "${SCRIPT_NAME}: Error: Unable to find the signed file generated by tegraflash.py"
 	exit 1;
 fi
-echo "${SCRIPT_NAME}: Generate header for $(basename "${signedfile}")" >&5
+[ $quiet -eq 1 ] || echo "${SCRIPT_NAME}: Generate header for $(basename "${signedfile}")"
 dd if="${signedfile}" of="${file}.sig" bs="${offset}" count=1 > /dev/null 2>&1;
 write_size_to_sig "${file}.sig" "${file_size}"
-echo "${SCRIPT_NAME}: Generate 16-byte-size-aligned base file for $(basename "${signedfile}")" >&5
+[ $quiet -eq 1 ] || echo "${SCRIPT_NAME}: Generate 16-byte-size-aligned base file for $(basename "${signedfile}")"
 dd if="${signedfile}" of="${file}" bs="${offset}" skip="1" > /dev/null 2>&1;
 if [[ "${signedfile}" = *_sigheader.encrypt.signed ]]; then
 	filename=$(basename -- "$file")
-- 
2.27.0

