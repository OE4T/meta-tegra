From 83e9fa94ea79bc00d0ac9bfc8e003c5335a29aef Mon Sep 17 00:00:00 2001
From: Matt Madison <matt@madison.systems>
Date: Wed, 22 Jan 2020 06:35:59 -0800
Subject: [PATCH 4/4] Convert gen_tos_part_img.py to Python3

%% original patch: 0004-Convert-gen_tos_part_img.py-to-Python3.patch
---
 nv_tegra/tos-scripts/gen_tos_part_img.py | 42 +++++++++++++-----------
 1 file changed, 23 insertions(+), 19 deletions(-)

Index: Linux_for_Tegra/nv_tegra/tos-scripts/gen_tos_part_img.py
===================================================================
--- Linux_for_Tegra.orig/nv_tegra/tos-scripts/gen_tos_part_img.py
+++ Linux_for_Tegra/nv_tegra/tos-scripts/gen_tos_part_img.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python3
+#!/usr/bin/env python3
 # Copyright (c) 2013-2021, NVIDIA CORPORATION. All rights reserved.
 #
 # Permission is hereby granted, free of charge, to any person obtaining
@@ -36,6 +36,10 @@ import string
 import optparse
 import subprocess
 import tempfile
+import codecs
+
+hex_decode = codecs.getdecoder("hex_codec")
+hex_encode = codecs.getencoder("hex_codec")
 
 # T124 uses a static monitor library
 monitor_lib = "libmonitor"
@@ -260,7 +264,7 @@ if args.cipher:
 
                 # XXX Could use pipes
                 s = tempfile.NamedTemporaryFile(delete=True)
-                s.write("00000000000000000000000000000001".decode("hex"))
+                s.write(hex_decode("00000000000000000000000000000001")[0])
                 s.flush()
                 s.seek(0)
                 k = tempfile.NamedTemporaryFile(delete=True)
@@ -271,7 +275,7 @@ if args.cipher:
                 s.close()
                 k.flush()
                 k.seek(0)
-                key=k.read().encode("hex")
+                key=hex_encode(k.read())[0].decode('utf-8')
                 k.close()
 
     image_file = tempfile.NamedTemporaryFile(delete=True)
@@ -288,7 +292,7 @@ if args.cipher:
     image_file.flush()
     image_file.seek(0)
 
-    subprocess.call(["openssl", "enc", "-e", "-nopad", "-aes-128-cbc", "-K", key, "-iv", iv.encode("hex")],
+    subprocess.call(["openssl", "enc", "-e", "-nopad", "-aes-128-cbc", "-K", key, "-iv", hex_encode(iv)[0].decode('utf-8')],
                     stdin=image_file, stdout=dest)
     image_file.close()
 
