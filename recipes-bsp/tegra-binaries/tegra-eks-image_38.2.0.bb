DESCRIPTION = "Encrypted keyblob image"
LICENSE = "MIT"
LIC_FILES_CHKSUM = "file://${COMMON_LICENSE_DIR}/MIT;md5=0835ade698e0bcf8506ecda2f7b4f302"

COMPATIBLE_MACHINE = "(tegra)"
INHIBIT_DEFAULT_DEPS = "1"

DEPENDS = "tegra-eks-image-base optee-nvsamples-native python3-pycryptodome-native"

inherit python3native
# python3-pycryptodome needs the legacy provider, so set OPENSSL_MODULES to the
# right path until this is relocated automatically.
export OPENSSL_MODULES = "${STAGING_LIBDIR_NATIVE}/ossl-modules"

def tegra_ekb_filechecksums(d):
    files = []
    for key_file_var in ["TEGRA_EKB_OEM_K1", "TEGRA_EKB_SYM2", "TEGRA_EKB_AUTH"]:
        key_file = d.getVar(key_file_var)
        if key_file:
            files.append(key_file)
    if len(files) == 0:
        return ''
    return ' '.join([f + ':True' for f in files])

def tegra_gen_ekb_args(d):
    import os
    import bb

    args = "-chip %s" % d.getVar('TEGRA_EKB_CHIP')
    oemk1 = d.getVar('TEGRA_EKB_OEM_K1')
    if oemk1:
        if not os.path.exists(oemk1):
            bb.fatal("OemK1 key does not exist: %s" % oemk1)
        args += " -oem_k1_key %s" % oemk1
    sym2 = d.getVar('TEGRA_EKB_SYM2')
    if sym2:
        if not os.path.exists(sym2):
            bb.fatal("sym_key2 does not exist: %s" % sym2)
        args += " -in_sym_key2 %s" % sym2
    auth = d.getVar('TEGRA_EKB_AUTH')
    if auth:
        if not os.path.exists(auth):
            bb.fatal("auth key does not exist: %s" % auth)
        args += " -in_auth_key %s" % auth
    args += " -out ${B}/eks.img"
    return args

TEGRA_EKB_CHIP ?= "t234"
TEGRA_GEN_EKB_ARGS ?= "${@tegra_gen_ekb_args(d)}"

# The following variables point to key files generated by the user:
#
# TEGRA_EKB_OEM_K1: The OEM_K1 key stored in the OEM_K1 fuse. If secure boot fuse is not set, this can be 0000000000000000000000000000000000000000000000000000000000000000.
# TEGRA_EKB_SYM2:   (optional, but recommended) The disk encryption key. hwkey-agent and luks-srv use it.
# TEGRA_EKB_AUTH:   The UEFI variable authentication key.
#
# see official documentation for more info https://docs.nvidia.com/jetson/archives/r36.4.3/DeveloperGuide/SD/Security/OpTee.html#ekb-encrypted-key-blob

TEGRA_EKB_OEM_K1 ?= ""
TEGRA_EKB_SYM2 ?= ""
TEGRA_EKB_AUTH ?= ""

do_configure[noexec] = "1"

do_compile() {
    if [ -s "${TEGRA_EKB_OEM_K1}" ]; then
        ${PYTHON} ${RECIPE_SYSROOT_NATIVE}/usr/bin/gen_ekb.py ${TEGRA_GEN_EKB_ARGS}
    else
        cp ${STAGING_DATADIR}/l4t-eks-image/eks.img ${B}/eks.img
    fi
}
do_compile[file-checksums] = "${@tegra_ekb_filechecksums(d)}"

do_install() {
    install -D -m 0644 ${B}/eks.img -t ${D}${datadir}/tegraflash
}

PACKAGES = "${PN}-dev"
FILES:${PN}-dev = "${datadir}"
RRECOMMENDS:${PN}-dev = ""
PACKAGE_ARCH = "${MACHINE_ARCH}"
