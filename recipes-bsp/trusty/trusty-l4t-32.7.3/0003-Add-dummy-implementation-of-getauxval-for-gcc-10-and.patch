From cf9fe6a7006295d8c19c66b92a223c2479126d49 Mon Sep 17 00:00:00 2001
From: Matt Madison <matt@madison.systems>
Date: Fri, 2 Dec 2022 08:42:18 -0800
Subject: [PATCH] Add dummy implementation of getauxval for gcc 10 and later

libgcc with gcc 10 and later expects libc to provide a
"__getauxval" function.  Add a dummy version of that function
to lk's libc to prevent build failures.

Signed-off-by: Matt Madison <matt@madison.systems>
---
 lk/common/lib/libc/getauxval.c | 30 ++++++++++++++++++++++++++++++
 lk/common/lib/libc/rules.mk    |  3 ++-
 2 files changed, 32 insertions(+), 1 deletion(-)
 create mode 100644 lk/common/lib/libc/getauxval.c

diff --git a/lk/common/lib/libc/getauxval.c b/lk/common/lib/libc/getauxval.c
new file mode 100644
index 0000000..7a82ce3
--- /dev/null
+++ b/lk/common/lib/libc/getauxval.c
@@ -0,0 +1,30 @@
+/*
+ * Copyright (c) 2022 OE4T Project
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files
+ * (the "Software"), to deal in the Software without restriction,
+ * including without limitation the rights to use, copy, modify, merge,
+ * publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so,
+ * subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+ * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+ * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+ * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+#include <errno.h>
+
+unsigned long int __getauxval(unsigned long int type)
+{
+	errno = ENOENT;
+	return 0;
+}
diff --git a/lk/common/lib/libc/rules.mk b/lk/common/lib/libc/rules.mk
index 052c223..cffb12b 100644
--- a/lk/common/lib/libc/rules.mk
+++ b/lk/common/lib/libc/rules.mk
@@ -14,7 +14,8 @@ MODULE_SRCS += \
 	$(LOCAL_DIR)/stdio.c \
 	$(LOCAL_DIR)/qsort.c \
 	$(LOCAL_DIR)/eabi.c \
-	$(LOCAL_DIR)/stackprotector.c
+	$(LOCAL_DIR)/stackprotector.c \
+	$(LOCAL_DIR)/getauxval.c
 
 ifneq ($(WITH_CUSTOM_MALLOC),true)
 MODULE_SRCS += $(LOCAL_DIR)/malloc.c
