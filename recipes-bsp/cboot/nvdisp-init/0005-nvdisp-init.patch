Upstream-Status: Pending

# SPDX-FileCopyrightText: Copyright (c) 2022 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: LicenseRef-NvidiaProprietary
#
# NVIDIA CORPORATION, its affiliates and licensors retain all intellectual
# property and proprietary rights in and to this material, related
# documentation and any modifications thereto. Any use, reproduction,
# disclosure or distribution of this material and related documentation
# without an express license agreement from NVIDIA CORPORATION or
# its affiliates is strictly prohibited.

--- a/bootloader/partner/common/drivers/pmic/max77620/tegrabl_pmic_max77620.c
+++ b/bootloader/partner/common/drivers/pmic/max77620/tegrabl_pmic_max77620.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2017, NVIDIA CORPORATION.  All rights reserved.
+ * Copyright (c) 2016-2022, NVIDIA CORPORATION.  All rights reserved.
  *
  * NVIDIA CORPORATION and its licensors retain all intellectual property
  * and proprietary rights in and to this software, related documentation
@@ -658,11 +658,12 @@
 	}
 
 	/* Set fdt offset */
+	//TCW Note: node name in newer DTB is "/bpmp/i2c/spmic", was "/bpmp_i2c/spmic" 
 	internal_node_offset = 0;
 	if (TEGRABL_NO_ERROR != tegrabl_dt_get_node_with_path(
-									fdt, "/bpmp_i2c/spmic",
-									&internal_node_offset)) {
-		pr_error("Cannot find DT node for 'bpmp_i2c' (pmic max77620)\n");
+					fdt, "/bpmp/i2c/spmic",		//tcw
+					&internal_node_offset)) {
+		pr_error("Cannot find DT node for 'bpmp/i2c' (pmic max77620)\n");
 		goto fail;
 	}
 
--- a/bootloader/partner/common/drivers/qspi/tegrabl_qspi.c
+++ b/bootloader/partner/common/drivers/qspi/tegrabl_qspi.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-2019, NVIDIA CORPORATION.  All rights reserved.
+ * Copyright (c) 2015-2022, NVIDIA CORPORATION.  All rights reserved.
  *
  * NVIDIA CORPORATION and its licensors retain all intellectual property
  * and proprietary rights in and to this software, related documentation
@@ -143,6 +143,19 @@
 	uint32_t rate = 0U;
 	uint32_t flag = 0U;
 	bool is_pllc4 = false;
+
+	//TCW Print out some clock data, force 133MHZ
+	//This allows XNX to init QSPI correctly and find all partitions, etc.
+	pr_info("%s: qparams clk_src = %u, clk_div = %d, clk_src_freq = %u, interface_freq = %u\n",
+		__func__, qparams->clk_src, qparams->clk_div,
+		qparams->clk_src_freq, qparams->interface_freq);
+
+	if (qparams->interface_freq < 133000000U) {
+		qparams->interface_freq = 133000000U;
+		pr_info("%s: FORCING INTERFACE_FREQ TO %u!!\n", __func__, qparams->interface_freq);
+	}
+	//TCW ends
+
 	switch (qparams->clk_src) {
 	case 0:
 		/* handling this case to keep it backward compatible */
@@ -356,8 +369,11 @@
 		return err;
 	}
 
-	pr_trace("tx_clk_tap_delay : %u\n", qparams->trimmer1_val);
-	pr_trace("rx_clk_tap_delay : %u\n", qparams->trimmer2_val);
+	//TCW RX Clock tap delay s/b 0x10, I can't find where it s/b set.
+	//Force it here
+	qparams->trimmer2_val = 16;
+	pr_info("tx_clk_tap_delay : %u\n", qparams->trimmer1_val);
+	pr_info("rx_clk_tap_delay : %u\n", qparams->trimmer2_val);
 
 	/* Program trimmer values based on params */
 	reg =
--- a/bootloader/partner/common/drivers/usbh/tegrabl_xusbh_fw.c
+++ b/bootloader/partner/common/drivers/usbh/tegrabl_xusbh_fw.c
@@ -1,4 +1,4 @@
-/* Copyright (c) 2018-2021 NVIDIA Corporation.  All rights reserved.
+/* Copyright (c) 2018-2022 NVIDIA Corporation.  All rights reserved.
  *
  * NVIDIA Corporation and its licensors retain all intellectual property
  * and proprietary rights in and to this software and related documentation
@@ -144,9 +144,10 @@
 {
 	tegrabl_error_t err = TEGRABL_NO_ERROR;
 	char partition_name[TEGRABL_GPT_MAX_PARTITION_NAME + 1];
-	uint32_t active_slot = BOOT_SLOT_A;
 	struct tegrabl_partition part;
-
+#if defined(CONFIG_ENABLE_A_B_SLOT)
+	uint32_t active_slot = BOOT_SLOT_A;
+#endif	//tcw
 	strcpy(partition_name, "xusb-fw");
 #if defined(CONFIG_ENABLE_A_B_SLOT)
 	err = tegrabl_a_b_get_active_slot(NULL, &active_slot);
@@ -190,7 +191,6 @@
 	uint8_t *fw_data;
 	uint64_t fw_base;
 	char partition_name[TEGRABL_GPT_MAX_PARTITION_NAME + 1];
-	uint32_t active_slot = BOOT_SLOT_A;
 	dma_addr_t dma_buf;
 	uint32_t reg_val;
 	uint32_t code_tag_blocks;
@@ -198,6 +198,9 @@
 	uint32_t timeout;
 	uint32_t part_size;
 	char *buffer;
+#if defined(CONFIG_ENABLE_A_B_SLOT)
+	uint32_t active_slot = BOOT_SLOT_A;
+#endif	//tcw
 
 	/* ARU reset..this is done in kernel code */
 	NV_WRITE32(NV_ADDRESS_MAP_XUSB_HOST_CFG_BASE + 0x42c, 0x1);
--- a/bootloader/partner/common/lib/linuxboot/extlinux_boot.c
+++ b/bootloader/partner/common/lib/linuxboot/extlinux_boot.c
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2019-2021, NVIDIA Corporation.  All Rights Reserved.
+ * Copyright (c) 2019-2022, NVIDIA Corporation.  All Rights Reserved.
  *
  * NVIDIA Corporation and its licensors retain all intellectual property and
  * proprietary rights in and to this software and related documentation.  Any
@@ -373,12 +373,12 @@
 											uint32_t *load_size,
 											bool *loaded_from_rootfs)
 {
-	uint32_t sigheader_size = 0;
 	uint32_t file_size;
 	void *load_addr;
 	tegrabl_error_t err = TEGRABL_NO_ERROR;
 
 #if defined(CONFIG_ENABLE_SECURE_BOOT)
+	uint32_t sigheader_size = 0;			//tcw move down here
 	char sig_file_path[FS_MAX_PATH_LEN];
 	uint32_t sig_file_size;
 	bool fail_flag = false;
--- a/bootloader/partner/common/lib/linuxboot/rules.mk
+++ b/bootloader/partner/common/lib/linuxboot/rules.mk
@@ -25,16 +25,17 @@
 	$(LOCAL_DIR)/../../../t18x/cboot/lib/lwip/include
 
 MODULE_DEPS += \
+	$(LOCAL_DIR)/../../../t18x/common/lib/partitionloader \
 	$(LOCAL_DIR)/../libfdt \
 	$(LOCAL_DIR)/../devicetree \
-	$(LOCAL_DIR)/../board_info \
-	$(LOCAL_DIR)/../plugin_manager \
-	$(LOCAL_DIR)/../external/libufdt \
-	$(LOCAL_DIR)/../odmdata \
-	$(LOCAL_DIR)/../../../t18x/common/lib/partitionloader \
 	$(LOCAL_DIR)/../decompress \
+	$(LOCAL_DIR)/../odmdata \
+	$(LOCAL_DIR)/../board_info \
 	$(LOCAL_DIR)/../file_manager
 
+#	$(LOCAL_DIR)/../plugin_manager \
+#	$(LOCAL_DIR)/../external/libufdt \
+
 ifneq ($(filter t18x, $(TARGET_FAMILY)),)
 MODULE_DEPS += \
 	$(LOCAL_DIR)/../a_b_boot
@@ -46,18 +47,20 @@
 
 MODULE_SRCS += \
 	$(LOCAL_DIR)/cmdline.c \
-	$(LOCAL_DIR)/dtb_update.c \
-	$(LOCAL_DIR)/dtb_overlay.c \
 	$(LOCAL_DIR)/../../../$(TARGET_FAMILY)/common/lib/linuxboot/$(TARGET)/linuxboot_helper.c \
 	$(LOCAL_DIR)/linuxboot_utils.c \
 	$(LOCAL_DIR)/fixed_boot.c \
 	$(LOCAL_DIR)/linux_load.c
 
+#	$(LOCAL_DIR)/dtb_update.c \
+#	$(LOCAL_DIR)/dtb_overlay.c \
+
 ifneq ($(filter t19x, $(TARGET_FAMILY)),)
 MODULE_SRCS += \
-	$(LOCAL_DIR)/removable_boot.c \
-	$(LOCAL_DIR)/net_boot.c \
 	$(LOCAL_DIR)/extlinux_boot.c
 endif
 
+#	$(LOCAL_DIR)/removable_boot.c \
+#	$(LOCAL_DIR)/net_boot.c \
+
 include make/module.mk
--- a/bootloader/partner/common/lib/partition_manager/tegrabl_partition_manager.c
+++ b/bootloader/partner/common/lib/partition_manager/tegrabl_partition_manager.c
@@ -141,7 +141,7 @@
 	}
 
 	if (partition_info == NULL) {
-		pr_debug("Cannot find partition %s\n", partition_name);
+		pr_error("Cannot find partition %s\n", partition_name);
 		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, AUX_INFO_PARTITION_NOT_FOUND);
 		(void)memset(partition, 0x0, sizeof(*partition));
 		goto fail;
@@ -314,7 +314,7 @@
 	partition_info = partition->partition_info;
 
 	if (partition_info == NULL) {
-		pr_debug("Partition handle is not initialized appropriately.\n");
+		pr_error("Partition handle is not initialized appropriately.\n");
 		goto fail;
 	}
 
@@ -345,7 +345,7 @@
 
 	if ((partition_info == NULL) || (partition->block_device == NULL)) {
 		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_INITIALIZED, 2);
-		pr_debug("Partition handle is not initialized appropriately.\n");
+		pr_error("Partition handle is not initialized appropriately.\n");
 		goto fail;
 	}
 
@@ -380,7 +380,7 @@
 
 	if ((partition_info == NULL) || (partition->block_device == NULL)) {
 		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_INITIALIZED, 3);
-		pr_debug("Partition handle is not initialized appropriately.\n");
+		pr_error("Partition handle is not initialized appropriately.\n");
 		goto fail;
 	}
 
@@ -389,7 +389,7 @@
 
 	if (partition_info->total_size < (num_bytes + partition->offset)) {
 		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 0);
-		pr_debug("Cannot write beyond partition boundary for %s\n",
+		pr_error("Cannot write beyond partition boundary for %s\n",
 				 partition_info->name);
 		goto fail;
 	}
@@ -426,7 +426,7 @@
 
 	if (partition_info == NULL) {
 		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_INITIALIZED, 4);
-		pr_debug("Partition handle is not initialized appropriately.\n");
+		pr_error("Partition handle is not initialized appropriately.\n");
 		goto fail;
 	}
 
@@ -500,7 +500,7 @@
 
 	if ((partition_info == NULL) || (partition->block_device == NULL)) {
 		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_INITIALIZED, 5);
-		pr_debug("Partition handle is not initialized appropriately.\n");
+		pr_error("Partition handle is not initialized appropriately.\n");
 		goto fail;
 	}
 
@@ -571,13 +571,13 @@
 	partition_info = partition->partition_info;
 
 	if ((partition_info == NULL) || (partition->block_device == NULL)) {
-		pr_debug("Partition handle is not initialized appropriately.\n");
+		pr_error("Partition handle is not initialized appropriately.\n");
 		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 8);
 		goto fail;
 	}
 
 	if (partition_info->num_sectors < (start_sector + num_sectors)) {
-		pr_debug("Cannot read beyond partition boundary for %s\n",
+		pr_error("Cannot read beyond partition boundary for %s\n",
 				 partition_info->name);
 		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 9);
 		goto fail;
@@ -625,13 +625,13 @@
 	partition_info = partition->partition_info;
 
 	if ((partition_info == NULL) || (partition->block_device == NULL)) {
-		pr_debug("Partition handle is not initialized appropriately.\n");
+		pr_error("Partition handle is not initialized appropriately.\n");
 		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 12);
 		goto fail;
 	}
 
 	if (partition_info->num_sectors < (start_sector + num_sectors)) {
-		pr_debug("Cannot write beyond partition boundary for %s\n",
+		pr_error("Cannot write beyond partition boundary for %s\n",
 				 partition_info->name);
 		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 13);
 		goto fail;
@@ -694,7 +694,7 @@
 				storage_info = tegrabl_malloc(sizeof(*storage_info));
 				if (storage_info == NULL) {
 					error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
-					pr_debug("Failed to allocate memory for storage info\n");
+					pr_error("Failed to allocate memory for storage info\n");
 					goto fail;
 				}
 				storage_info->partitions = partitions;
@@ -718,7 +718,7 @@
 		dev->published = (error == TEGRABL_NO_ERROR);
 
 		if (TEGRABL_NO_ERROR != error) {
-			pr_debug("Failed to publish %08x\n", dev->device_id);
+			pr_error("Failed to publish %08x\n", dev->device_id);
 		}
 	}
 
@@ -741,7 +741,7 @@
 
 		if (storage_list == NULL) {
 			error = TEGRABL_ERROR(TEGRABL_ERR_NOT_INITIALIZED, 0);
-			pr_debug("Partition manager might not be initialized.\n");
+			pr_error("Partition manager might not be initialized.\n");
 			goto fail;
 		}
 
@@ -773,7 +773,7 @@
 
 	if (storage_list == NULL) {
 		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 1);
-		pr_debug("Failed to allocate memory for storage info list.\n");
+		pr_error("Failed to allocate memory for storage info list.\n");
 		goto fail;
 	}
 
--- a/bootloader/partner/t18x/cboot/app/kernel_boot/kernel_boot.c
+++ b/bootloader/partner/t18x/cboot/app/kernel_boot/kernel_boot.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2021, NVIDIA Corporation.	All Rights Reserved.
+ * Copyright (c) 2016-2022, NVIDIA Corporation.	All Rights Reserved.
  *
  * NVIDIA Corporation and its licensors retain all intellectual property and
  * proprietary rights in and to this software and related documentation.  Any
@@ -51,7 +51,7 @@
 
 #define LOCAL_TRACE 0
 
-#if defined(CONFIG_ENABLE_DISPLAY)
+#if defined(CONFIG_ENABLE_DISPLAY) && defined(CONFIG_ENABLE_NVBLOB)
 static tegrabl_error_t display_boot_logo(void)
 {
 	struct tegrabl_image_info image;
@@ -77,12 +77,16 @@
 }
 #endif
 
+//tcw Start of UEFI code in combo nvdisp-init+UEFI binary
+extern uintptr_t uefi_start;
+
 tegrabl_error_t load_and_boot_kernel(struct tegrabl_kernel_bin *kernel)
 {
 	void *kernel_entry_point = NULL;
 	void *kernel_dtb = NULL;
 	void (*kernel_entry)(uint64_t x0, uint64_t x1, uint64_t x2,
 						 uint64_t x3);
+#if defined(CONFIG_ENABLE_KERNEL_BOOT)				//tcw Skip!
 	tegrabl_error_t err = TEGRABL_NO_ERROR;
 	struct tegrabl_kernel_load_callbacks callbacks;
 
@@ -95,8 +99,9 @@
 	kernel->load_from_storage = true;
 
 	err = tegrabl_load_kernel_and_dtb(kernel, &kernel_entry_point,
-						  &kernel_dtb, &callbacks, NULL, 0);
-
+				  &kernel_dtb, &callbacks, NULL, 0);
+#endif	//tcw KERNEL_BOOT
+#if defined(CONFIG_ENABLE_A_B_SLOT)
 	/*
 	 * Update smd if a/b retry counter changed
 	 * The slot priorities are rotated here too,
@@ -110,12 +115,12 @@
 		tegrabl_reset();
 		return err;
 	}
-
+#endif	// ENABLE_A_B_SLOT
 #if defined(CONFIG_OS_IS_ANDROID)
 	tegrabl_send_tos_param();
 #endif
 
-#if defined(CONFIG_ENABLE_DISPLAY)
+#if defined(CONFIG_ENABLE_DISPLAY) && defined(CONFIG_ENABLE_NVBLOB)
 	err = display_boot_logo();
 	if (err != TEGRABL_NO_ERROR)
 		pr_warn("Boot logo display failed...\n");
@@ -125,7 +130,8 @@
 	tegrabl_profiler_record("kernel_boot exit", 0, DETAILED);
 #endif
 
-	pr_info("Kernel EP: %p, DTB: %p\n", kernel_entry_point, kernel_dtb);
+	//tcw after boot logo, jump to UEFI binary entry point ...
+	kernel_entry_point = (void *)uefi_start;
 
 	platform_uninit();
 
@@ -135,6 +141,9 @@
 	 * as device accesses when the MMU is off, and device memory doesn't
 	 * support unaligned accesses.
 	 */
+#ifdef	DEBUG
+	pr_info("%s: Jumping to UEFI @ %p ...\n", __func__, kernel_entry_point);
+#endif
 	kernel_entry = (void *)kernel_entry_point;
 	kernel_entry((uint64_t)kernel_dtb, 0, 0, 0);
 
--- a/bootloader/partner/t18x/cboot/platform/t194/l4t.mk
+++ b/bootloader/partner/t18x/cboot/platform/t194/l4t.mk
@@ -1,5 +1,5 @@
 #
-# Copyright (c) 2017-2021, NVIDIA CORPORATION.  All rights reserved.
+# Copyright (c) 2017-2022, NVIDIA CORPORATION.  All rights reserved.
 #
 # NVIDIA CORPORATION and its licensors retain all intellectual property
 # and proprietary rights in and to this software and related documentation
@@ -11,22 +11,9 @@
 # Add any needed GLOBAL_DEFINES here
 GLOBAL_DEFINES += \
 	CONFIG_OS_IS_L4T=1 \
-	CONFIG_ENABLE_BOOT_DEVICE_SELECT=1 \
-	CONFIG_ENABLE_SDCARD=1 \
-	CONFIG_ENABLE_USB_MS=1 \
-	CONFIG_ENABLE_USB_SD_BOOT=1 \
-	CONFIG_ENABLE_NVME_BOOT=1 \
-	CONFIG_ENABLE_ETHERNET_BOOT=1 \
-	CONFIG_ENABLE_SECURE_BOOT=1 \
 	CONFIG_ENABLE_DISPLAY=1 \
-	CONFIG_ENABLE_SHELL=1 \
-	CONFIG_ENABLE_L4T_RECOVERY=1 \
-	CONFIG_ENABLE_EXTLINUX_BOOT=1
-
-MODULE_DEPS +=	\
-	lib/lwip \
-	lib/console
+	CONFIG_ENABLE_DP=1 \
+	CONFIG_ENABLE_NVDISP_INIT=1 \
+	CONFIG_NVDISP_SIZE=0x60000 \
+	CONFIG_NVDISP_UEFI_SIZE=0x300000
 
-MODULE_DEPS += \
-	$(LOCAL_DIR)/../../../../common/drivers/eqos \
-	$(LOCAL_DIR)/../../../../common/drivers/phy
--- a/bootloader/partner/t18x/cboot/platform/t194/platform.c
+++ b/bootloader/partner/t18x/cboot/platform/t194/platform.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017-2020, NVIDIA CORPORATION.  All rights reserved.
+ * Copyright (c) 2017-2022, NVIDIA CORPORATION.  All rights reserved.
  *
  * NVIDIA CORPORATION and its licensors retain all intellectual property
  * and proprietary rights in and to this software, related documentation
@@ -95,6 +95,12 @@
 extern int __version_start;
 
 extern int _end;
+
+#ifdef CONFIG_ENABLE_NVDISP_INIT
+extern int _start;
+uintptr_t uefi_start;
+#endif
+
 struct tboot_cpubl_params *boot_params;
 
 #define CPUBL_PARAMS_SIZE	(64 * 1024LLU)
@@ -346,9 +352,13 @@
 		tegrabl_debug_deinit();
 	}
 
-
+#if defined(CONFIG_ENABLE_NVDISP_INIT)
+	pr_info("Welcome to NVDisp-Init\n");
+	pr_info("NVDisp-Init version: %s\n", (char *) &__version_start);
+#else
 	pr_info("Welcome to Cboot\n");
 	pr_info("Cboot Version: %s\n", (char *) &__version_start);
+#endif
 	pr_info("CPU-BL Params @ %p\n", boot_params);
 
 	for (carveout = 0; carveout < CARVEOUT_NUM; carveout++) {
@@ -553,7 +563,9 @@
 #if defined(CONFIG_DT_SUPPORT)
 	void *bl_dtb = NULL;
 #endif
+#if defined(CONFIG_ENABLE_CBO_FILE)		//tcw
 	bool is_cbo_read = true;
+#endif						//tcw
 	bool hang_up = false;
 
 #if defined(CONFIG_ENABLE_STAGED_SCRUBBING)
@@ -618,6 +630,8 @@
 		pr_error("GPIO driver init failed\n");
 		goto fail;
 	}
+#endif
+#if defined(CONFIG_ENABLE_GPIO_TCA9539)			//tcw
 	err = tegrabl_tca9539_init();
 	if (err != TEGRABL_NO_ERROR) {
 		pr_error("GPIO TCA9539 driver init failed\n");
@@ -626,7 +640,7 @@
 		 * goto fail;
 		 */
 	}
-#endif
+#endif		//tcw
 
 	err = platform_init_power();
 	if (TEGRABL_NO_ERROR != err) {
@@ -668,7 +682,7 @@
 		pr_warn("display init failed\n");
 	}
 #endif
-
+#if defined(CONFIG_ENABLE_CBO_FILE)		//tcw
 	pr_info("Load in CBoot Boot Options partition and parse it\n");
 	err = tegrabl_read_cbo(CBO_PARTITION);
 	if (err != TEGRABL_NO_ERROR) {
@@ -677,7 +691,7 @@
 	}
 
 	(void)tegrabl_cbo_parse_info(is_cbo_read);
-
+#endif	//tcw
 #if defined(CONFIG_ENABLE_SHELL)
 	enter_shell_upon_user_request();
 #endif
@@ -696,6 +710,14 @@
 	size_t heap_size;
 
 	heap_start = (uintptr_t)&_end;
+
+#ifdef CONFIG_ENABLE_NVDISP_INIT
+	pr_debug("_start=0x%zx\n", (uintptr_t)&_start);
+	uefi_start = (uintptr_t)&_start + CONFIG_NVDISP_SIZE;
+	pr_debug("uefi_start=0x%zx\n", (uintptr_t)uefi_start);
+	heap_start = uefi_start + CONFIG_NVDISP_UEFI_SIZE;
+#endif
+
 	heap_end = boot_params->cpubl_carveout_safe_end_offset;
 	heap_size = heap_end - heap_start;
 
--- a/bootloader/partner/t18x/cboot/platform/t194/rules.mk
+++ b/bootloader/partner/t18x/cboot/platform/t194/rules.mk
@@ -44,25 +44,13 @@
 	$(LOCAL_DIR)/../../../../$(TARGET_FAMILY)/common/soc/$(TARGET)/ccplex_nvg \
 	$(LOCAL_DIR)/../../../../$(TARGET_FAMILY)/common/soc/$(TARGET)/ccplex_cache \
 	$(LOCAL_DIR)/../../../../$(TARGET_FAMILY)/common/drivers/soc/$(TARGET)/clocks \
-	$(LOCAL_DIR)/../../../../$(TARGET_FAMILY)/common/soc/t194/qual_engine \
 	$(LOCAL_DIR)/../../../../common/lib/ipc \
 	$(LOCAL_DIR)/../../../../common/lib/blockdev \
 	$(LOCAL_DIR)/../../../../common/lib/tegrabl_error \
-	$(LOCAL_DIR)/../../../../common/drivers/sdmmc \
-	$(LOCAL_DIR)/../../../../common/drivers/sata \
-	$(LOCAL_DIR)/../../../../common/drivers/spi \
-	$(LOCAL_DIR)/../../../../common/drivers/ufs \
 	$(LOCAL_DIR)/../../../../common/drivers/gpcdma \
-	$(LOCAL_DIR)/../../../../common/drivers/qspi \
-	$(LOCAL_DIR)/../../../../common/drivers/qspi_flash \
 	$(LOCAL_DIR)/../../../../common/drivers/i2c \
 	$(LOCAL_DIR)/../../../../common/drivers/i2c_dev \
-	$(LOCAL_DIR)/../../../../common/drivers/eeprom \
-	$(LOCAL_DIR)/../../../../common/drivers/usbh \
-	$(LOCAL_DIR)/../../../../common/drivers/usb/storage \
-	$(LOCAL_DIR)/../../../../common/drivers/pcie \
-	$(LOCAL_DIR)/../../../../common/drivers/nvme \
-	$(LOCAL_DIR)/../../../../common/lib/eeprom_manager \
+	$(LOCAL_DIR)/../../../../common/drivers/sdmmc \
 	$(LOCAL_DIR)/../../../../common/arch/arm64 \
 	$(LOCAL_DIR)/../../../../t18x/common/lib/mce \
 	$(LOCAL_DIR)/../../../../common/lib/psci \
@@ -71,12 +59,11 @@
 	$(LOCAL_DIR)/../../../../common/drivers/pmic/max77620 \
 	$(LOCAL_DIR)/../../../../common/drivers/regulator \
 	$(LOCAL_DIR)/../../../../common/drivers/gpio \
-	$(LOCAL_DIR)/../../../../common/drivers/keyboard \
 	$(LOCAL_DIR)/../../../../common/drivers/comb_uart \
-	$(LOCAL_DIR)/../../../../common/lib/a_b_boot \
 	$(LOCAL_DIR)/../../../../common/drivers/pwm \
 	$(LOCAL_DIR)/../../../../common/drivers/display \
-	$(LOCAL_DIR)/../../../../common/lib/cbo \
+	$(LOCAL_DIR)/../../../../common/drivers/qspi \
+	$(LOCAL_DIR)/../../../../common/drivers/qspi_flash \
 	$(LOCAL_DIR)/../../../../$(TARGET_FAMILY)/common/lib/device_prod
 
 ifeq ($(filter t19x, $(TARGET_FAMILY)),)
@@ -109,29 +96,17 @@
 	CONFIG_MULTICORE_SUPPORT=1 \
 	CONFIG_ENABLE_EMMC=1 \
 	CONFIG_ENABLE_QSPI=1 \
-	CONFIG_ENABLE_SATA=1 \
-	CONFIG_ENABLE_UFS=1 \
-	CONFIG_ENABLE_UFS_HS_MODE=1 \
-	CONFIG_ENABLE_UFS_USE_CAR=1 \
-	CONFIG_ENABLE_UFS_SKIP_PMC_IMPL=1 \
-	CONFIG_ENABLE_NVBLOB=1 \
 	CONFIG_WDT_PERIOD_IN_EXECUTION=100 \
 	CONFIG_ENABLE_WDT=1 \
-	CONFIG_ENABLE_EEPROM=1 \
-	CONFIG_ENABLE_PLUGIN_MANAGER=1 \
 	CONFIG_ENABLE_I2C=1 \
 	CONFIG_POWER_I2C_BPMPFW=1 \
 	CONFIG_ENABLE_GPIO=1 \
 	CONFIG_ENABLE_GPIO_DT_BASED=1 \
 	CONFIG_ENABLE_PMIC_MAX20024=1 \
-	CONFIG_ENABLE_A_B_SLOT=1 \
 	CONFIG_ENABLE_SDMMC_64_BIT_SUPPORT=1 \
 	CONFIG_ENABLE_DPAUX=1 \
 	CONFIG_ENABLE_PWM=1 \
-	CONFIG_ENABLE_BL_DTB_OVERRIDE=1 \
 	CONFIG_ENABLE_DEVICE_PROD=1 \
-	CONFIG_ENABLE_STAGED_SCRUBBING=1 \
-	CONFIG_ENABLE_WAR_CBOOT_STAGED_SCRUBBING=1 \
 	CONFIG_SKIP_GPCDMA_RESET=1 \
 	CONFIG_DEBUG_LOGLEVEL=TEGRABL_LOG_INFO

--- a/bootloader/partner/common/drivers/display/edid/tegrabl_modes.c
+++ b/bootloader/partner/common/drivers/display/edid/tegrabl_modes.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2017, NVIDIA CORPORATION.  All rights reserved.
+ * Copyright (c) 2016-2022, NVIDIA CORPORATION.  All rights reserved.
  *
  * NVIDIA Corporation and its licensors retain all intellectual property
  * and proprietary rights in and to this software, related documentation
@@ -56,6 +56,28 @@
	2, /* VIC */
 };

+struct hdmi_mode s_1024_768_0 = {
+	1024,  /* width */
+	768,  /* height */
+	24,  /* bpp */
+	(60 << 16),  /* refresh */
+	65000000,  /* frequency in hz */
+	NVDISP_MODE_AVI_M_4_3,  /* flags */
+	{
+		1,  /* h_ref_to_sync */
+		1,  /* v_ref_to_sync */
+		136,  /* h_sync_width */
+		6,  /* v_sync_width */
+		160,  /* h_back_porch */
+		29,  /* v_back_porch */
+		1024,  /* h_disp_active */
+		768,  /* v_disp_active */
+		24,  /* h_front_porch */
+		3,  /* v_front_porch */
+	},
+	0, /* VIC */
+};
+
 struct hdmi_mode s_1280_720_4 = {
	1280,  /* width */
	720,  /* height */
@@ -371,6 +393,7 @@
 struct hdmi_mode *s_hdmi_modes[] = {
	&s_640_480_1,
	&s_720_480_2,
+	&s_1024_768_0,
	&s_1280_720_4,
	&s_1920_1080_16,
	&s_720_576_17,

--- a/bootloader/partner/common/drivers/display/edid/tegrabl_modes.h
+++ b/bootloader/partner/common/drivers/display/edid/tegrabl_modes.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2017, NVIDIA CORPORATION.  All rights reserved.
+ * Copyright (c) 2016-2022, NVIDIA CORPORATION.  All rights reserved.
  *
  * NVIDIA Corporation and its licensors retain all intellectual property
  * and proprietary rights in and to this software, related documentation
@@ -17,6 +17,8 @@

 extern struct hdmi_mode s_720_480_2;

+extern struct hdmi_mode s_1024_768_0;
+
 extern struct hdmi_mode s_1280_720_4;

 extern struct hdmi_mode s_1920_1080_16;

--- a/bootloader/partner/common/drivers/display/edid/tegrabl_mode_selection.c
+++ b/bootloader/partner/common/drivers/display/edid/tegrabl_mode_selection.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2017, NVIDIA CORPORATION.  All rights reserved.
+ * Copyright (c) 2016-2022, NVIDIA CORPORATION.  All rights reserved.
  *
  * NVIDIA Corporation and its licensors retain all intellectual property
  * and proprietary rights in and to this software, related documentation
@@ -61,7 +61,7 @@
		}
	}

-	q = s_640_480_1;
+	q = s_1024_768_0;    /* Minimum mode that we support that works w/UEFI */
	for (i = 0; i < monitor_info->n_modes; i++) {
		m = monitor_info->modes[i];
		pr_info("width = %d, height = %d, frequency = %d\n", m.width, m.height,

--- a/bootloader/partner/common/drivers/display/dp/tegrabl_dp.c
+++ b/bootloader/partner/common/drivers/display/dp/tegrabl_dp.c
@@ -1,5 +1,5 @@
  /*
-  * Copyright (c) 2017-2018, NVIDIA CORPORATION.  All rights reserved.
+  * Copyright (c) 2017-2022, NVIDIA CORPORATION.  All rights reserved.
   *
   * NVIDIA Corporation and its licensors retain all intellectual property
   * and proprietary rights in and to this software, related documentation
@@ -659,9 +659,15 @@
	if (tp == TRAINING_PATTERN_DISABLE)
		tegrabl_dp_dpcd_write(dp, DPCD_TRAINING_PATTERN_SET,
							  (tp | DPCD_TRAINING_PATTERN_SET_SC_DISABLED_F));
-	else
-		tegrabl_dp_dpcd_write(dp, DPCD_TRAINING_PATTERN_SET,
-							  (tp | DPCD_TRAINING_PATTERN_SET_SC_DISABLED_T));
+	else {
+		if (tp == TRAINING_PATTERN_4) {
+			tegrabl_dp_dpcd_write(dp, DPCD_TRAINING_PATTERN_SET,
+					(0x7 | DPCD_TRAINING_PATTERN_SET_SC_DISABLED_F));
+		} else {
+			tegrabl_dp_dpcd_write(dp, DPCD_TRAINING_PATTERN_SET,
+					(tp | DPCD_TRAINING_PATTERN_SET_SC_DISABLED_T));
+		}
+	}

	tegrabl_sor_tpg(dp->sor, tp, n_lanes);
 }

--- a/bootloader/partner/common/drivers/display/dp/tegrabl_dp_lt.c
+++ b/bootloader/partner/common/drivers/display/dp/tegrabl_dp_lt.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017-2019, NVIDIA CORPORATION.  All rights reserved.
+ * Copyright (c) 2017-2022, NVIDIA CORPORATION.  All rights reserved.
  *
  * NVIDIA Corporation and its licensors retain all intellectual property
  * and proprietary rights in and to this software, related documentation
@@ -603,6 +603,7 @@
	bool ce_done = true;
	bool cur_hpd;
	tegrabl_error_t ret = TEGRABL_NO_ERROR;
+	uint32_t val;

	CHECK_RET(tegrabl_dpaux_hpd_status(lt_data->dp->hdpaux, &cur_hpd));

@@ -615,6 +616,34 @@
		goto done;
	}

+	/*
+	 * On T194, the HW pattern generator sends the RD_RESET (running
+	 * disparity reset) signal one clock cycle too early. This specifically
+	 * affects TPS4 since TPS4 requires scrambling, so whatever symbol is
+	 * sent during this early cycle will be random. As a result, the RD of
+	 * the first symbol of TPS4 will be random as well.
+	 *
+	 * In order to WAR this issue, we will send a custom BS (blanking start)
+	 * pattern when switching from TPS1 to TPS4 during equalization in order
+	 * to control what the RD of the "early symbol" will be.
+	 */
+#define BS_DISPARITY_RESET_PATTERN_1 0x1BC6F1BC
+#define BS_DISPARITY_RESET_PATTERN_2 0xC6F1BC6F
+#define BS_DISPARITY_RESET_PATTERN_3 0x6F1B
+
+	if (lt_data->dp->link_cfg.tps == TRAINING_PATTERN_4) {
+		sor_writel(lt_data->dp->sor, SOR_NV_PDISP_SOR_DP_LQ_CSTM0_0 + lt_data->dp->sor->portnum, BS_DISPARITY_RESET_PATTERN_1);
+		sor_writel(lt_data->dp->sor, SOR_NV_PDISP_SOR_DP_LQ_CSTM1_0 + lt_data->dp->sor->portnum, BS_DISPARITY_RESET_PATTERN_2);
+		sor_writel(lt_data->dp->sor, SOR_NV_PDISP_SOR_DP_LQ_CSTM2_0 + lt_data->dp->sor->portnum, BS_DISPARITY_RESET_PATTERN_3);
+
+		val = sor_readl(lt_data->dp->sor, SOR_NV_PDISP_SOR_DP_CONFIG0_0 + lt_data->dp->sor->portnum);
+		val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_CONFIG0, RD_RESET_VAL,
+				POSITIVE, val);
+		sor_writel(lt_data->dp->sor, (SOR_NV_PDISP_SOR_DP_CONFIG0_0 + lt_data->dp->sor->portnum), val);
+
+		tegrabl_sor_tpg(lt_data->dp->sor, TRAINING_PATTERN_BS_CSTM, lt_data->n_lanes);
+	}
+
	CHECK_RET(set_lt_tpg(lt_data, lt_data->dp->link_cfg.tps));

	wait_aux_training(lt_data, false);

--- a/bootloader/partner/common/drivers/display/sor/tegrabl_sor_dp.c
+++ b/bootloader/partner/common/drivers/display/sor/tegrabl_sor_dp.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017-2018, NVIDIA CORPORATION.  All rights reserved.
+ * Copyright (c) 2017-2022, NVIDIA CORPORATION.  All rights reserved.
  *
  * NVIDIA Corporation and its licensors retain all intellectual property
  * and proprietary rights in and to this software, related documentation
@@ -25,27 +25,29 @@

 void tegrabl_sor_tpg(struct sor_data *sor, uint32_t tp, uint32_t n_lanes)
 {
-	uint32_t const tbl[][2] = {
+	uint32_t const tbl[][3] = {
		/* ansi8b/10b encoded, scrambled */
-		{1, 1}, /* no pattern, training not in progress */
-		{1, 0}, /* training pattern 1 */
-		{1, 0}, /* training pattern 2 */
-		{1, 0}, /* training pattern 3 */
-		{1, 0}, /* D102 */
-		{1, 1}, /* SBLERRRATE */
-		{0, 0}, /* PRBS7 */
-		{0, 0}, /* CSTM */
-		{1, 1}, /* HBR2_COMPLIANCE */
+		{0, 1, 1}, /* no pattern, training not in progress */
+		{1, 1, 0}, /* training pattern 1 */
+		{2, 1, 0}, /* training pattern 2 */
+		{3, 1, 0}, /* training pattern 3 */
+		{4, 1, 0}, /* D102 */
+		{5, 1, 1}, /* SBLERRRATE */
+		{6, 0, 0}, /* PRBS7 */
+		{7, 0, 0}, /* CSTM */
+		{8, 1, 1}, /* HBR2_COMPLIANCE */
+		{11, 1, 1}, /* Training pattern 4 */
+		{7, 1, 1}, /* BS_CSTM */
	};
	uint32_t cnt;
	uint32_t val = 0;

	for (cnt = 0; cnt < n_lanes; cnt++) {
		uint32_t tp_shift = NV_SOR_DP_TPG_LANE1_PATTERN_SHIFT * cnt;
-		val |= tp << tp_shift |
-			tbl[tp][0] << (tp_shift +
-			NV_SOR_DP_TPG_LANE0_CHANNELCODING_SHIFT) |
+		val |= tbl[tp][0] << tp_shift |
			tbl[tp][1] << (tp_shift +
+			NV_SOR_DP_TPG_LANE0_CHANNELCODING_SHIFT) |
+			tbl[tp][2] << (tp_shift +
			NV_SOR_DP_TPG_LANE0_SCRAMBLEREN_SHIFT);
	}

--- a/bootloader/partner/common/drivers/display/sor/tegrabl_sor_dp.h
+++ b/bootloader/partner/common/drivers/display/sor/tegrabl_sor_dp.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017-2018, NVIDIA CORPORATION.  All rights reserved.
+ * Copyright (c) 2017-2022 NVIDIA CORPORATION.  All rights reserved.
  *
  * NVIDIA Corporation and its licensors retain all intellectual property
  * and proprietary rights in and to this software, related documentation
@@ -45,6 +45,7 @@
 #define TRAINING_PATTERN_HBR2_COMPLIANCE 8
 /* newly added for T19x */
 #define TRAINING_PATTERN_4 9
+#define TRAINING_PATTERN_BS_CSTM 10

 /**
  *  @brief Program training pattern in Sor register
