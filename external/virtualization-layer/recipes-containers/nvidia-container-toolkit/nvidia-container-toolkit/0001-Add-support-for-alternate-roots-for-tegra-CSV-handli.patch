From 59a35fe7532d257641cc7f0b5ab2789a2687f3cb Mon Sep 17 00:00:00 2001
From: Ilies CHERGUI <ichergui@nvidia.com>
Date: Thu, 25 Sep 2025 19:47:06 +0100
Subject: [PATCH] Add support for 'alternate' roots for tegra CSV handling

So the host OS can provide one or more trees of libraries that
should be mounted into containers, overriding the copies in
the main rootfs of the host OS.

Upstream-Status: Inappropriate [OE-specific]
Signed-off-by: Matt Madison <matt@madison.systems>
Signed-off-by: Ilies CHERGUI <ichergui@nvidia.com>
---
 cmd/nvidia-ctk/cdi/generate/generate.go     |  7 +++
 internal/config/runtime.go                  |  3 +-
 internal/config/toml_test.go                |  1 +
 internal/modifier/csv.go                    |  1 +
 internal/platform-support/tegra/csv.go      | 66 ++++++++++++++++-----
 internal/platform-support/tegra/symlinks.go | 41 +++++++------
 internal/platform-support/tegra/tegra.go    | 24 +++++++-
 pkg/nvcdi/lib-csv.go                        |  1 +
 pkg/nvcdi/lib.go                            |  1 +
 pkg/nvcdi/options.go                        |  8 +++
 10 files changed, 117 insertions(+), 36 deletions(-)

diff --git a/cmd/nvidia-ctk/cdi/generate/generate.go b/cmd/nvidia-ctk/cdi/generate/generate.go
index ceb84bb6..186a1953 100644
--- a/cmd/nvidia-ctk/cdi/generate/generate.go
+++ b/cmd/nvidia-ctk/cdi/generate/generate.go
@@ -57,6 +57,7 @@ type options struct {
 
 	configSearchPaths  cli.StringSlice
 	librarySearchPaths cli.StringSlice
+	altRoots           cli.StringSlice
 	disabledHooks      cli.StringSlice
 
 	csv struct {
@@ -147,6 +148,11 @@ func (m command) build() *cli.Command {
 			Destination: &opts.librarySearchPaths,
 			EnvVars:     []string{"NVIDIA_CTK_CDI_GENERATE_LIBRARY_SEARCH_PATHS"},
 		},
+		&cli.StringSliceFlag{
+			Name:        "alt-roots",
+			Usage:       "Specify alternate passthrough root to search for files when discovering the entities that should be included in the CDI specification.\n\tNote: This option only applies to CSV mode.",
+			Destination: &opts.altRoots,
+		},
 		&cli.StringFlag{
 			Name:    "nvidia-cdi-hook-path",
 			Aliases: []string{"nvidia-ctk-path"},
@@ -297,6 +303,7 @@ func (m command) generateSpec(opts *options) (spec.Interface, error) {
 		nvcdi.WithMode(opts.mode),
 		nvcdi.WithConfigSearchPaths(opts.configSearchPaths.Value()),
 		nvcdi.WithLibrarySearchPaths(opts.librarySearchPaths.Value()),
+		nvcdi.WithAltRoots(opts.altRoots.Value()),
 		nvcdi.WithCSVFiles(opts.csv.files.Value()),
 		nvcdi.WithCSVIgnorePatterns(opts.csv.ignorePatterns.Value()),
 		// We set the following to allow for dependency injection:
diff --git a/internal/config/runtime.go b/internal/config/runtime.go
index 315f23ba..8514598a 100644
--- a/internal/config/runtime.go
+++ b/internal/config/runtime.go
@@ -44,7 +44,8 @@ type cdiModeConfig struct {
 }
 
 type csvModeConfig struct {
-	MountSpecPath string `toml:"mount-spec-path"`
+	MountSpecPath string   `toml:"mount-spec-path"`
+	AltRoots      []string `toml:"alt-roots"`
 }
 
 type legacyModeConfig struct {
diff --git a/internal/config/toml_test.go b/internal/config/toml_test.go
index 76a64da8..216b6658 100644
--- a/internal/config/toml_test.go
+++ b/internal/config/toml_test.go
@@ -72,6 +72,7 @@ default-kind = "nvidia.com/gpu"
 spec-dirs = ["/etc/cdi", "/var/run/cdi"]
 
 [nvidia-container-runtime.modes.csv]
+alt-roots = []
 mount-spec-path = "/etc/nvidia-container-runtime/host-files-for-container.d"
 
 [nvidia-container-runtime.modes.legacy]
diff --git a/internal/modifier/csv.go b/internal/modifier/csv.go
index 1f8a12f8..dddfe036 100644
--- a/internal/modifier/csv.go
+++ b/internal/modifier/csv.go
@@ -58,6 +58,7 @@ func NewCSVModifier(logger logger.Interface, cfg *config.Config, container image
 		nvcdi.WithNVIDIACDIHookPath(cfg.NVIDIACTKConfig.Path),
 		nvcdi.WithMode(nvcdi.ModeCSV),
 		nvcdi.WithCSVFiles(csvFiles),
+		nvcdi.WithAltRoots(cfg.NVIDIAContainerRuntimeConfig.Modes.CSV.AltRoots),
 	)
 	if err != nil {
 		return nil, fmt.Errorf("failed to construct CDI library: %v", err)
diff --git a/internal/platform-support/tegra/csv.go b/internal/platform-support/tegra/csv.go
index ca760ec5..49bdd70a 100644
--- a/internal/platform-support/tegra/csv.go
+++ b/internal/platform-support/tegra/csv.go
@@ -42,16 +42,50 @@ func (o tegraOptions) newDiscovererFromCSVFiles() (discover.Discover, error) {
 		targetsByType[csv.MountSpecDev],
 	)
 
-	directories := discover.NewMounts(
+	var directories []discover.Discover
+	var libraries []discover.Discover
+	var symlinks []discover.Discover
+	var symlinkHooks []discover.Discover
+
+	symlinkTargets := o.ignorePatterns.Apply(targetsByType[csv.MountSpecSym]...)
+	o.logger.Debugf("Filtered symlink targets: %v", symlinkTargets)
+
+	for _, altRoot := range o.altRoots {
+		directories = append(directories, discover.NewMounts(
+			o.logger,
+			lookup.NewDirectoryLocator(lookup.WithLogger(o.logger), lookup.WithRoot(altRoot)),
+			altRoot,
+			targetsByType[csv.MountSpecDir],
+		))
+
+		// Libraries and symlinks use the same locator.
+		l := discover.NewMounts(
+			o.logger,
+			lookup.NewSymlinkLocator(lookup.WithLogger(o.logger), lookup.WithRoot(altRoot)),
+			altRoot,
+			targetsByType[csv.MountSpecLib],
+		)
+		libraries = append(libraries, l)
+
+		s := discover.NewMounts(
+			o.logger,
+			lookup.NewSymlinkLocator(lookup.WithLogger(o.logger), lookup.WithRoot(altRoot)),
+			altRoot,
+			symlinkTargets,
+		)
+		symlinks = append(symlinks, s)
+		symlinkHooks = append(symlinkHooks, o.createCSVSymlinkHooks(symlinkTargets, l, altRoot))
+	}
+	directories = append(directories, discover.NewMounts(
 		o.logger,
 		lookup.NewDirectoryLocator(lookup.WithLogger(o.logger), lookup.WithRoot(o.driverRoot)),
 		o.driverRoot,
 		targetsByType[csv.MountSpecDir],
-	)
+	))
 
 	// We create a discoverer for mounted libraries and add additional .so
 	// symlinks for the driver.
-	libraries := discover.WithDriverDotSoSymlinks(
+	librariesInDriverRoot := discover.WithDriverDotSoSymlinks(
 		discover.NewMounts(
 			o.logger,
 			o.symlinkLocator,
@@ -63,23 +97,25 @@ func (o tegraOptions) newDiscovererFromCSVFiles() (discover.Discover, error) {
 	)
 
 	// We process the explicitly requested symlinks.
-	symlinkTargets := o.ignorePatterns.Apply(targetsByType[csv.MountSpecSym]...)
-	o.logger.Debugf("Filtered symlink targets: %v", symlinkTargets)
-	symlinks := discover.NewMounts(
+	libraries = append(libraries, librariesInDriverRoot)
+	symlinksInDriverRoot := discover.NewMounts(
 		o.logger,
 		o.symlinkLocator,
 		o.driverRoot,
 		symlinkTargets,
 	)
-	createSymlinks := o.createCSVSymlinkHooks(symlinkTargets)
-
-	d := discover.Merge(
-		devices,
-		directories,
-		libraries,
-		symlinks,
-		createSymlinks,
-	)
+	symlinks = append(symlinks, symlinksInDriverRoot)
+	symlinkHooks = append(symlinkHooks, o.createCSVSymlinkHooks(symlinkTargets,
+		librariesInDriverRoot,
+		o.driverRoot))
+	 
+	var allDiscoverers []discover.Discover
+	allDiscoverers = append(allDiscoverers, devices)
+	allDiscoverers = append(allDiscoverers, directories...)
+	allDiscoverers = append(allDiscoverers, libraries...)
+	allDiscoverers = append(allDiscoverers, symlinks...)
+	allDiscoverers = append(allDiscoverers, symlinkHooks...)
+	d := discover.Merge(allDiscoverers...)
 
 	return d, nil
 }
diff --git a/internal/platform-support/tegra/symlinks.go b/internal/platform-support/tegra/symlinks.go
index 822d482f..f2a42444 100644
--- a/internal/platform-support/tegra/symlinks.go
+++ b/internal/platform-support/tegra/symlinks.go
@@ -17,8 +17,6 @@
 package tegra
 
 import (
-	"fmt"
-
 	"github.com/NVIDIA/nvidia-container-toolkit/internal/discover"
 	"github.com/NVIDIA/nvidia-container-toolkit/internal/logger"
 	"github.com/NVIDIA/nvidia-container-toolkit/internal/lookup"
@@ -29,6 +27,7 @@ type symlinkHook struct {
 	logger      logger.Interface
 	hookCreator discover.HookCreator
 	targets     []string
+	root        string
 
 	// The following can be overridden for testing
 	symlinkChainLocator lookup.Locator
@@ -36,12 +35,21 @@ type symlinkHook struct {
 }
 
 // createCSVSymlinkHooks creates a discoverer for a hook that creates required symlinks in the container
-func (o tegraOptions) createCSVSymlinkHooks(targets []string) discover.Discover {
+func (o tegraOptions) createCSVSymlinkHooks(targets []string, mounts discover.Discover, root string) discover.Discover {
+	l := o.symlinkChainLocators[root]
+	if l == nil {
+		l = o.symlinkChainLocator
+	}
+	r := root
+	if len(r) > 0 && r[len(r)-1] == '/' {
+		r = r[:len(r)-1]
+	}
 	return symlinkHook{
 		logger:              o.logger,
 		hookCreator:         o.hookCreator,
 		targets:             targets,
-		symlinkChainLocator: o.symlinkChainLocator,
+		root:                r,
+		symlinkChainLocator: l,
 		resolveSymlink:      o.resolveSymlink,
 	}
 }
@@ -60,7 +68,15 @@ func (d symlinkHook) getSymlinkCandidates() []string {
 			d.logger.Warningf("Failed to locate symlink %v", target)
 			continue
 		}
-		candidates = append(candidates, reslovedSymlinkChain...)
+		d.logger.Debugf("getSymlinkCandidates: resolved target %v -> %v", target, reslovedSymlinkChain)
+		for _, r := range reslovedSymlinkChain {
+			if len(d.root) > 0 {
+				r = r[len(d.root):]
+			}
+			if target != r {
+				candidates = append(candidates, r+"::"+target)
+			}
+		}
 	}
 	return candidates
 }
@@ -68,22 +84,13 @@ func (d symlinkHook) getSymlinkCandidates() []string {
 func (d symlinkHook) getCSVFileSymlinks() []string {
 	var links []string
 	created := make(map[string]bool)
-	// candidates is a list of absolute paths to symlinks in a chain, or the final target of the chain.
-	for _, candidate := range d.getSymlinkCandidates() {
-		target, err := d.resolveSymlink(candidate)
-		if err != nil {
-			d.logger.Debugf("Skipping invalid link: %v", err)
-			continue
-		} else if target == candidate {
-			d.logger.Debugf("%v is not a symlink", candidate)
-			continue
-		}
-
-		link := fmt.Sprintf("%v::%v", target, candidate)
+	// candidates is a list of symlinks to create
+	for _, link := range d.getSymlinkCandidates() {
 		if created[link] {
 			d.logger.Debugf("skipping duplicate link: %v", link)
 			continue
 		}
+		d.logger.Debugf("getCSVFileSymlinks: make link %v", link)
 		created[link] = true
 
 		links = append(links, link)
diff --git a/internal/platform-support/tegra/tegra.go b/internal/platform-support/tegra/tegra.go
index 6ad774b4..3249e0b1 100644
--- a/internal/platform-support/tegra/tegra.go
+++ b/internal/platform-support/tegra/tegra.go
@@ -32,12 +32,14 @@ type tegraOptions struct {
 	devRoot            string
 	hookCreator        discover.HookCreator
 	ldconfigPath       string
+	altRoots           []string
 	librarySearchPaths []string
 	ignorePatterns     ignoreMountSpecPatterns
 
 	// The following can be overridden for testing
-	symlinkLocator      lookup.Locator
-	symlinkChainLocator lookup.Locator
+	symlinkLocator       lookup.Locator
+	symlinkChainLocator  lookup.Locator
+	symlinkChainLocators map[string]lookup.Locator
 	// TODO: This should be replaced by a regular mock
 	resolveSymlink func(string) (string, error)
 }
@@ -64,11 +66,20 @@ func New(opts ...Option) (discover.Discover, error) {
 		)
 	}
 
+	o.symlinkChainLocators = make(map[string]lookup.Locator)
 	if o.symlinkChainLocator == nil {
-		o.symlinkChainLocator = lookup.NewSymlinkChainLocator(
+		for _, altRoot := range o.altRoots {
+			o.symlinkChainLocators[altRoot] = lookup.NewSymlinkChainLocator(
+				lookup.WithLogger(o.logger),
+				lookup.WithRoot(altRoot),
+			)
+		}
+		o.symlinkChainLocators[o.driverRoot] = lookup.NewSymlinkChainLocator(
 			lookup.WithLogger(o.logger),
 			lookup.WithRoot(o.driverRoot),
 		)
+	} else {
+		o.symlinkChainLocators[o.driverRoot] = o.symlinkChainLocator
 	}
 
 	if o.resolveSymlink == nil {
@@ -126,6 +137,13 @@ func WithDevRoot(devRoot string) Option {
 	}
 }
 
+// WithAltRoots sets alternate roots for file/lib/symlink lookups in the discoverer.
+func WithAltRoots(altRoots []string) Option {
+	return func(o *tegraOptions) {
+		o.altRoots = altRoots
+	}
+}
+
 // WithCSVFiles sets the CSV files for the discoverer.
 func WithCSVFiles(csvFiles []string) Option {
 	return func(o *tegraOptions) {
diff --git a/pkg/nvcdi/lib-csv.go b/pkg/nvcdi/lib-csv.go
index 4414f54f..2b48a949 100644
--- a/pkg/nvcdi/lib-csv.go
+++ b/pkg/nvcdi/lib-csv.go
@@ -46,6 +46,7 @@ func (l *csvlib) GetAllDeviceSpecs() ([]specs.Device, error) {
 		tegra.WithDevRoot(l.devRoot),
 		tegra.WithHookCreator(l.hookCreator),
 		tegra.WithLdconfigPath(l.ldconfigPath),
+		tegra.WithAltRoots(l.altRoots),
 		tegra.WithCSVFiles(l.csvFiles),
 		tegra.WithLibrarySearchPaths(l.librarySearchPaths...),
 		tegra.WithIngorePatterns(l.csvIgnorePatterns...),
diff --git a/pkg/nvcdi/lib.go b/pkg/nvcdi/lib.go
index 8d7177fc..b4ac252b 100644
--- a/pkg/nvcdi/lib.go
+++ b/pkg/nvcdi/lib.go
@@ -43,6 +43,7 @@ type nvcdilib struct {
 	nvidiaCDIHookPath  string
 	ldconfigPath       string
 	configSearchPaths  []string
+	altRoots           []string
 	librarySearchPaths []string
 
 	csvFiles          []string
diff --git a/pkg/nvcdi/options.go b/pkg/nvcdi/options.go
index 25494ebf..f0b3f277 100644
--- a/pkg/nvcdi/options.go
+++ b/pkg/nvcdi/options.go
@@ -175,3 +175,11 @@ func WithFeatureFlag(featureFlag FeatureFlag) Option {
 		o.featureFlags[featureFlag] = true
 	}
 }
+
+// WithAltRoots sets the alternate pass-through roots.
+// This is currently only used for CSV-mode.
+func WithAltRoots(altRoots []string) Option {
+	return func(o *nvcdilib) {
+		o.altRoots = altRoots
+	}
+}
-- 
2.34.1

