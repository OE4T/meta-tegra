From 0ebc1dee317131b4d635f620561435bdf7ff54c4 Mon Sep 17 00:00:00 2001
From: Matt Madison <matt@madison.systems>
Date: Sat, 9 Mar 2024 06:17:17 -0800
Subject: [PATCH] Add support for 'alternate' roots for tegra CSV handling

So the host OS can provide one or more trees of libraries that
should be mounted into containers, overriding the copies in
the main rootfs of the host OS.

Upstream-Status: Inappropriate [OE-specific]
Signed-off-by: Matt Madison <matt@madison.systems>
---
 cmd/nvidia-ctk/cdi/generate/generate.go     |  7 +++
 internal/config/runtime.go                  |  3 +-
 internal/config/toml_test.go                |  1 +
 internal/modifier/csv.go                    |  1 +
 internal/platform-support/tegra/csv.go      | 66 ++++++++++++++++-----
 internal/platform-support/tegra/symlinks.go | 39 +++++++-----
 internal/platform-support/tegra/tegra.go    | 24 +++++++-
 pkg/nvcdi/lib-csv.go                        |  1 +
 pkg/nvcdi/lib.go                            |  1 +
 pkg/nvcdi/options.go                        |  8 +++
 10 files changed, 116 insertions(+), 35 deletions(-)

diff --git a/cmd/nvidia-ctk/cdi/generate/generate.go b/cmd/nvidia-ctk/cdi/generate/generate.go
index 9f9e994b..f46d4904 100644
--- a/cmd/nvidia-ctk/cdi/generate/generate.go
+++ b/cmd/nvidia-ctk/cdi/generate/generate.go
@@ -55,6 +55,7 @@ type options struct {
 
 	configSearchPaths  cli.StringSlice
 	librarySearchPaths cli.StringSlice
+	altRoots           cli.StringSlice
 
 	csv struct {
 		files          cli.StringSlice
@@ -131,6 +132,11 @@ func (m command) build() *cli.Command {
 			Usage:       "Specify the path to search for libraries when discovering the entities that should be included in the CDI specification.\n\tNote: This option only applies to CSV mode.",
 			Destination: &opts.librarySearchPaths,
 		},
+		&cli.StringSliceFlag{
+			Name:        "alt-roots",
+			Usage:       "Specify alternate passthrough root to search for files when discovering the entities that should be included in the CDI specification.\n\tNote: This option only applies to CSV mode.",
+			Destination: &opts.altRoots,
+		},
 		&cli.StringFlag{
 			Name:    "nvidia-cdi-hook-path",
 			Aliases: []string{"nvidia-ctk-path"},
@@ -271,6 +277,7 @@ func (m command) generateSpec(opts *options) (spec.Interface, error) {
 		nvcdi.WithMode(opts.mode),
 		nvcdi.WithConfigSearchPaths(opts.configSearchPaths.Value()),
 		nvcdi.WithLibrarySearchPaths(opts.librarySearchPaths.Value()),
+		nvcdi.WithAltRoots(opts.altRoots.Value()),
 		nvcdi.WithCSVFiles(opts.csv.files.Value()),
 		nvcdi.WithCSVIgnorePatterns(opts.csv.ignorePatterns.Value()),
 	)
diff --git a/internal/config/runtime.go b/internal/config/runtime.go
index ed9ea646..356a9e72 100644
--- a/internal/config/runtime.go
+++ b/internal/config/runtime.go
@@ -43,7 +43,8 @@ type cdiModeConfig struct {
 }
 
 type csvModeConfig struct {
-	MountSpecPath string `toml:"mount-spec-path"`
+	MountSpecPath string   `toml:"mount-spec-path"`
+	AltRoots      []string `toml:"alt-roots"`
 }
 
 // GetDefaultRuntimeConfig defines the default values for the config
diff --git a/internal/config/toml_test.go b/internal/config/toml_test.go
index e017db15..d0c47a00 100644
--- a/internal/config/toml_test.go
+++ b/internal/config/toml_test.go
@@ -72,6 +72,7 @@ default-kind = "nvidia.com/gpu"
 spec-dirs = ["/etc/cdi", "/var/run/cdi"]
 
 [nvidia-container-runtime.modes.csv]
+alt-roots = []
 mount-spec-path = "/etc/nvidia-container-runtime/host-files-for-container.d"
 
 [nvidia-container-runtime-hook]
diff --git a/internal/modifier/csv.go b/internal/modifier/csv.go
index 0905d5da..61eef0aa 100644
--- a/internal/modifier/csv.go
+++ b/internal/modifier/csv.go
@@ -65,6 +65,7 @@ func NewCSVModifier(logger logger.Interface, cfg *config.Config, image image.CUD
 		nvcdi.WithNVIDIACDIHookPath(cfg.NVIDIACTKConfig.Path),
 		nvcdi.WithMode(nvcdi.ModeCSV),
 		nvcdi.WithCSVFiles(csvFiles),
+		nvcdi.WithAltRoots(cfg.NVIDIAContainerRuntimeConfig.Modes.CSV.AltRoots),
 	)
 	if err != nil {
 		return nil, fmt.Errorf("failed to construct CDI library: %v", err)
diff --git a/internal/platform-support/tegra/csv.go b/internal/platform-support/tegra/csv.go
index e47ae9de..5ae1031f 100644
--- a/internal/platform-support/tegra/csv.go
+++ b/internal/platform-support/tegra/csv.go
@@ -42,39 +42,73 @@ func (o tegraOptions) newDiscovererFromCSVFiles() (discover.Discover, error) {
 		targetsByType[csv.MountSpecDev],
 	)
 
-	directories := discover.NewMounts(
+	var directories []discover.Discover
+	var libraries []discover.Discover
+	var symlinks []discover.Discover
+	var symlinkHooks []discover.Discover
+
+	symlinkTargets := o.ignorePatterns.Apply(targetsByType[csv.MountSpecSym]...)
+	o.logger.Debugf("Filtered symlink targets: %v", symlinkTargets)
+
+	for _, altRoot := range o.altRoots {
+		directories = append(directories, discover.NewMounts(
+			o.logger,
+			lookup.NewDirectoryLocator(lookup.WithLogger(o.logger), lookup.WithRoot(altRoot)),
+			altRoot,
+			targetsByType[csv.MountSpecDir],
+		))
+
+		// Libraries and symlinks use the same locator.
+		l := discover.NewMounts(
+			o.logger,
+			lookup.NewSymlinkLocator(lookup.WithLogger(o.logger), lookup.WithRoot(altRoot)),
+			altRoot,
+			targetsByType[csv.MountSpecLib],
+		)
+		libraries = append(libraries, l)
+
+		s := discover.NewMounts(
+			o.logger,
+			lookup.NewSymlinkLocator(lookup.WithLogger(o.logger), lookup.WithRoot(altRoot)),
+			altRoot,
+			symlinkTargets,
+		)
+		symlinks = append(symlinks, s)
+		symlinkHooks = append(symlinkHooks, o.createCSVSymlinkHooks(symlinkTargets, l, altRoot))
+	}
+	directories = append(directories, discover.NewMounts(
 		o.logger,
 		lookup.NewDirectoryLocator(lookup.WithLogger(o.logger), lookup.WithRoot(o.driverRoot)),
 		o.driverRoot,
 		targetsByType[csv.MountSpecDir],
-	)
+	))
 
 	// Libraries and symlinks use the same locator.
-	libraries := discover.NewMounts(
+	librariesInDriverRoot := discover.NewMounts(
 		o.logger,
 		o.symlinkLocator,
 		o.driverRoot,
 		targetsByType[csv.MountSpecLib],
 	)
-
-	symlinkTargets := o.ignorePatterns.Apply(targetsByType[csv.MountSpecSym]...)
-	o.logger.Debugf("Filtered symlink targets: %v", symlinkTargets)
-	symlinks := discover.NewMounts(
+	libraries = append(libraries, librariesInDriverRoot)
+	symlinksInDriverRoot := discover.NewMounts(
 		o.logger,
 		o.symlinkLocator,
 		o.driverRoot,
 		symlinkTargets,
 	)
-	createSymlinks := o.createCSVSymlinkHooks(symlinkTargets, libraries)
-
-	d := discover.Merge(
-		devices,
-		directories,
-		libraries,
-		symlinks,
-		createSymlinks,
-	)
+	symlinks = append(symlinks, symlinksInDriverRoot)
+	symlinkHooks = append(symlinkHooks, o.createCSVSymlinkHooks(symlinkTargets,
+		librariesInDriverRoot,
+		o.driverRoot))
 
+	var allDiscoverers []discover.Discover
+	allDiscoverers = append(allDiscoverers, devices)
+	allDiscoverers = append(allDiscoverers, directories...)
+	allDiscoverers = append(allDiscoverers, libraries...)
+	allDiscoverers = append(allDiscoverers, symlinks...)
+	allDiscoverers = append(allDiscoverers, symlinkHooks...)
+	d := discover.Merge(allDiscoverers...)
 	return d, nil
 }
 
diff --git a/internal/platform-support/tegra/symlinks.go b/internal/platform-support/tegra/symlinks.go
index 37b07e6d..7d59f406 100644
--- a/internal/platform-support/tegra/symlinks.go
+++ b/internal/platform-support/tegra/symlinks.go
@@ -32,6 +32,7 @@ type symlinkHook struct {
 	nvidiaCDIHookPath string
 	targets           []string
 	mountsFrom        discover.Discover
+	root          string
 
 	// The following can be overridden for testing
 	symlinkChainLocator lookup.Locator
@@ -39,13 +40,22 @@ type symlinkHook struct {
 }
 
 // createCSVSymlinkHooks creates a discoverer for a hook that creates required symlinks in the container
-func (o tegraOptions) createCSVSymlinkHooks(targets []string, mounts discover.Discover) discover.Discover {
+func (o tegraOptions) createCSVSymlinkHooks(targets []string, mounts discover.Discover, root string) discover.Discover {
+	l := o.symlinkChainLocators[root]
+	if l == nil {
+		l = o.symlinkChainLocator
+	}
+	r := root
+	if len(r) > 0 && r[len(r)-1] == '/' {
+		r = r[:len(r)-1]
+	}
 	return symlinkHook{
 		logger:              o.logger,
 		nvidiaCDIHookPath:   o.nvidiaCDIHookPath,
 		targets:             targets,
 		mountsFrom:          mounts,
-		symlinkChainLocator: o.symlinkChainLocator,
+		root:                r,
+		symlinkChainLocator: l,
 		resolveSymlink:      o.resolveSymlink,
 	}
 }
@@ -117,7 +127,15 @@ func (d symlinkHook) getSymlinkCandidates() []string {
 			d.logger.Warningf("Failed to locate symlink %v", target)
 			continue
 		}
-		candidates = append(candidates, reslovedSymlinkChain...)
+		d.logger.Debugf("getSymlinkCandidates: resolved target %v -> %v", target, reslovedSymlinkChain)
+		for _, r := range reslovedSymlinkChain {
+			if len(d.root) > 0 {
+				r = r[len(d.root):]
+			}
+			if target != r {
+				candidates = append(candidates, r+"::"+target)
+			}
+		}
 	}
 	return candidates
 }
@@ -125,22 +143,13 @@ func (d symlinkHook) getSymlinkCandidates() []string {
 func (d symlinkHook) getCSVFileSymlinks() []string {
 	var links []string
 	created := make(map[string]bool)
-	// candidates is a list of absolute paths to symlinks in a chain, or the final target of the chain.
-	for _, candidate := range d.getSymlinkCandidates() {
-		target, err := d.resolveSymlink(candidate)
-		if err != nil {
-			d.logger.Debugf("Skipping invalid link: %v", err)
-			continue
-		} else if target == candidate {
-			d.logger.Debugf("%v is not a symlink", candidate)
-			continue
-		}
-
-		link := fmt.Sprintf("%v::%v", target, candidate)
+	// candidates is a list of symlinks to create
+	for _, link := range d.getSymlinkCandidates() {
 		if created[link] {
 			d.logger.Debugf("skipping duplicate link: %v", link)
 			continue
 		}
+		d.logger.Debugf("getCSVFileSymlinks: make link %v", link)
 		created[link] = true
 
 		links = append(links, link)
diff --git a/internal/platform-support/tegra/tegra.go b/internal/platform-support/tegra/tegra.go
index 1031fc72..85832876 100644
--- a/internal/platform-support/tegra/tegra.go
+++ b/internal/platform-support/tegra/tegra.go
@@ -32,12 +32,14 @@ type tegraOptions struct {
 	devRoot            string
 	nvidiaCDIHookPath  string
 	ldconfigPath       string
+	altRoots           []string
 	librarySearchPaths []string
 	ignorePatterns     ignoreMountSpecPatterns
 
 	// The following can be overridden for testing
-	symlinkLocator      lookup.Locator
-	symlinkChainLocator lookup.Locator
+	symlinkLocator       lookup.Locator
+	symlinkChainLocator  lookup.Locator
+	symlinkChainLocators map[string]lookup.Locator
 	// TODO: This should be replaced by a regular mock
 	resolveSymlink func(string) (string, error)
 }
@@ -64,11 +66,20 @@ func New(opts ...Option) (discover.Discover, error) {
 		)
 	}
 
+	o.symlinkChainLocators = make(map[string]lookup.Locator)
 	if o.symlinkChainLocator == nil {
-		o.symlinkChainLocator = lookup.NewSymlinkChainLocator(
+		for _, altRoot := range o.altRoots {
+			o.symlinkChainLocators[altRoot] = lookup.NewSymlinkChainLocator(
+				lookup.WithLogger(o.logger),
+				lookup.WithRoot(altRoot),
+			)
+		}
+		o.symlinkChainLocators[o.driverRoot] = lookup.NewSymlinkChainLocator(
 			lookup.WithLogger(o.logger),
 			lookup.WithRoot(o.driverRoot),
 		)
+	} else {
+		o.symlinkChainLocators[o.driverRoot] = o.symlinkChainLocator
 	}
 
 	if o.resolveSymlink == nil {
@@ -126,6 +137,13 @@ func WithDevRoot(devRoot string) Option {
 	}
 }
 
+// WithAltRoots sets alternate roots for file/lib/symlink lookups in the discoverer.
+func WithAltRoots(altRoots []string) Option {
+	return func(o *tegraOptions) {
+		o.altRoots = altRoots
+	}
+}
+
 // WithCSVFiles sets the CSV files for the discoverer.
 func WithCSVFiles(csvFiles []string) Option {
 	return func(o *tegraOptions) {
diff --git a/pkg/nvcdi/lib-csv.go b/pkg/nvcdi/lib-csv.go
index 649b801a..944c89a2 100644
--- a/pkg/nvcdi/lib-csv.go
+++ b/pkg/nvcdi/lib-csv.go
@@ -46,6 +46,7 @@ func (l *csvlib) GetAllDeviceSpecs() ([]specs.Device, error) {
 		tegra.WithDevRoot(l.devRoot),
 		tegra.WithNVIDIACDIHookPath(l.nvidiaCDIHookPath),
 		tegra.WithLdconfigPath(l.ldconfigPath),
+		tegra.WithAltRoots(l.altRoots),
 		tegra.WithCSVFiles(l.csvFiles),
 		tegra.WithLibrarySearchPaths(l.librarySearchPaths...),
 		tegra.WithIngorePatterns(l.csvIgnorePatterns...),
diff --git a/pkg/nvcdi/lib.go b/pkg/nvcdi/lib.go
index d2db3b6c..2dea4a99 100644
--- a/pkg/nvcdi/lib.go
+++ b/pkg/nvcdi/lib.go
@@ -51,6 +51,7 @@ type nvcdilib struct {
 	nvidiaCDIHookPath  string
 	ldconfigPath       string
 	configSearchPaths  []string
+	altRoots           []string
 	librarySearchPaths []string
 
 	csvFiles          []string
diff --git a/pkg/nvcdi/options.go b/pkg/nvcdi/options.go
index 417687b9..0beb7050 100644
--- a/pkg/nvcdi/options.go
+++ b/pkg/nvcdi/options.go
@@ -155,3 +155,11 @@ func WithLibrarySearchPaths(paths []string) Option {
 		o.librarySearchPaths = paths
 	}
 }
+
+// WithAltRoots sets the alternate pass-through roots.
+// This is currently only used for CSV-mode.
+func WithAltRoots(altRoots []string) Option {
+	return func(o *nvcdilib) {
+		o.altRoots = altRoots
+	}
+}
-- 
2.43.0

