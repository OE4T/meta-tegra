From 36306d92335871657b8f73aca382c195ad52e20e Mon Sep 17 00:00:00 2001
From: Matt Madison <matt@madison.systems>
Date: Sun, 28 Apr 2024 07:16:11 -0700
Subject: [PATCH 2/2] Add alt-root support

Upstream-Status: Inappropriate [oe specific]

Signed-off-by: Matt Madison <matt@madison.systems>
---
 internal/config/config_test.go | 5 +++++
 internal/config/runtime.go     | 4 +++-
 internal/discover/csv.go       | 5 +++--
 internal/discover/discover.go  | 4 +++-
 internal/discover/gds.go       | 2 +-
 internal/discover/mounts.go    | 9 ++-------
 internal/lookup/file.go        | 8 ++++----
 internal/lookup/symlinks.go    | 6 +++---
 internal/modifier/csv.go       | 3 ++-
 internal/modifier/tegra.go     | 2 +-
 10 files changed, 27 insertions(+), 21 deletions(-)

diff --git a/internal/config/config_test.go b/internal/config/config_test.go
index f4501bf..7ef536b 100644
--- a/internal/config/config_test.go
+++ b/internal/config/config_test.go
@@ -68,6 +68,7 @@ func TestGetConfig(t *testing.T) {
 					Modes: modesConfig{
 						CSV: csvModeConfig{
 							MountSpecPath: "/etc/nvidia-container-runtime/host-files-for-container.d",
+							AltRoots:      []string{},
 						},
 					},
 				},
@@ -87,6 +88,7 @@ func TestGetConfig(t *testing.T) {
 				"nvidia-container-runtime.runtimes = [\"/some/runtime\",]",
 				"nvidia-container-runtime.mode = \"not-auto\"",
 				"nvidia-container-runtime.modes.csv.mount-spec-path = \"/not/etc/nvidia-container-runtime/host-files-for-container.d\"",
+				"nvidia-container-runtime.modes.csv.alt-roots = []",
 				"nvidia-ctk.path = \"/foo/bar/nvidia-ctk\"",
 			},
 			expectedConfig: &Config{
@@ -101,6 +103,7 @@ func TestGetConfig(t *testing.T) {
 					Modes: modesConfig{
 						CSV: csvModeConfig{
 							MountSpecPath: "/not/etc/nvidia-container-runtime/host-files-for-container.d",
+							AltRoots:      []string{},
 						},
 					},
 				},
@@ -123,6 +126,7 @@ func TestGetConfig(t *testing.T) {
 				"mode = \"not-auto\"",
 				"[nvidia-container-runtime.modes.csv]",
 				"mount-spec-path = \"/not/etc/nvidia-container-runtime/host-files-for-container.d\"",
+				"alt-roots = []",
 				"[nvidia-ctk]",
 				"path = \"/foo/bar/nvidia-ctk\"",
 			},
@@ -138,6 +142,7 @@ func TestGetConfig(t *testing.T) {
 					Modes: modesConfig{
 						CSV: csvModeConfig{
 							MountSpecPath: "/not/etc/nvidia-container-runtime/host-files-for-container.d",
+							AltRoots:      []string{},
 						},
 					},
 				},
diff --git a/internal/config/runtime.go b/internal/config/runtime.go
index a4a79d3..d7f71f9 100644
--- a/internal/config/runtime.go
+++ b/internal/config/runtime.go
@@ -53,7 +53,8 @@ type cdiModeConfig struct {
 }
 
 type csvModeConfig struct {
-	MountSpecPath string `toml:"mount-spec-path"`
+	MountSpecPath string   `toml:"mount-spec-path"`
+	AltRoots      []string `toml:"alt-roots"`
 }
 
 // dummy allows us to unmarshal only a RuntimeConfig from a *toml.Tree
@@ -93,6 +94,7 @@ func GetDefaultRuntimeConfig() *RuntimeConfig {
 		Modes: modesConfig{
 			CSV: csvModeConfig{
 				MountSpecPath: "/etc/nvidia-container-runtime/host-files-for-container.d",
+				AltRoots:      []string{},
 			},
 		},
 	}
diff --git a/internal/discover/csv.go b/internal/discover/csv.go
index 6235f44..346b758 100644
--- a/internal/discover/csv.go
+++ b/internal/discover/csv.go
@@ -27,13 +27,14 @@ import (
 // NewFromCSVFiles creates a discoverer for the specified CSV files. A logger is also supplied.
 // The constructed discoverer is comprised of a list, with each element in the list being associated with a
 // single CSV files.
-func NewFromCSVFiles(logger *logrus.Logger, files []string, root string) (Discover, error) {
+func NewFromCSVFiles(logger *logrus.Logger, files []string, root string, altRoots []string) (Discover, error) {
 	if len(files) == 0 {
 		logger.Warnf("No CSV files specified")
 		return None{}, nil
 	}
 
-	symlinkLocator := lookup.NewSymlinkLocator(logger, root)
+	roots := append(altRoots, root)
+	symlinkLocator := lookup.NewSymlinkLocator(logger, roots)
 	locators := map[csv.MountSpecType]lookup.Locator{
 		csv.MountSpecDev: lookup.NewCharDeviceLocator(logger, root),
 		csv.MountSpecDir: lookup.NewDirectoryLocator(logger, root),
diff --git a/internal/discover/discover.go b/internal/discover/discover.go
index e65b360..f6ce83a 100644
--- a/internal/discover/discover.go
+++ b/internal/discover/discover.go
@@ -19,6 +19,7 @@ package discover
 // Config represents the configuration options for discovery
 type Config struct {
 	Root                                    string
+	AltRoots                                []string
 	NVIDIAContainerToolkitCLIExecutablePath string
 }
 
@@ -41,8 +42,9 @@ type Hook struct {
 	Args      []string
 }
 
-//go:generate moq -stub -out discover_mock.go . Discover
 // Discover defines an interface for discovering the devices, mounts, and hooks available on a system
+//
+//go:generate moq -stub -out discover_mock.go . Discover
 type Discover interface {
 	Devices() ([]Device, error)
 	Mounts() ([]Mount, error)
diff --git a/internal/discover/gds.go b/internal/discover/gds.go
index dab2f73..719865b 100644
--- a/internal/discover/gds.go
+++ b/internal/discover/gds.go
@@ -45,7 +45,7 @@ func NewGDSDiscoverer(logger *logrus.Logger, root string) (Discover, error) {
 
 	cufile := NewMounts(
 		logger,
-		lookup.NewFileLocator(logger, root),
+		lookup.NewFileLocator(logger, []string{root}),
 		root,
 		[]string{"/etc/cufile.json"},
 	)
diff --git a/internal/discover/mounts.go b/internal/discover/mounts.go
index 3c026ae..1e6980b 100644
--- a/internal/discover/mounts.go
+++ b/internal/discover/mounts.go
@@ -84,15 +84,10 @@ func (d *mounts) Mounts() ([]Mount, error) {
 				continue
 			}
 
-			r := d.relativeTo(p)
-			if r == "" {
-				r = p
-			}
-
-			d.logger.Infof("Selecting %v as %v", p, r)
+			d.logger.Infof("Selecting %v as %v", p, candidate)
 			uniqueMounts[p] = Mount{
 				HostPath: p,
-				Path:     r,
+				Path:     candidate,
 			}
 		}
 	}
diff --git a/internal/lookup/file.go b/internal/lookup/file.go
index ab52d03..b14e03c 100644
--- a/internal/lookup/file.go
+++ b/internal/lookup/file.go
@@ -34,16 +34,16 @@ type file struct {
 
 // NewFileLocator creates a Locator that can be used to find files at the specified root. A logger
 // can also be specified.
-func NewFileLocator(logger *log.Logger, root string) Locator {
-	l := newFileLocator(logger, root)
+func NewFileLocator(logger *log.Logger, roots []string) Locator {
+	l := newFileLocator(logger, roots)
 
 	return &l
 }
 
-func newFileLocator(logger *log.Logger, root string) file {
+func newFileLocator(logger *log.Logger, roots []string) file {
 	return file{
 		logger:   logger,
-		prefixes: []string{root},
+		prefixes: roots,
 		filter:   assertFile,
 	}
 }
diff --git a/internal/lookup/symlinks.go b/internal/lookup/symlinks.go
index 43e3712..f892ae6 100644
--- a/internal/lookup/symlinks.go
+++ b/internal/lookup/symlinks.go
@@ -36,7 +36,7 @@ type symlink struct {
 // A logger can also be specified.
 func NewSymlinkChainLocator(logger *logrus.Logger, root string) Locator {
 	l := symlinkChain{
-		file: newFileLocator(logger, root),
+		file: newFileLocator(logger, []string{root}),
 	}
 
 	return &l
@@ -44,9 +44,9 @@ func NewSymlinkChainLocator(logger *logrus.Logger, root string) Locator {
 
 // NewSymlinkLocator creats a locator that can be used for locating files through symlinks.
 // A logger can also be specified.
-func NewSymlinkLocator(logger *logrus.Logger, root string) Locator {
+func NewSymlinkLocator(logger *logrus.Logger, roots []string) Locator {
 	l := symlink{
-		file: newFileLocator(logger, root),
+		file: newFileLocator(logger, roots),
 	}
 
 	return &l
diff --git a/internal/modifier/csv.go b/internal/modifier/csv.go
index d2a2f7a..c2b122b 100644
--- a/internal/modifier/csv.go
+++ b/internal/modifier/csv.go
@@ -63,6 +63,7 @@ func NewCSVModifier(logger *logrus.Logger, cfg *config.Config, ociSpec oci.Spec)
 
 	config := &discover.Config{
 		Root:                                    cfg.NVIDIAContainerCLIConfig.Root,
+		AltRoots:                                cfg.NVIDIAContainerRuntimeConfig.Modes.CSV.AltRoots,
 		NVIDIAContainerToolkitCLIExecutablePath: cfg.NVIDIACTKConfig.Path,
 	}
 
@@ -79,7 +80,7 @@ func NewCSVModifier(logger *logrus.Logger, cfg *config.Config, ociSpec oci.Spec)
 		csvFiles = csv.BaseFilesOnly(csvFiles)
 	}
 
-	csvDiscoverer, err := discover.NewFromCSVFiles(logger, csvFiles, config.Root)
+	csvDiscoverer, err := discover.NewFromCSVFiles(logger, csvFiles, config.Root, config.AltRoots)
 	if err != nil {
 		return nil, fmt.Errorf("failed to create CSV discoverer: %v", err)
 	}
diff --git a/internal/modifier/tegra.go b/internal/modifier/tegra.go
index 459d1f0..2a47f7b 100644
--- a/internal/modifier/tegra.go
+++ b/internal/modifier/tegra.go
@@ -33,7 +33,7 @@ func NewTegraPlatformFiles(logger *logrus.Logger) (oci.SpecModifier, error) {
 
 	tegraSystemMounts := discover.NewMounts(
 		logger,
-		lookup.NewFileLocator(logger, ""),
+		lookup.NewFileLocator(logger, []string{""}),
 		"",
 		[]string{
 			"/etc/nv_tegra_release",
-- 
2.34.1

