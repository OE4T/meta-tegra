From f0bcc7decbf89f11fb2008ca4f7caab6a4215679 Mon Sep 17 00:00:00 2001
From: Ilies CHERGUI <ilies.chergui@gmail.com>
Date: Sun, 8 Aug 2021 21:40:36 +0100
Subject: [PATCH] Fix mapping of library paths for jetson mounts

Signed-off-by: Matt Madison <matt@madison.systems>
Signed-off-by: Ilies CHERGUI <ilies.chergui@gmail.com>

---
 src/jetson_mount.c | 70 ++++++++++++++++++++++++++++++++++++++++------
 src/jetson_mount.h |  2 +-
 src/nvc_mount.c    |  4 +--
 3 files changed, 64 insertions(+), 12 deletions(-)

diff --git a/src/jetson_mount.c b/src/jetson_mount.c
index 1c5d9de..5cf94c8 100644
--- a/src/jetson_mount.c
+++ b/src/jetson_mount.c
@@ -18,6 +18,9 @@
 #include "utils.h"
 #include "xfuncs.h"
 #include "jetson_mount.h"
+#define stringify(s__) stringify__(s__)
+#define stringify__(s__) #s__
+static const char *hostlibdir = stringify(HOST_LIBDIR) "/";
 
 static int
 resolve_symlink(struct error *err, const char *src, char *dst)
@@ -34,30 +37,69 @@ resolve_symlink(struct error *err, const char *src, char *dst)
 }
 
 char **
-mount_jetson_files(struct error *err, const char *root, const struct nvc_container *cnt, char *paths[], size_t size)
+mount_jetson_files(struct error *err, const char *root, const struct nvc_container *cnt, const char *dir, char *paths[], size_t size)
 {
         char src[PATH_MAX];
         char dst[PATH_MAX];
         mode_t mode;
         char **mnt, **ptr;
+        char *file;
 
         mnt = ptr = array_new(err, size + 1); /* NULL terminated. */
         if (mnt == NULL)
                 return (NULL);
 
         for (size_t i = 0; i < size; ++i) {
+                int samepath = 0;
                 if (!match_jetson_library_flags(paths[i], cnt->flags) &&
                     !match_jetson_directory_flags(paths[i], cnt->flags))
                         continue;
 
                 if (path_new(err, src, root) < 0)
                         goto fail;
-                if (path_new(err, dst, cnt->cfg.rootfs) < 0)
-                        goto fail;
 
+                if (dir != NULL) {
+                        size_t hostlibdirlen = strlen(hostlibdir);
+                        /*
+                         * Special hackery to handle the case where the host does
+                         * *not* use debian multiarch by default but has files located
+                         * under the /usr/lib/aarch64-linux-gnu directory to satisfy
+                         * some compiled-in hard-coded paths in NVIDIA binaries that
+                         * assume debian multiarch.
+                         *
+                         * Also don't move to the container's libdir if the path of
+                         * the file we're mounting is *not* under the host libdir.
+                         */
+                        if (!str_has_prefix(paths[i], hostlibdir) ||
+                            (strcmp(hostlibdir, dir) != 0 && str_has_prefix(paths[i], dir))) {
+                                samepath = 1;
+                                if (path_new(err, dst, cnt->cfg.rootfs) < 0)
+                                        goto fail;
+                        } else if (str_has_prefix(paths[i], hostlibdir) &&
+                                   strchr(paths[i]+hostlibdirlen, '/') != NULL) {
+                                char tmp[PATH_MAX], sub[PATH_MAX], *cp;
+                                strcpy(sub, paths[i]+hostlibdirlen);
+                                for (cp = sub + strlen(sub); cp > sub && *cp != '/'; cp--);
+                                *cp = '\0';
+                                log_infof("%s: %s subpath: %s", __func__, paths[i], sub);
+                                if (path_join(err, tmp, dir, sub) < 0)
+                                        goto fail;
+                                if (path_resolve_full(err, dst, cnt->cfg.rootfs, tmp) < 0)
+                                        goto fail;
+                        } else {
+                                if (path_resolve_full(err, dst, cnt->cfg.rootfs, dir) < 0)
+                                        goto fail;
+                        }
+                } else {
+                        samepath = 1;
+                        if (path_new(err, dst, cnt->cfg.rootfs) < 0)
+                                goto fail;
+                }
+
+                file = basename(paths[i]);
                 if (path_append(err, src, paths[i]) < 0)
                         goto fail;
-                if (path_append(err, dst, paths[i]) < 0)
+                if (path_append(err, dst, (samepath ? paths[i] : file)) < 0)
                         goto fail;
 
                 if (file_mode(err, src, &mode) < 0)
@@ -89,25 +131,35 @@ create_jetson_symlinks(struct error *err, const char *root, const struct nvc_con
         char src[PATH_MAX];
         char src_lnk[PATH_MAX];
         char dst[PATH_MAX];
+        char *file;
 
         for (size_t i = 0; i < size; ++i) {
+                file = basename(paths[i]);
                 if (!match_jetson_symlink_flags(paths[i], cnt->flags))
                         continue;
 
                 if (path_new(err, src, root) < 0)
                         return (-1);
-                if (path_new(err, dst, cnt->cfg.rootfs) < 0)
-                        return (-1);
 
                 if (path_append(err, src, paths[i]) < 0)
                         return (-1);
-                if (path_append(err, dst, paths[i]) < 0)
-                        return (-1);
 
                 if (resolve_symlink(err, src, src_lnk) < 0)
                         return (-1);
 
-                printf("src: %s, src_lnk: %s, dst: %s, dst_lnk: %s\n", src, src_lnk, dst);
+                if (str_has_prefix(file, "lib")) {
+                        if (path_resolve_full(err, dst, cnt->cfg.rootfs, cnt->cfg.libs_dir) < 0)
+                                return (-1);
+                        if (path_append(err, dst, file) < 0)
+                                return (-1);
+                } else {
+                        if (path_new(err, dst, cnt->cfg.rootfs) < 0)
+                                return (-1);
+                        if (path_append(err, dst, paths[i]) < 0)
+                                return (-1);
+                }
+
+                printf("src: %s, src_lnk: %s, dst: %s\n", src, src_lnk, dst);
                 if (remove(dst) < 0 && errno != ENOENT)
                         return (-1);
 
diff --git a/src/jetson_mount.h b/src/jetson_mount.h
index c11e6d3..b1af835 100644
--- a/src/jetson_mount.h
+++ b/src/jetson_mount.h
@@ -8,7 +8,7 @@
 #include "nvc_internal.h"
 #include "error.h"
 
-char **mount_jetson_files(struct error *, const char *, const struct nvc_container *, char * [], size_t);
+char **mount_jetson_files(struct error *, const char *, const struct nvc_container *, const char *, char * [], size_t);
 int create_jetson_symlinks(struct error *, const char *, const struct nvc_container *, char * [], size_t);
 
 #endif /* HEADER_JETSON_MOUNT_H */
diff --git a/src/nvc_mount.c b/src/nvc_mount.c
index fc2d0ec..8971e28 100644
--- a/src/nvc_mount.c
+++ b/src/nvc_mount.c
@@ -477,7 +477,7 @@ nvc_driver_mount(struct nvc_context *ctx, const struct nvc_container *cnt, const
 
         log_info("mount jetson libraries");
         if (info->jetson->libs != NULL && info->jetson->nlibs > 0) {
-                if ((tmp = (const char **)mount_jetson_files(&ctx->err, ctx->cfg.root, cnt, info->jetson->libs, info->jetson->nlibs)) == NULL)
+                if ((tmp = (const char **)mount_jetson_files(&ctx->err, ctx->cfg.root, cnt, cnt->cfg.libs_dir, info->jetson->libs, info->jetson->nlibs)) == NULL)
                         goto fail;
                 ptr = array_append(ptr, tmp, array_size(tmp));
                 free(tmp);
@@ -485,7 +485,7 @@ nvc_driver_mount(struct nvc_context *ctx, const struct nvc_container *cnt, const
 
         log_info("mount jetson dirs");
         if (info->jetson->dirs != NULL && info->jetson->ndirs > 0) {
-                if ((tmp = (const char **)mount_jetson_files(&ctx->err, ctx->cfg.root, cnt, info->jetson->dirs, info->jetson->ndirs)) == NULL)
+                if ((tmp = (const char **)mount_jetson_files(&ctx->err, ctx->cfg.root, cnt, NULL, info->jetson->dirs, info->jetson->ndirs)) == NULL)
                         goto fail;
                 ptr = array_append(ptr, tmp, array_size(tmp));
                 free(tmp);
