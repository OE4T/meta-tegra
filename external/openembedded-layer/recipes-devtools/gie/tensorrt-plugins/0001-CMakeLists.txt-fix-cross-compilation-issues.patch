From 44190caa09d27b1b9d221dee0006810013dea980 Mon Sep 17 00:00:00 2001
From: Ilies CHERGUI <ilies.chergui@gmail.com>
Date: Mon, 14 Oct 2024 04:13:16 -0700
Subject: [PATCH] CMakeLists.txt: fix cross compilation issues

Signed-off-by: Ilies CHERGUI <ilies.chergui@gmail.com>
Signed-off-by: Matt Madison <matt@madison.systems>
Signed-off-by: Kurt Kiefer <kekiefer@gmail.com>
---
 CMakeLists.txt             | 17 ++++++++++++++---
 parsers/CMakeLists.txt     |  9 ++++++---
 plugin/CMakeLists.txt      | 14 ++++++++++----
 third_party/protobuf.cmake |  2 +-
 4 files changed, 31 insertions(+), 11 deletions(-)

Index: git/CMakeLists.txt
===================================================================
--- git.orig/CMakeLists.txt
+++ git/CMakeLists.txt
@@ -78,6 +78,7 @@ endif(CMAKE_INSTALL_PREFIX_INITIALIZED_T
 option(BUILD_PLUGINS "Build TensorRT plugin" ON)
 option(BUILD_PARSERS "Build TensorRT parsers" ON)
 option(BUILD_SAMPLES "Build TensorRT samples" ON)
+option(BUILD_PROTOBUF "Build internal copy of protobuf" OFF)
 
 # C++14
 set(CMAKE_CXX_STANDARD 14)
@@ -90,6 +91,9 @@ else()
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DBUILD_SYSTEM=cmake_oss")
 endif()
 
+# otherwise the installation directories are empty by default
+include(GNUInstallDirs)
+
 ############################################################################################
 # Cross-compilation settings
 
@@ -122,7 +126,7 @@ message(STATUS "Protobuf version set to
 
 set(THREADS_PREFER_PTHREAD_FLAG ON)
 find_package(Threads REQUIRED)
-if (BUILD_PLUGINS OR BUILD_PARSERS)
+if (BUILD_PROTOBUF)
     include(third_party/protobuf.cmake)
 endif()
 if(NOT CUB_ROOT_DIR)
@@ -139,8 +143,10 @@ endif()
 include_directories(
     ${CUDA_INCLUDE_DIRS}
 )
-if(BUILD_PARSERS)
+if(BUILD_PROTOBUF)
     configure_protobuf(${PROTOBUF_VERSION})
+else()
+    find_package(Protobuf REQUIRED)
 endif()
 
 # Windows library names have major version appended.
@@ -158,7 +164,7 @@ endif()
 
 find_library_create_target(nvinfer ${nvinfer_lib_name} SHARED ${TRT_LIB_DIR})
 
-find_library(CUDART_LIB cudart_static HINTS ${CUDA_TOOLKIT_ROOT_DIR} PATH_SUFFIXES lib lib/x64 lib64)
+find_library(CUDART_LIB cudart HINTS ${CUDA_TOOLKIT_TARGET_DIR} PATH_SUFFIXES lib lib64)
 
 if (NOT MSVC)
     find_library(RT_LIB rt)
@@ -169,6 +175,10 @@ set(CUDA_LIBRARIES ${CUDART_LIB})
 ############################################################################################
 # CUDA targets
 
+if (SKIP_GPU_ARCHS)
+  set(GENCODES "")
+  set(BERT_GENCODES "")
+else()
 if (DEFINED GPU_ARCHS)
   message(STATUS "GPU_ARCHS defined as ${GPU_ARCHS}. Generating CUDA code for SM ${GPU_ARCHS}")
   separate_arguments(GPU_ARCHS)
@@ -214,6 +224,7 @@ set(GENCODES "${GENCODES} -gencode arch=
 if (${LATEST_SM} GREATER_EQUAL 70)
     set(BERT_GENCODES "${BERT_GENCODES} -gencode arch=compute_${LATEST_SM},code=compute_${LATEST_SM}")
 endif()
+endif()
 
 if(NOT MSVC)
     set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} --expt-relaxed-constexpr -Xcompiler -Wno-deprecated-declarations")
Index: git/parsers/CMakeLists.txt
===================================================================
--- git.orig/parsers/CMakeLists.txt
+++ git/parsers/CMakeLists.txt
@@ -19,14 +19,17 @@
 add_custom_target(parsers DEPENDS
     nvonnxparser)
 
-add_definitions("-D_PROTOBUF_INSTALL_DIR=${Protobuf_INSTALL_DIR}")
-add_compile_options("-Dgoogle=google_private")
+if(BUILD_PROTOBUF)
+    add_definitions("-D_PROTOBUF_INSTALL_DIR=${Protobuf_INSTALL_DIR}")
+    add_compile_options("-Dgoogle=google_private")
+endif()
 set(TENSORRT_ROOT ${PROJECT_SOURCE_DIR})
 set(TENSORRT_BUILD ${TRT_OUT_DIR} ${TRT_LIB_DIR})
 set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${TRT_OUT_DIR})
 
 include_directories(
    ${Protobuf_INCLUDE_DIR}
-)
+   ${PROJECT_SOURCE_DIR}/include
+ )
 
 add_subdirectory(onnx)
Index: git/plugin/CMakeLists.txt
===================================================================
--- git.orig/plugin/CMakeLists.txt
+++ git/plugin/CMakeLists.txt
@@ -29,7 +29,8 @@ set(VFC_PLUGIN_EXPORT_MAP ${TARGET_DIR}/
 if(${CMAKE_BUILD_TYPE} MATCHES "Debug")
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
 endif()
-set(ENABLED_SMS "-DENABLE_SM72 -DENABLE_SM75 -DENABLE_SM80 -DENABLE_SM86 -DENABLE_SM87 -DENABLE_SM89 -DENABLE_SM90")
+
+message(STATUS "Enabled SM: ${ENABLED_SMS}")
 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${ENABLED_SMS}")
 set(PLUGIN_SOURCES)
 set(PLUGIN_CU_SOURCES)
@@ -75,7 +76,7 @@ set(PLUGIN_LISTS
 )
 
 # Add BERT sources if ${BERT_GENCODES} was populated
-if(BERT_GENCODES)
+if(DEFINED BERT_GENCODES)
     set(BERT_CU_SOURCES)
     set(PLUGIN_LISTS
         ${PLUGIN_LISTS}
@@ -99,10 +100,15 @@ endforeach(PLUGIN_ITER)
 add_subdirectory(common)
 
 # Set gencodes
-set_source_files_properties(${PLUGIN_CU_SOURCES} PROPERTIES COMPILE_FLAGS "${GENCODES} ${ENABLED_SMS}")
+if(GENCODES)
+    set_source_files_properties(${PLUGIN_CU_SOURCES} PROPERTIES COMPILE_FLAGS "${GENCODES} ${ENABLED_SMS}")
+endif()
+
 list(APPEND PLUGIN_SOURCES "${PLUGIN_CU_SOURCES}")
 if (BERT_CU_SOURCES)
-    set_source_files_properties(${BERT_CU_SOURCES} PROPERTIES COMPILE_FLAGS "${BERT_GENCODES} ${ENABLED_SMS}")
+    if(BERT_GENCODES)
+        set_source_files_properties(${BERT_CU_SOURCES} PROPERTIES COMPILE_FLAGS "${BERT_GENCODES} ${ENABLED_SMS}")
+    endif()
     list(APPEND PLUGIN_SOURCES "${BERT_CU_SOURCES}")
 endif()
 
Index: git/third_party/protobuf.cmake
===================================================================
--- git.orig/third_party/protobuf.cmake
+++ git/third_party/protobuf.cmake
@@ -209,7 +209,7 @@ function(protobuf_generate_cpp SRCS HDRS
             COMMAND ${Protobuf_PROTOC_EXECUTABLE}
             ARGS --cpp_out ${CMAKE_CURRENT_BINARY_DIR}/${PROTO_DIR} -I${CMAKE_CURRENT_SOURCE_DIR}/${PROTO_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/${proto}
             WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
-            DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/${proto}" protobuf::libprotobuf Protobuf protobuf::protoc
+            DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/${proto}" protobuf::libprotobuf
             COMMENT "${proto} -> ${PROTO_DIR}/${PROTO_SRC} ${PROTO_DIR}/${PROTO_HEADER}"
         )
 
Index: git/parsers/onnx/CMakeLists.txt
===================================================================
--- git.orig/parsers/onnx/CMakeLists.txt
+++ git/parsers/onnx/CMakeLists.txt
@@ -20,10 +20,6 @@ set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
 set(PARSER_LINKER_SCRIPT  ${ONNX2TRT_ROOT}/libnvonnxparser.version)
 
-# Find length of source directory used to pad filename in Status.hpp
-string(LENGTH "${CMAKE_SOURCE_DIR}/" SOURCE_LENGTH)
-add_definitions("-DSOURCE_LENGTH=${SOURCE_LENGTH}")
-
 #--------------------------------------------------
 # Version information
 #--------------------------------------------------
