From 89635136951a06cbd5b90d52785454bac27249fb Mon Sep 17 00:00:00 2001
From: Ilies CHERGUI <ilies.chergui@gmail.com>
Date: Mon, 13 Nov 2023 09:05:03 -0800
Subject: [PATCH] CMakeLists.txt: fix cross compilation issues

Upstream-Status: Pending
Signed-off-by: Ilies CHERGUI <ilies.chergui@gmail.com>
Signed-off-by: Matt Madison <matt@madison.systems>
Signed-off-by: Kurt Kiefer <kekiefer@gmail.com>

---
 CMakeLists.txt               | 25 +++++++++++++++++++------
 parsers/CMakeLists.txt       |  6 ++++--
 parsers/caffe/CMakeLists.txt |  4 ++++
 plugin/CMakeLists.txt        | 14 ++++++++++----
 third_party/protobuf.cmake   |  2 +-
 5 files changed, 38 insertions(+), 13 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 358b6f38..5d685bdb 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -58,6 +58,7 @@ endif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
 option(BUILD_PLUGINS "Build TensorRT plugin" ON)
 option(BUILD_PARSERS "Build TensorRT parsers" ON)
 option(BUILD_SAMPLES "Build TensorRT samples" ON)
+option(BUILD_PROTOBUF "Build internal copy of protobuf" OFF)
 
 # C++14
 set(CMAKE_CXX_STANDARD 14)
@@ -70,6 +71,9 @@ else()
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DBUILD_SYSTEM=cmake_oss")
 endif()
 
+# otherwise the installation directories are empty by default
+include(GNUInstallDirs)
+
 ############################################################################################
 # Cross-compilation settings
 
@@ -120,19 +124,21 @@ include_directories(
     ${CUDNN_ROOT_DIR}/include
 )
 find_library(CUDNN_LIB cudnn HINTS
-    ${CUDA_TOOLKIT_ROOT_DIR} ${CUDNN_ROOT_DIR} PATH_SUFFIXES lib64 lib/x64 lib)
+    ${CUDA_TOOLKIT_TARGET_DIR} ${CUDNN_ROOT_DIR} PATH_SUFFIXES lib64 lib)
 find_library(CUBLAS_LIB cublas HINTS
-    ${CUDA_TOOLKIT_ROOT_DIR} PATH_SUFFIXES lib64 lib lib/x64 lib/stubs)
+    ${CUDA_TOOLKIT_TARGET_DIR} PATH_SUFFIXES lib64 lib lib/stubs)
 find_library(CUBLASLT_LIB cublasLt HINTS
-    ${CUDA_TOOLKIT_ROOT_DIR} PATH_SUFFIXES lib64 lib lib/x64 lib/stubs)
-if(BUILD_PARSERS)
-    configure_protobuf(${PROTOBUF_VERSION})
+    ${CUDA_TOOLKIT_TARGET_DIR} PATH_SUFFIXES lib64 lib lib/stubs)
+if(BUILD_PROTOBUF)
+  configure_protobuf(${PROTOBUF_VERSION})
+else()
+  find_package(Protobuf REQUIRED)
 endif()
 
 find_library_create_target(nvinfer nvinfer SHARED ${TRT_LIB_DIR})
 find_library_create_target(nvuffparser nvparsers SHARED ${TRT_LIB_DIR})
 
-find_library(CUDART_LIB cudart HINTS ${CUDA_TOOLKIT_ROOT_DIR} PATH_SUFFIXES lib lib/x64 lib64)
+find_library(CUDART_LIB cudart HINTS ${CUDA_TOOLKIT_TARGET_DIR} PATH_SUFFIXES lib lib64)
 
 if (NOT MSVC)
     find_library(RT_LIB rt)
@@ -143,6 +149,10 @@ set(CUDA_LIBRARIES ${CUDART_LIB})
 ############################################################################################
 # CUDA targets
 
+if (SKIP_GPU_ARCHS)
+  set(GENCODES "")
+  set(BERT_GENCODES "")
+else()
 if (DEFINED GPU_ARCHS)
   message(STATUS "GPU_ARCHS defined as ${GPU_ARCHS}. Generating CUDA code for SM ${GPU_ARCHS}")
   separate_arguments(GPU_ARCHS)
@@ -189,6 +199,7 @@ if (${LATEST_SM} GREATER_EQUAL 70)
     set(BERT_GENCODES "${BERT_GENCODES} -gencode arch=compute_${LATEST_SM},code=compute_${LATEST_SM}")
     set(STABLE_DIFFUSION_GENCODES "${STABLE_DIFFUSION_GENCODES} -gencode arch=compute_${LATEST_SM},code=compute_${LATEST_SM}")
 endif()
+endif()
 
 if(NOT MSVC)
     set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Xcompiler -Wno-deprecated-declarations")
@@ -207,6 +218,8 @@ else()
 endif()
 
 if(BUILD_PARSERS)
+    set(BUILD_LIBRARY_ONLY 1)
+    set(TENSORRT_LIBRARY_INFER_PLUGIN "nvinfer_plugin")
     add_subdirectory(parsers)
 else()
     find_library_create_target(nvcaffeparser nvparsers SHARED ${TRT_OUT_DIR} ${TRT_LIB_DIR})
diff --git a/parsers/CMakeLists.txt b/parsers/CMakeLists.txt
index 955e109d..8f9bbbae 100644
--- a/parsers/CMakeLists.txt
+++ b/parsers/CMakeLists.txt
@@ -22,8 +22,10 @@ add_custom_target(parsers DEPENDS
 
 add_subdirectory(caffe)
 
-add_definitions("-D_PROTOBUF_INSTALL_DIR=${Protobuf_INSTALL_DIR}")
-add_compile_options("-Dgoogle=google_private")
+if(BUILD_PROTOBUF)
+    add_definitions("-D_PROTOBUF_INSTALL_DIR=${Protobuf_INSTALL_DIR}")
+    add_compile_options("-Dgoogle=google_private")
+endif()
 set(TENSORRT_ROOT ${PROJECT_SOURCE_DIR})
 set(TENSORRT_BUILD ${TRT_OUT_DIR} ${TRT_LIB_DIR})
 set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${TRT_OUT_DIR})
diff --git a/parsers/caffe/CMakeLists.txt b/parsers/caffe/CMakeLists.txt
index 74fd358f..d86758dc 100644
--- a/parsers/caffe/CMakeLists.txt
+++ b/parsers/caffe/CMakeLists.txt
@@ -66,6 +66,7 @@ target_link_libraries(${SHARED_TARGET}
     nvinfer
 )
 
+if(BUILD_PROTOBUF)
 # modify google namespace to avoid namespace collision.
 set(GOOGLE google_private)
 target_compile_definitions(${SHARED_TARGET}
@@ -73,6 +74,7 @@ target_compile_definitions(${SHARED_TARGET}
     "-Dgoogle=${GOOGLE}"
     "-DGOOGLE_PROTOBUF_ARCH_64_BIT"
 )
+endif()
 
 set_target_properties(${SHARED_TARGET} PROPERTIES LINK_FLAGS "-Wl,--exclude-libs,ALL")
 
@@ -115,6 +117,7 @@ target_link_libraries(${STATIC_TARGET}
     ${Protobuf_LIBRARY}
 )
 
+if(BUILD_PROTOBUF)
 # modify google namespace to avoid namespace collision.
 set(GOOGLE google_private)
 target_compile_definitions(${STATIC_TARGET}
@@ -122,6 +125,7 @@ target_compile_definitions(${STATIC_TARGET}
     "-Dgoogle=${GOOGLE}"
     "-DGOOGLE_PROTOBUF_ARCH_64_BIT"
 )
+endif()
 
 set_target_properties(${STATIC_TARGET} PROPERTIES LINK_FLAGS "-Wl,--exclude-libs,ALL")
 
diff --git a/plugin/CMakeLists.txt b/plugin/CMakeLists.txt
index 158472e7..ff62393d 100644
--- a/plugin/CMakeLists.txt
+++ b/plugin/CMakeLists.txt
@@ -26,7 +26,8 @@ set(PLUGIN_EXPORT_MAP ${TARGET_DIR}/exports.map)
 if(${CMAKE_BUILD_TYPE} MATCHES "Debug")
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
 endif()
-set(ENABLED_SMS "-DENABLE_SM72 -DENABLE_SM75 -DENABLE_SM80 -DENABLE_SM86 -DENABLE_SM87 -DENABLE_SM89 -DENABLE_SM90")
+
+message(STATUS "Enabled SM: ${ENABLED_SMS}")
 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${ENABLED_SMS}")
 set(PLUGIN_SOURCES)
 set(PLUGIN_CU_SOURCES)
@@ -70,7 +71,7 @@ set(PLUGIN_LISTS
 )
 
 # Add BERT sources if ${BERT_GENCODES} was populated
-if(BERT_GENCODES)
+if(DEFINED BERT_GENCODES)
     set(BERT_CU_SOURCES)
     set(PLUGIN_LISTS
         ${PLUGIN_LISTS}
@@ -110,10 +111,15 @@ endforeach(PLUGIN_ITER)
 add_subdirectory(common)
 
 # Set gencodes
-set_source_files_properties(${PLUGIN_CU_SOURCES} PROPERTIES COMPILE_FLAGS "${GENCODES} ${ENABLED_SMS}")
+if(GENCODES)
+    set_source_files_properties(${PLUGIN_CU_SOURCES} PROPERTIES COMPILE_FLAGS "${GENCODES} ${ENABLED_SMS}")
+endif()
+
 list(APPEND PLUGIN_SOURCES "${PLUGIN_CU_SOURCES}")
 if (BERT_CU_SOURCES)
-    set_source_files_properties(${BERT_CU_SOURCES} PROPERTIES COMPILE_FLAGS "${BERT_GENCODES} ${ENABLED_SMS}")
+    if(BERT_GENCODES)
+        set_source_files_properties(${BERT_CU_SOURCES} PROPERTIES COMPILE_FLAGS "${BERT_GENCODES} ${ENABLED_SMS}")
+    endif()
     list(APPEND PLUGIN_SOURCES "${BERT_CU_SOURCES}")
 endif()
 if (STABLE_DIFFUSION_CU_SOURCES)
diff --git a/third_party/protobuf.cmake b/third_party/protobuf.cmake
index b1ae10e5..14f19120 100644
--- a/third_party/protobuf.cmake
+++ b/third_party/protobuf.cmake
@@ -206,7 +206,7 @@ function(protobuf_generate_cpp SRCS HDRS)
             COMMAND LIBRARY_PATH=${Protobuf_LIB_DIR} ${Protobuf_PROTOC_EXECUTABLE}
             ARGS --cpp_out ${CMAKE_CURRENT_BINARY_DIR}/${PROTO_DIR} -I${CMAKE_CURRENT_SOURCE_DIR}/${PROTO_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/${proto}
             WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
-            DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/${proto}" protobuf::libprotobuf Protobuf protobuf::protoc
+            DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/${proto}" protobuf::libprotobuf
             COMMENT "${proto} -> ${PROTO_DIR}/${PROTO_SRC} ${PROTO_DIR}/${PROTO_HEADER}"
         )
 
