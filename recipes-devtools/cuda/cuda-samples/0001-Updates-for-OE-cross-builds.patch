From 865731c87a81e22a431257b36d69d3ae01002923 Mon Sep 17 00:00:00 2001
From: Ilies CHERGUI <ichergui@nvidia.com>
Date: Tue, 8 Jul 2025 09:38:43 +0100
Subject: [PATCH] Updates for OE cross builds

Upstream-Status: Inappropriate [oe-specific]

Signed-off-by: Ilies CHERGUI <ichergui@nvidia.com>
---
 Samples/0_Introduction/CMakeLists.txt         | 20 -------------------
 .../UnifiedMemoryStreams/CMakeLists.txt       | 18 +++++------------
 .../0_Introduction/asyncAPI/CMakeLists.txt    | 12 ++---------
 Samples/0_Introduction/clock/CMakeLists.txt   | 12 ++---------
 .../0_Introduction/cudaOpenMP/CMakeLists.txt  | 16 ++++-----------
 .../fp16ScalarProduct/CMakeLists.txt          | 11 ++--------
 .../0_Introduction/matrixMul/CMakeLists.txt   | 12 ++---------
 .../matrixMulDynlinkJIT/CMakeLists.txt        | 15 +++-----------
 .../simpleAssert/CMakeLists.txt               | 12 ++---------
 .../simpleAtomicIntrinsics/CMakeLists.txt     | 13 ++----------
 .../simpleAttributes/CMakeLists.txt           | 12 ++---------
 .../simpleCallback/CMakeLists.txt             | 12 ++---------
 .../simpleCubemapTexture/CMakeLists.txt       | 12 ++---------
 .../simpleLayeredTexture/CMakeLists.txt       | 12 ++---------
 .../simpleMultiCopy/CMakeLists.txt            | 12 ++---------
 .../simpleMultiGPU/CMakeLists.txt             | 12 ++---------
 .../simpleOccupancy/CMakeLists.txt            | 12 ++---------
 .../simplePitchLinearTexture/CMakeLists.txt   | 12 ++---------
 .../simplePrintf/CMakeLists.txt               | 12 ++---------
 .../simpleStreams/CMakeLists.txt              | 12 ++---------
 .../simpleSurfaceWrite/CMakeLists.txt         | 13 +++---------
 .../simpleTemplates/CMakeLists.txt            | 12 ++---------
 .../simpleTexture/CMakeLists.txt              | 13 +++---------
 .../simpleVoteIntrinsics/CMakeLists.txt       | 12 ++---------
 .../simpleZeroCopy/CMakeLists.txt             | 12 ++---------
 .../0_Introduction/vectorAdd/CMakeLists.txt   | 12 ++---------
 Samples/1_Utilities/CMakeLists.txt            |  2 --
 .../1_Utilities/deviceQuery/CMakeLists.txt    | 14 +++----------
 Samples/6_Performance/CMakeLists.txt          |  4 ----
 .../UnifiedMemoryPerf/CMakeLists.txt          | 12 ++---------
 Samples/CMakeLists.txt                        | 19 ------------------
 31 files changed, 63 insertions(+), 323 deletions(-)

diff --git a/Samples/0_Introduction/CMakeLists.txt b/Samples/0_Introduction/CMakeLists.txt
index 74534758..238a9b51 100644
--- a/Samples/0_Introduction/CMakeLists.txt
+++ b/Samples/0_Introduction/CMakeLists.txt
@@ -1,46 +1,26 @@
 add_subdirectory(UnifiedMemoryStreams)
 add_subdirectory(asyncAPI)
 add_subdirectory(clock)
-add_subdirectory(clock_nvrtc)
 add_subdirectory(cudaOpenMP)
 add_subdirectory(fp16ScalarProduct)
 add_subdirectory(matrixMul)
-add_subdirectory(matrixMulDrv)
 add_subdirectory(matrixMulDynlinkJIT)
-add_subdirectory(matrixMul_nvrtc)
-add_subdirectory(mergeSort)
-add_subdirectory(simpleAWBarrier)
 add_subdirectory(simpleAssert)
-add_subdirectory(simpleAssert_nvrtc)
 add_subdirectory(simpleAtomicIntrinsics)
-add_subdirectory(simpleAtomicIntrinsics_nvrtc)
 add_subdirectory(simpleAttributes)
-add_subdirectory(simpleCUDA2GL)
 add_subdirectory(simpleCallback)
-add_subdirectory(simpleCooperativeGroups)
 add_subdirectory(simpleCubemapTexture)
-add_subdirectory(simpleDrvRuntime)
-add_subdirectory(simpleHyperQ)
-add_subdirectory(simpleIPC)
 add_subdirectory(simpleLayeredTexture)
-add_subdirectory(simpleMPI)
 add_subdirectory(simpleMultiCopy)
 add_subdirectory(simpleMultiGPU)
 add_subdirectory(simpleOccupancy)
-add_subdirectory(simpleP2P)
 add_subdirectory(simplePitchLinearTexture)
 add_subdirectory(simplePrintf)
 add_subdirectory(simpleStreams)
 add_subdirectory(simpleSurfaceWrite)
 add_subdirectory(simpleTemplates)
 add_subdirectory(simpleTexture)
-add_subdirectory(simpleTexture3D)
-add_subdirectory(simpleTextureDrv)
 add_subdirectory(simpleVoteIntrinsics)
 add_subdirectory(simpleZeroCopy)
 add_subdirectory(template)
-add_subdirectory(systemWideAtomics)
 add_subdirectory(vectorAdd)
-add_subdirectory(vectorAddDrv)
-add_subdirectory(vectorAddMMAP)
-add_subdirectory(vectorAdd_nvrtc)
diff --git a/Samples/0_Introduction/UnifiedMemoryStreams/CMakeLists.txt b/Samples/0_Introduction/UnifiedMemoryStreams/CMakeLists.txt
index d92baee3..b6b92d93 100644
--- a/Samples/0_Introduction/UnifiedMemoryStreams/CMakeLists.txt
+++ b/Samples/0_Introduction/UnifiedMemoryStreams/CMakeLists.txt
@@ -1,21 +1,11 @@
 cmake_minimum_required(VERSION 3.20)
 
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../cmake/Modules")
-
 project(UnifiedMemoryStreams LANGUAGES C CXX CUDA)
 
 find_package(CUDAToolkit REQUIRED)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
-set(CMAKE_CUDA_ARCHITECTURES 75 80 86 87 89 90 100 110 120)
-set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wno-deprecated-gpu-targets")
-if(ENABLE_CUDA_DEBUG)
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G")        # enable cuda-gdb (may significantly affect performance on some targets)
-else()
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo") # add line information to all builds for debug tools (exclusive to -G option)
-endif()
-
 # Include directories and libraries
 include_directories(../../../Common)
 
@@ -36,16 +26,18 @@ if(${OpenMP_FOUND})
     # Add target for UnifiedMemoryStreams
     add_executable(UnifiedMemoryStreams UnifiedMemoryStreams.cu)
 
-target_compile_options(UnifiedMemoryStreams PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:--extended-lambda>)
+    target_compile_options(UnifiedMemoryStreams PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:--extended-lambda>)
 
-target_compile_features(UnifiedMemoryStreams PRIVATE cxx_std_17 cuda_std_17)
+    target_compile_features(UnifiedMemoryStreams PRIVATE cxx_std_17 cuda_std_17)
 
     set_target_properties(UnifiedMemoryStreams PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
 
     target_link_libraries(UnifiedMemoryStreams PUBLIC
-        CUDA::cublas
+        cublas
         OpenMP::OpenMP_CXX
     )
+
+    install(TARGETS UnifiedMemoryStreams RUNTIME DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
 else()
     message(STATUS "OpenMP not found - will not build sample 'UnifiedMemoryStreams'")
 endif()
diff --git a/Samples/0_Introduction/asyncAPI/CMakeLists.txt b/Samples/0_Introduction/asyncAPI/CMakeLists.txt
index 33d160df..c5b4afcb 100644
--- a/Samples/0_Introduction/asyncAPI/CMakeLists.txt
+++ b/Samples/0_Introduction/asyncAPI/CMakeLists.txt
@@ -1,21 +1,11 @@
 cmake_minimum_required(VERSION 3.20)
 
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../cmake/Modules")
-
 project(asyncAPI LANGUAGES C CXX CUDA)
 
 find_package(CUDAToolkit REQUIRED)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
-set(CMAKE_CUDA_ARCHITECTURES 75 80 86 87 89 90 100 110 120)
-set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wno-deprecated-gpu-targets")
-if(ENABLE_CUDA_DEBUG)
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G")        # enable cuda-gdb (may significantly affect performance on some targets)
-else()
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo") # add line information to all builds for debug tools (exclusive to -G option)
-endif()
-
 # Include directories and libraries
 include_directories(../../../Common)
 
@@ -28,3 +18,5 @@ target_compile_options(asyncAPI PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:--extended-la
 target_compile_features(asyncAPI PRIVATE cxx_std_17 cuda_std_17)
 
 set_target_properties(asyncAPI PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
+
+install(TARGETS asyncAPI RUNTIME DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
diff --git a/Samples/0_Introduction/clock/CMakeLists.txt b/Samples/0_Introduction/clock/CMakeLists.txt
index e274a40e..eec1ee59 100644
--- a/Samples/0_Introduction/clock/CMakeLists.txt
+++ b/Samples/0_Introduction/clock/CMakeLists.txt
@@ -1,21 +1,11 @@
 cmake_minimum_required(VERSION 3.20)
 
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../cmake/Modules")
-
 project(clock LANGUAGES C CXX CUDA)
 
 find_package(CUDAToolkit REQUIRED)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
-set(CMAKE_CUDA_ARCHITECTURES 75 80 86 87 89 90 100 110 120)
-set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wno-deprecated-gpu-targets")
-if(ENABLE_CUDA_DEBUG)
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G")        # enable cuda-gdb (may significantly affect performance on some targets)
-else()
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo") # add line information to all builds for debug tools (exclusive to -G option)
-endif()
-
 # Include directories and libraries
 include_directories(../../../Common)
 
@@ -28,3 +18,5 @@ target_compile_options(clock PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:--extended-lambd
 target_compile_features(clock PRIVATE cxx_std_17 cuda_std_17)
 
 set_target_properties(clock PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
+
+install(TARGETS clock RUNTIME DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
diff --git a/Samples/0_Introduction/cudaOpenMP/CMakeLists.txt b/Samples/0_Introduction/cudaOpenMP/CMakeLists.txt
index 97749d58..01260e8d 100644
--- a/Samples/0_Introduction/cudaOpenMP/CMakeLists.txt
+++ b/Samples/0_Introduction/cudaOpenMP/CMakeLists.txt
@@ -1,21 +1,11 @@
 cmake_minimum_required(VERSION 3.20)
 
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../cmake/Modules")
-
 project(cudaOpenMP LANGUAGES C CXX CUDA)
 
 find_package(CUDAToolkit REQUIRED)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
-set(CMAKE_CUDA_ARCHITECTURES 75 80 86 87 89 90 100 110 120)
-set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wno-deprecated-gpu-targets")
-if(ENABLE_CUDA_DEBUG)
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G")        # enable cuda-gdb (may significantly affect performance on some targets)
-else()
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo") # add line information to all builds for debug tools (exclusive to -G option)
-endif()
-
 # Include directories and libraries
 include_directories(../../../Common)
 
@@ -26,14 +16,16 @@ if(OpenMP_CXX_FOUND)
 # Add target for asyncAPI
     add_executable(cudaOpenMP cudaOpenMP.cu)
 
-target_compile_options(cudaOpenMP PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:--extended-lambda>)
+    target_compile_options(cudaOpenMP PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:--extended-lambda>)
 
-target_compile_features(cudaOpenMP PRIVATE cxx_std_17 cuda_std_17)
+    target_compile_features(cudaOpenMP PRIVATE cxx_std_17 cuda_std_17)
 
     set_target_properties(cudaOpenMP PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
     target_link_libraries(cudaOpenMP PUBLIC
         OpenMP::OpenMP_CXX
     )
+
+    install(TARGETS cudaOpenMP RUNTIME DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
 else()
     message(STATUS "OpenMP not found - will not build sample 'cudaOpenMP'")
 endif()
diff --git a/Samples/0_Introduction/fp16ScalarProduct/CMakeLists.txt b/Samples/0_Introduction/fp16ScalarProduct/CMakeLists.txt
index 0906205c..f9334cd5 100644
--- a/Samples/0_Introduction/fp16ScalarProduct/CMakeLists.txt
+++ b/Samples/0_Introduction/fp16ScalarProduct/CMakeLists.txt
@@ -1,20 +1,11 @@
 cmake_minimum_required(VERSION 3.20)
 
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../cmake/Modules")
-
 project(fp16ScalarProduct LANGUAGES C CXX CUDA)
 
 find_package(CUDAToolkit REQUIRED)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
-set(CMAKE_CUDA_ARCHITECTURES 75 80 86 87 89 90 100 110 120)
-if(ENABLE_CUDA_DEBUG)
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G")        # enable cuda-gdb (may significantly affect performance on some targets)
-else()
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo") # add line information to all builds for debug tools (exclusive to -G option)
-endif()
-
 # Include directories and libraries
 include_directories(../../../Common)
 
@@ -27,3 +18,5 @@ target_compile_options(fp16ScalarProduct PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:--ex
 target_compile_features(fp16ScalarProduct PRIVATE cxx_std_17 cuda_std_17)
 
 set_target_properties(fp16ScalarProduct PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
+
+install(TARGETS fp16ScalarProduct RUNTIME DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
diff --git a/Samples/0_Introduction/matrixMul/CMakeLists.txt b/Samples/0_Introduction/matrixMul/CMakeLists.txt
index 004967e2..424b1a3e 100644
--- a/Samples/0_Introduction/matrixMul/CMakeLists.txt
+++ b/Samples/0_Introduction/matrixMul/CMakeLists.txt
@@ -1,21 +1,11 @@
 cmake_minimum_required(VERSION 3.20)
 
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../cmake/Modules")
-
 project(matrixMul LANGUAGES C CXX CUDA)
 
 find_package(CUDAToolkit REQUIRED)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
-set(CMAKE_CUDA_ARCHITECTURES 75 80 86 87 89 90 100 110 120)
-set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wno-deprecated-gpu-targets")
-if(ENABLE_CUDA_DEBUG)
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G")        # enable cuda-gdb (may significantly affect performance on some targets)
-else()
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo") # add line information to all builds for debug tools (exclusive to -G option)
-endif()
-
 # Include directories and libraries
 include_directories(../../../Common)
 
@@ -28,3 +18,5 @@ target_compile_options(matrixMul PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:--extended-l
 target_compile_features(matrixMul PRIVATE cxx_std_17 cuda_std_17)
 
 set_target_properties(matrixMul PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
+
+install(TARGETS matrixMul RUNTIME DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
diff --git a/Samples/0_Introduction/matrixMulDynlinkJIT/CMakeLists.txt b/Samples/0_Introduction/matrixMulDynlinkJIT/CMakeLists.txt
index 3058893e..6eb45cce 100644
--- a/Samples/0_Introduction/matrixMulDynlinkJIT/CMakeLists.txt
+++ b/Samples/0_Introduction/matrixMulDynlinkJIT/CMakeLists.txt
@@ -1,21 +1,11 @@
 cmake_minimum_required(VERSION 3.20)
 
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../cmake/Modules")
-
 project(matrixMulDynlinkJIT LANGUAGES C CXX CUDA)
 
 find_package(CUDAToolkit REQUIRED)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
-set(CMAKE_CUDA_ARCHITECTURES 75 80 86 87 89 90 100 110 120)
-set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wno-deprecated-gpu-targets")
-if(ENABLE_CUDA_DEBUG)
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G")        # enable cuda-gdb (may significantly affect performance on some targets)
-else()
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo") # add line information to all builds for debug tools (exclusive to -G option)
-endif()
-
 # Include directories and libraries
 include_directories(../../../Common)
 
@@ -38,10 +28,11 @@ if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clan
 endif()
 
 target_link_libraries(matrixMulDynlinkJIT PUBLIC
-    CUDA::cudart
-    CUDA::cuda_driver
+    cudart
 )
 
 if(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
     target_link_libraries(matrixMulDynlinkJIT PUBLIC dl)
 endif()
+
+install(TARGETS matrixMulDynlinkJIT RUNTIME DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
diff --git a/Samples/0_Introduction/simpleAssert/CMakeLists.txt b/Samples/0_Introduction/simpleAssert/CMakeLists.txt
index 87d328c4..78118a59 100644
--- a/Samples/0_Introduction/simpleAssert/CMakeLists.txt
+++ b/Samples/0_Introduction/simpleAssert/CMakeLists.txt
@@ -1,21 +1,11 @@
 cmake_minimum_required(VERSION 3.20)
 
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../cmake/Modules")
-
 project(simpleAssert LANGUAGES C CXX CUDA)
 
 find_package(CUDAToolkit REQUIRED)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
-set(CMAKE_CUDA_ARCHITECTURES 75 80 86 87 89 90 100 110 120)
-set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wno-deprecated-gpu-targets")
-if(ENABLE_CUDA_DEBUG)
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G")        # enable cuda-gdb (may significantly affect performance on some targets)
-else()
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo") # add line information to all builds for debug tools (exclusive to -G option)
-endif()
-
 # Removes -DNDEBUG For Print specific logs in this sample.
 string(REPLACE "-DNDEBUG" "" CMAKE_CUDA_FLAGS_RELEASE "${CMAKE_CUDA_FLAGS_RELEASE}")
 
@@ -31,3 +21,5 @@ target_compile_options(simpleAssert PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:--extende
 target_compile_features(simpleAssert PRIVATE cxx_std_17 cuda_std_17)
 
 set_target_properties(simpleAssert PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
+
+install(TARGETS simpleAssert RUNTIME DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
diff --git a/Samples/0_Introduction/simpleAtomicIntrinsics/CMakeLists.txt b/Samples/0_Introduction/simpleAtomicIntrinsics/CMakeLists.txt
index 4203a937..ee309883 100644
--- a/Samples/0_Introduction/simpleAtomicIntrinsics/CMakeLists.txt
+++ b/Samples/0_Introduction/simpleAtomicIntrinsics/CMakeLists.txt
@@ -1,22 +1,11 @@
 cmake_minimum_required(VERSION 3.20)
 
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../cmake/Modules")
-
 project(simpleAtomicIntrinsics LANGUAGES C CXX CUDA)
 
 find_package(CUDAToolkit REQUIRED)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
-set(CMAKE_CUDA_ARCHITECTURES  75 80 86 87 89 90 100 110 120)
-set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wno-deprecated-gpu-targets")
-
-if(ENABLE_CUDA_DEBUG)
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G")        # enable cuda-gdb (may significantly affect performance on some targets)
-else()
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo") # add line information to all builds for debug tools (exclusive to -G option)
-endif()
-
 # Include directories and libraries
 include_directories(../../../Common)
 
@@ -29,3 +18,5 @@ target_compile_options(simpleAtomicIntrinsics PRIVATE $<$<COMPILE_LANGUAGE:CUDA>
 target_compile_features(simpleAtomicIntrinsics PRIVATE cxx_std_17 cuda_std_17)
 
 set_target_properties(simpleAtomicIntrinsics PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
+
+install(TARGETS simpleAtomicIntrinsics RUNTIME DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
diff --git a/Samples/0_Introduction/simpleAttributes/CMakeLists.txt b/Samples/0_Introduction/simpleAttributes/CMakeLists.txt
index 389fdfc8..27f2a952 100644
--- a/Samples/0_Introduction/simpleAttributes/CMakeLists.txt
+++ b/Samples/0_Introduction/simpleAttributes/CMakeLists.txt
@@ -1,21 +1,11 @@
 cmake_minimum_required(VERSION 3.20)
 
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../cmake/Modules")
-
 project(simpleAttributes LANGUAGES C CXX CUDA)
 
 find_package(CUDAToolkit REQUIRED)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
-set(CMAKE_CUDA_ARCHITECTURES 75 80 86 87 89 90 100 110 120)
-set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wno-deprecated-gpu-targets")
-if(ENABLE_CUDA_DEBUG)
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G")        # enable cuda-gdb (may significantly affect performance on some targets)
-else()
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo") # add line information to all builds for debug tools (exclusive to -G option)
-endif()
-
 # Include directories and libraries
 include_directories(../../../Common)
 
@@ -28,3 +18,5 @@ target_compile_options(simpleAttributes PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:--ext
 target_compile_features(simpleAttributes PRIVATE cxx_std_17 cuda_std_17)
 
 set_target_properties(simpleAttributes PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
+
+install(TARGETS simpleAttributes RUNTIME DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
diff --git a/Samples/0_Introduction/simpleCallback/CMakeLists.txt b/Samples/0_Introduction/simpleCallback/CMakeLists.txt
index 1c907a6d..3fe273d9 100644
--- a/Samples/0_Introduction/simpleCallback/CMakeLists.txt
+++ b/Samples/0_Introduction/simpleCallback/CMakeLists.txt
@@ -1,21 +1,11 @@
 cmake_minimum_required(VERSION 3.20)
 
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../cmake/Modules")
-
 project(simpleCallback LANGUAGES C CXX CUDA)
 
 find_package(CUDAToolkit REQUIRED)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
-set(CMAKE_CUDA_ARCHITECTURES 75 80 86 87 89 90 100 110 120)
-set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wno-deprecated-gpu-targets")
-if(ENABLE_CUDA_DEBUG)
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G")        # enable cuda-gdb (may significantly affect performance on some targets)
-else()
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo") # add line information to all builds for debug tools (exclusive to -G option)
-endif()
-
 # Include directories and libraries
 include_directories(../../../Common)
 
@@ -28,3 +18,5 @@ target_compile_options(simpleCallback PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:--exten
 target_compile_features(simpleCallback PRIVATE cxx_std_17 cuda_std_17)
 
 set_target_properties(simpleCallback PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
+
+install(TARGETS simpleCallback RUNTIME DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
diff --git a/Samples/0_Introduction/simpleCubemapTexture/CMakeLists.txt b/Samples/0_Introduction/simpleCubemapTexture/CMakeLists.txt
index 75e90782..05618b0f 100644
--- a/Samples/0_Introduction/simpleCubemapTexture/CMakeLists.txt
+++ b/Samples/0_Introduction/simpleCubemapTexture/CMakeLists.txt
@@ -1,21 +1,11 @@
 cmake_minimum_required(VERSION 3.20)
 
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../cmake/Modules")
-
 project(simpleCubemapTexture LANGUAGES C CXX CUDA)
 
 find_package(CUDAToolkit REQUIRED)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
-set(CMAKE_CUDA_ARCHITECTURES 75 80 86 87 89 90 100 110 120)
-set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wno-deprecated-gpu-targets")
-if(ENABLE_CUDA_DEBUG)
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G")        # enable cuda-gdb (may significantly affect performance on some targets)
-else()
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo") # add line information to all builds for debug tools (exclusive to -G option)
-endif()
-
 # Include directories and libraries
 include_directories(../../../Common)
 
@@ -28,3 +18,5 @@ target_compile_options(simpleCubemapTexture PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:-
 target_compile_features(simpleCubemapTexture PRIVATE cxx_std_17 cuda_std_17)
 
 set_target_properties(simpleCubemapTexture PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
+
+install(TARGETS simpleCubemapTexture RUNTIME DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
diff --git a/Samples/0_Introduction/simpleLayeredTexture/CMakeLists.txt b/Samples/0_Introduction/simpleLayeredTexture/CMakeLists.txt
index a60a9d27..ab5f4765 100644
--- a/Samples/0_Introduction/simpleLayeredTexture/CMakeLists.txt
+++ b/Samples/0_Introduction/simpleLayeredTexture/CMakeLists.txt
@@ -1,21 +1,11 @@
 cmake_minimum_required(VERSION 3.20)
 
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../cmake/Modules")
-
 project(simpleLayeredTexture LANGUAGES C CXX CUDA)
 
 find_package(CUDAToolkit REQUIRED)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
-set(CMAKE_CUDA_ARCHITECTURES 75 80 86 87 89 90 100 110 120)
-set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wno-deprecated-gpu-targets")
-if(ENABLE_CUDA_DEBUG)
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G")        # enable cuda-gdb (may significantly affect performance on some targets)
-else()
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo") # add line information to all builds for debug tools (exclusive to -G option)
-endif()
-
 # Include directories and libraries
 include_directories(../../../Common)
 
@@ -28,3 +18,5 @@ target_compile_options(simpleLayeredTexture PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:-
 target_compile_features(simpleLayeredTexture PRIVATE cxx_std_17 cuda_std_17)
 
 set_target_properties(simpleLayeredTexture PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
+
+install(TARGETS simpleLayeredTexture RUNTIME DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
diff --git a/Samples/0_Introduction/simpleMultiCopy/CMakeLists.txt b/Samples/0_Introduction/simpleMultiCopy/CMakeLists.txt
index 0e922b68..04354879 100644
--- a/Samples/0_Introduction/simpleMultiCopy/CMakeLists.txt
+++ b/Samples/0_Introduction/simpleMultiCopy/CMakeLists.txt
@@ -1,21 +1,11 @@
 cmake_minimum_required(VERSION 3.20)
 
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../cmake/Modules")
-
 project(simpleMultiCopy LANGUAGES C CXX CUDA)
 
 find_package(CUDAToolkit REQUIRED)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
-set(CMAKE_CUDA_ARCHITECTURES 75 80 86 87 89 90 100 110 120)
-set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wno-deprecated-gpu-targets")
-if(ENABLE_CUDA_DEBUG)
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G")        # enable cuda-gdb (may significantly affect performance on some targets)
-else()
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo") # add line information to all builds for debug tools (exclusive to -G option)
-endif()
-
 # Include directories and libraries
 include_directories(../../../Common)
 
@@ -28,3 +18,5 @@ target_compile_options(simpleMultiCopy PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:--exte
 target_compile_features(simpleMultiCopy PRIVATE cxx_std_17 cuda_std_17)
 
 set_target_properties(simpleMultiCopy PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
+
+install(TARGETS simpleMultiCopy RUNTIME DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
diff --git a/Samples/0_Introduction/simpleMultiGPU/CMakeLists.txt b/Samples/0_Introduction/simpleMultiGPU/CMakeLists.txt
index 81ed2c4e..1b3580c8 100644
--- a/Samples/0_Introduction/simpleMultiGPU/CMakeLists.txt
+++ b/Samples/0_Introduction/simpleMultiGPU/CMakeLists.txt
@@ -1,21 +1,11 @@
 cmake_minimum_required(VERSION 3.20)
 
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../cmake/Modules")
-
 project(simpleMultiGPU LANGUAGES C CXX CUDA)
 
 find_package(CUDAToolkit REQUIRED)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
-set(CMAKE_CUDA_ARCHITECTURES 75 80 86 87 89 90 100 110 120)
-set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wno-deprecated-gpu-targets")
-if(ENABLE_CUDA_DEBUG)
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G")        # enable cuda-gdb (may significantly affect performance on some targets)
-else()
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo") # add line information to all builds for debug tools (exclusive to -G option)
-endif()
-
 # Include directories and libraries
 include_directories(../../../Common)
 
@@ -28,3 +18,5 @@ target_compile_options(simpleMultiGPU PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:--exten
 target_compile_features(simpleMultiGPU PRIVATE cxx_std_17 cuda_std_17)
 
 set_target_properties(simpleMultiGPU PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
+
+install(TARGETS simpleMultiGPU RUNTIME DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
diff --git a/Samples/0_Introduction/simpleOccupancy/CMakeLists.txt b/Samples/0_Introduction/simpleOccupancy/CMakeLists.txt
index c5081c68..c1ee5e79 100644
--- a/Samples/0_Introduction/simpleOccupancy/CMakeLists.txt
+++ b/Samples/0_Introduction/simpleOccupancy/CMakeLists.txt
@@ -1,21 +1,11 @@
 cmake_minimum_required(VERSION 3.20)
 
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../cmake/Modules")
-
 project(simpleOccupancy LANGUAGES C CXX CUDA)
 
 find_package(CUDAToolkit REQUIRED)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
-set(CMAKE_CUDA_ARCHITECTURES 75 80 86 87 89 90 100 110 120)
-set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wno-deprecated-gpu-targets")
-if(ENABLE_CUDA_DEBUG)
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G")        # enable cuda-gdb (may significantly affect performance on some targets)
-else()
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo") # add line information to all builds for debug tools (exclusive to -G option)
-endif()
-
 # Include directories and libraries
 include_directories(../../../Common)
 
@@ -28,3 +18,5 @@ target_compile_options(simpleOccupancy PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:--exte
 target_compile_features(simpleOccupancy PRIVATE cxx_std_17 cuda_std_17)
 
 set_target_properties(simpleOccupancy PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
+
+install(TARGETS simpleOccupancy RUNTIME DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
diff --git a/Samples/0_Introduction/simplePitchLinearTexture/CMakeLists.txt b/Samples/0_Introduction/simplePitchLinearTexture/CMakeLists.txt
index 3aaee214..198dcb33 100644
--- a/Samples/0_Introduction/simplePitchLinearTexture/CMakeLists.txt
+++ b/Samples/0_Introduction/simplePitchLinearTexture/CMakeLists.txt
@@ -1,21 +1,11 @@
 cmake_minimum_required(VERSION 3.20)
 
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../cmake/Modules")
-
 project(simplePitchLinearTexture LANGUAGES C CXX CUDA)
 
 find_package(CUDAToolkit REQUIRED)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
-set(CMAKE_CUDA_ARCHITECTURES 75 80 86 87 89 90 100 110 120)
-set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wno-deprecated-gpu-targets")
-if(ENABLE_CUDA_DEBUG)
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G")        # enable cuda-gdb (may significantly affect performance on some targets)
-else()
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo") # add line information to all builds for debug tools (exclusive to -G option)
-endif()
-
 # Include directories and libraries
 include_directories(../../../Common)
 
@@ -28,3 +18,5 @@ target_compile_options(simplePitchLinearTexture PRIVATE $<$<COMPILE_LANGUAGE:CUD
 target_compile_features(simplePitchLinearTexture PRIVATE cxx_std_17 cuda_std_17)
 
 set_target_properties(simplePitchLinearTexture PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
+
+install(TARGETS simplePitchLinearTexture RUNTIME DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
diff --git a/Samples/0_Introduction/simplePrintf/CMakeLists.txt b/Samples/0_Introduction/simplePrintf/CMakeLists.txt
index d3cdb2d9..7aeaa4d8 100644
--- a/Samples/0_Introduction/simplePrintf/CMakeLists.txt
+++ b/Samples/0_Introduction/simplePrintf/CMakeLists.txt
@@ -1,21 +1,11 @@
 cmake_minimum_required(VERSION 3.20)
 
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../cmake/Modules")
-
 project(simplePrintf LANGUAGES C CXX CUDA)
 
 find_package(CUDAToolkit REQUIRED)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
-set(CMAKE_CUDA_ARCHITECTURES 75 80 86 87 89 90 100 110 120)
-set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wno-deprecated-gpu-targets")
-if(ENABLE_CUDA_DEBUG)
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G")        # enable cuda-gdb (may significantly affect performance on some targets)
-else()
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo") # add line information to all builds for debug tools (exclusive to -G option)
-endif()
-
 # Include directories and libraries
 include_directories(../../../Common)
 
@@ -28,3 +18,5 @@ target_compile_options(simplePrintf PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:--extende
 target_compile_features(simplePrintf PRIVATE cxx_std_17 cuda_std_17)
 
 set_target_properties(simplePrintf PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
+
+install(TARGETS simplePrintf RUNTIME DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
diff --git a/Samples/0_Introduction/simpleStreams/CMakeLists.txt b/Samples/0_Introduction/simpleStreams/CMakeLists.txt
index 2c9723b3..410fac1f 100644
--- a/Samples/0_Introduction/simpleStreams/CMakeLists.txt
+++ b/Samples/0_Introduction/simpleStreams/CMakeLists.txt
@@ -1,21 +1,11 @@
 cmake_minimum_required(VERSION 3.20)
 
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../cmake/Modules")
-
 project(simpleStreams LANGUAGES C CXX CUDA)
 
 find_package(CUDAToolkit REQUIRED)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
-set(CMAKE_CUDA_ARCHITECTURES 75 80 86 87 89 90 100 110 120)
-set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wno-deprecated-gpu-targets")
-if(ENABLE_CUDA_DEBUG)
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G")        # enable cuda-gdb (may significantly affect performance on some targets)
-else()
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo") # add line information to all builds for debug tools (exclusive to -G option)
-endif()
-
 # Include directories and libraries
 include_directories(../../../Common)
 
@@ -28,3 +18,5 @@ target_compile_options(simpleStreams PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:--extend
 target_compile_features(simpleStreams PRIVATE cxx_std_17 cuda_std_17)
 
 set_target_properties(simpleStreams PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
+
+install(TARGETS simpleStreams RUNTIME DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
diff --git a/Samples/0_Introduction/simpleSurfaceWrite/CMakeLists.txt b/Samples/0_Introduction/simpleSurfaceWrite/CMakeLists.txt
index f48cbd2a..03e5ab3f 100644
--- a/Samples/0_Introduction/simpleSurfaceWrite/CMakeLists.txt
+++ b/Samples/0_Introduction/simpleSurfaceWrite/CMakeLists.txt
@@ -1,21 +1,11 @@
 cmake_minimum_required(VERSION 3.20)
 
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../cmake/Modules")
-
 project(simpleSurfaceWrite LANGUAGES C CXX CUDA)
 
 find_package(CUDAToolkit REQUIRED)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
-set(CMAKE_CUDA_ARCHITECTURES 75 80 86 87 89 90 100 110 120)
-set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wno-deprecated-gpu-targets")
-if(ENABLE_CUDA_DEBUG)
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G")        # enable cuda-gdb (may significantly affect performance on some targets)
-else()
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo") # add line information to all builds for debug tools (exclusive to -G option)
-endif()
-
 # Include directories and libraries
 include_directories(../../../Common)
 
@@ -35,3 +25,6 @@ add_custom_command(TARGET simpleSurfaceWrite POST_BUILD
     ${CMAKE_CURRENT_SOURCE_DIR}/data
     ${CMAKE_CURRENT_BINARY_DIR}
 )
+
+install(TARGETS simpleSurfaceWrite RUNTIME DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
+install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ref_rotated.pgm ${CMAKE_CURRENT_BINARY_DIR}/teapot512.pgm DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
diff --git a/Samples/0_Introduction/simpleTemplates/CMakeLists.txt b/Samples/0_Introduction/simpleTemplates/CMakeLists.txt
index 939ba37d..c32b9eb2 100644
--- a/Samples/0_Introduction/simpleTemplates/CMakeLists.txt
+++ b/Samples/0_Introduction/simpleTemplates/CMakeLists.txt
@@ -1,21 +1,11 @@
 cmake_minimum_required(VERSION 3.20)
 
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../cmake/Modules")
-
 project(simpleTemplates LANGUAGES C CXX CUDA)
 
 find_package(CUDAToolkit REQUIRED)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
-set(CMAKE_CUDA_ARCHITECTURES 75 80 86 87 89 90 100 110 120)
-set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wno-deprecated-gpu-targets")
-if(ENABLE_CUDA_DEBUG)
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G")        # enable cuda-gdb (may significantly affect performance on some targets)
-else()
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo") # add line information to all builds for debug tools (exclusive to -G option)
-endif()
-
 # Include directories and libraries
 include_directories(../../../Common)
 
@@ -28,3 +18,5 @@ target_compile_options(simpleTemplates PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:--exte
 target_compile_features(simpleTemplates PRIVATE cxx_std_17 cuda_std_17)
 
 set_target_properties(simpleTemplates PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
+
+install(TARGETS simpleTemplates RUNTIME DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
diff --git a/Samples/0_Introduction/simpleTexture/CMakeLists.txt b/Samples/0_Introduction/simpleTexture/CMakeLists.txt
index 8522dbb4..5de6bc07 100644
--- a/Samples/0_Introduction/simpleTexture/CMakeLists.txt
+++ b/Samples/0_Introduction/simpleTexture/CMakeLists.txt
@@ -1,21 +1,11 @@
 cmake_minimum_required(VERSION 3.20)
 
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../cmake/Modules")
-
 project(simpleTexture LANGUAGES C CXX CUDA)
 
 find_package(CUDAToolkit REQUIRED)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
-set(CMAKE_CUDA_ARCHITECTURES 75 80 86 87 89 90 100 110 120)
-set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wno-deprecated-gpu-targets")
-if(ENABLE_CUDA_DEBUG)
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G")        # enable cuda-gdb (may significantly affect performance on some targets)
-else()
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo") # add line information to all builds for debug tools (exclusive to -G option)
-endif()
-
 # Include directories and libraries
 include_directories(../../../Common)
 
@@ -42,3 +32,6 @@ add_custom_command(TARGET simpleTexture POST_BUILD
     ${CMAKE_CURRENT_SOURCE_DIR}/data/ref_rotated.pgm
     ${CMAKE_CURRENT_BINARY_DIR}/
 )
+
+install(TARGETS simpleTexture RUNTIME DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
+install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ref_rotated.pgm ${CMAKE_CURRENT_BINARY_DIR}/teapot512.pgm DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
diff --git a/Samples/0_Introduction/simpleVoteIntrinsics/CMakeLists.txt b/Samples/0_Introduction/simpleVoteIntrinsics/CMakeLists.txt
index c999b003..736eecb2 100644
--- a/Samples/0_Introduction/simpleVoteIntrinsics/CMakeLists.txt
+++ b/Samples/0_Introduction/simpleVoteIntrinsics/CMakeLists.txt
@@ -1,21 +1,11 @@
 cmake_minimum_required(VERSION 3.20)
 
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../cmake/Modules")
-
 project(simpleVoteIntrinsics LANGUAGES C CXX CUDA)
 
 find_package(CUDAToolkit REQUIRED)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
-set(CMAKE_CUDA_ARCHITECTURES 75 80 86 87 89 90 100 110 120)
-set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wno-deprecated-gpu-targets")
-if(ENABLE_CUDA_DEBUG)
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G")        # enable cuda-gdb (may significantly affect performance on some targets)
-else()
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo") # add line information to all builds for debug tools (exclusive to -G option)
-endif()
-
 # Include directories and libraries
 include_directories(../../../Common)
 
@@ -28,3 +18,5 @@ target_compile_options(simpleVoteIntrinsics PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:-
 target_compile_features(simpleVoteIntrinsics PRIVATE cxx_std_17 cuda_std_17)
 
 set_target_properties(simpleVoteIntrinsics PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
+
+install(TARGETS simpleVoteIntrinsics RUNTIME DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
diff --git a/Samples/0_Introduction/simpleZeroCopy/CMakeLists.txt b/Samples/0_Introduction/simpleZeroCopy/CMakeLists.txt
index c20b3c98..8bd429d7 100644
--- a/Samples/0_Introduction/simpleZeroCopy/CMakeLists.txt
+++ b/Samples/0_Introduction/simpleZeroCopy/CMakeLists.txt
@@ -1,21 +1,11 @@
 cmake_minimum_required(VERSION 3.20)
 
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../cmake/Modules")
-
 project(simpleZeroCopy LANGUAGES C CXX CUDA)
 
 find_package(CUDAToolkit REQUIRED)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
-set(CMAKE_CUDA_ARCHITECTURES 75 80 86 87 89 90 100 110 120)
-set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wno-deprecated-gpu-targets")
-if(ENABLE_CUDA_DEBUG)
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G")        # enable cuda-gdb (may significantly affect performance on some targets)
-else()
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo") # add line information to all builds for debug tools (exclusive to -G option)
-endif()
-
 # Include directories and libraries
 include_directories(../../../Common)
 
@@ -28,3 +18,5 @@ target_compile_options(simpleZeroCopy PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:--exten
 target_compile_features(simpleZeroCopy PRIVATE cxx_std_17 cuda_std_17)
 
 set_target_properties(simpleZeroCopy PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
+
+install(TARGETS simpleZeroCopy RUNTIME DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
diff --git a/Samples/0_Introduction/vectorAdd/CMakeLists.txt b/Samples/0_Introduction/vectorAdd/CMakeLists.txt
index e1f4c2e1..09879840 100644
--- a/Samples/0_Introduction/vectorAdd/CMakeLists.txt
+++ b/Samples/0_Introduction/vectorAdd/CMakeLists.txt
@@ -1,21 +1,11 @@
 cmake_minimum_required(VERSION 3.20)
 
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../cmake/Modules")
-
 project(vectorAdd LANGUAGES C CXX CUDA)
 
 find_package(CUDAToolkit REQUIRED)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
-set(CMAKE_CUDA_ARCHITECTURES 75 80 86 87 89 90 100 110 120)
-set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wno-deprecated-gpu-targets")
-if(ENABLE_CUDA_DEBUG)
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G")  # enable cuda-gdb (may significantly affect performance on some targets)
-else()
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo") # add line information to all builds for debug tools (exclusive to -G option)
-endif()
-
 # Include directories and libraries
 include_directories(../../../Common)
 
@@ -28,3 +18,5 @@ target_compile_options(vectorAdd PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:--extended-l
 target_compile_features(vectorAdd PRIVATE cxx_std_17 cuda_std_17)
 
 set_target_properties(vectorAdd PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
+
+install(TARGETS vectorAdd RUNTIME DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
diff --git a/Samples/1_Utilities/CMakeLists.txt b/Samples/1_Utilities/CMakeLists.txt
index 1f3f481b..939d8efc 100644
--- a/Samples/1_Utilities/CMakeLists.txt
+++ b/Samples/1_Utilities/CMakeLists.txt
@@ -1,3 +1 @@
 add_subdirectory(deviceQuery)
-add_subdirectory(deviceQueryDrv)
-add_subdirectory(topologyQuery)
diff --git a/Samples/1_Utilities/deviceQuery/CMakeLists.txt b/Samples/1_Utilities/deviceQuery/CMakeLists.txt
index eed2acd4..0a9b7b1f 100644
--- a/Samples/1_Utilities/deviceQuery/CMakeLists.txt
+++ b/Samples/1_Utilities/deviceQuery/CMakeLists.txt
@@ -1,21 +1,11 @@
 cmake_minimum_required(VERSION 3.20)
 
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../cmake/Modules")
-
 project(deviceQuery LANGUAGES C CXX CUDA)
 
 find_package(CUDAToolkit REQUIRED)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
-set(CMAKE_CUDA_ARCHITECTURES 75 80 86 87 89 90 100 110 120)
-set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wno-deprecated-gpu-targets")
-if(ENABLE_CUDA_DEBUG)
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G")        # enable cuda-gdb (may significantly affect performance on some targets)
-else()
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo") # add line information to all builds for debug tools (exclusive to -G option)
-endif()
-
 # Include directories and libraries
 include_directories(../../../Common)
 
@@ -34,5 +24,7 @@ target_include_directories(deviceQuery PRIVATE
 )
 
 target_link_libraries(deviceQuery PUBLIC
-    CUDA::cudart
+    cudart
 )
+
+install(TARGETS deviceQuery RUNTIME DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
diff --git a/Samples/6_Performance/CMakeLists.txt b/Samples/6_Performance/CMakeLists.txt
index ac54e19a..abf7ce68 100644
--- a/Samples/6_Performance/CMakeLists.txt
+++ b/Samples/6_Performance/CMakeLists.txt
@@ -1,5 +1 @@
-add_subdirectory(LargeKernelParameter)
 add_subdirectory(UnifiedMemoryPerf)
-add_subdirectory(alignedTypes)
-add_subdirectory(cudaGraphsPerfScaling)
-add_subdirectory(transpose)
diff --git a/Samples/6_Performance/UnifiedMemoryPerf/CMakeLists.txt b/Samples/6_Performance/UnifiedMemoryPerf/CMakeLists.txt
index fc242dd3..f223c1fc 100644
--- a/Samples/6_Performance/UnifiedMemoryPerf/CMakeLists.txt
+++ b/Samples/6_Performance/UnifiedMemoryPerf/CMakeLists.txt
@@ -1,21 +1,11 @@
 cmake_minimum_required(VERSION 3.20)
 
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../cmake/Modules")
-
 project(UnifiedMemoryPerf LANGUAGES C CXX CUDA)
 
 find_package(CUDAToolkit REQUIRED)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
-set(CMAKE_CUDA_ARCHITECTURES 75 80 86 87 89 90 100 110 120)
-set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wno-deprecated-gpu-targets")
-if(ENABLE_CUDA_DEBUG)
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G")        # enable cuda-gdb (may significantly affect performance on some targets)
-else()
-    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo") # add line information to all builds for debug tools (exclusive to -G option)
-endif()
-
 # Include directories and libraries
 include_directories(../../../Common)
 
@@ -32,3 +22,5 @@ set_target_properties(UnifiedMemoryPerf PROPERTIES CUDA_SEPARABLE_COMPILATION ON
 target_include_directories(UnifiedMemoryPerf PRIVATE
     ${CUDAToolkit_INCLUDE_DIRS}
 )
+
+install(TARGETS UnifiedMemoryPerf RUNTIME DESTINATION ${CMAKE_INSTALL_CUDA_SAMPLES})
diff --git a/Samples/CMakeLists.txt b/Samples/CMakeLists.txt
index 3f7a8f3c..f728b737 100644
--- a/Samples/CMakeLists.txt
+++ b/Samples/CMakeLists.txt
@@ -9,25 +9,6 @@ add_subdirectory(0_Introduction)
 set(CMAKE_FOLDER "1_Utilities")
 add_subdirectory(1_Utilities)
 
-set(CMAKE_FOLDER "2_Concepts_and_Techniques")
-add_subdirectory(2_Concepts_and_Techniques)
-
-set(CMAKE_FOLDER "3_CUDA_Features")
-add_subdirectory(3_CUDA_Features)
-
-set(CMAKE_FOLDER "4_CUDA_Libraries")
-add_subdirectory(4_CUDA_Libraries)
-
-set(CMAKE_FOLDER "5_Domain_Specific")
-add_subdirectory(5_Domain_Specific)
-
 set(CMAKE_FOLDER "6_Performance")
 add_subdirectory(6_Performance)
 
-set(CMAKE_FOLDER "7_libNVVM")
-add_subdirectory(7_libNVVM)
-
-if(BUILD_TEGRA)
-    set(CMAKE_FOLDER "8_Platform_Specific/Tegra")
-    add_subdirectory(8_Platform_Specific/Tegra)
-endif()
-- 
2.34.1

