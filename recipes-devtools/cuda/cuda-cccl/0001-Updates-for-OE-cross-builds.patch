From 69d392da37d74301505b3c421ab115f4ae116345 Mon Sep 17 00:00:00 2001
From: Ilies CHERGUI <ichergui@nvidia.com>
Date: Thu, 18 Sep 2025 16:33:26 +0100
Subject: [PATCH] Updates for OE cross builds

Those changes are based on the following pull request:
https://github.com/NVIDIA/cccl/pull/5782

Fix:

error: '::isgreater' has not been declared
  360 |   NV_IF_ELSE_TARGET(NV_IS_HOST,
      |   ^~~~~~~~~~~~~~~~~

error: '::isnan' has not been declared; did you mean 'std::isnan'? [-Wtemplate-body]
   43 |     return ::isnan(__x);
      |              ^~~~~
      |              std::isnan

error: '::isinf' has not been declared; did you mean 'std::isinf'? [-Wtemplate-body]
   45 |     return ::isinf(__x);
      |              ^~~~~
      |              std::isinf

error: '::isfinite' has not been declared; did you mean 'std::isfinite'? [-Wtemplate-body]
   44 |     return ::isfinite(__x);
      |              ^~~~~~~~
      |              std::isfinite

Upstream-Status: Inappropriate [OE-specific]
Signed-off-by: Michael Schellenberger Costa <miscco@nvidia.com>
Signed-off-by: Ilies CHERGUI <ichergui@nvidia.com>
---
 .../include/cccl/cuda/std/__cccl/builtin.h    | 20 ++++++
 .../include/cccl/cuda/std/__cmath/isfinite.h  |  2 +
 .../include/cccl/cuda/std/__cmath/isinf.h     |  2 +
 .../include/cccl/cuda/std/__cmath/isnan.h     |  2 +
 .../include/cccl/cuda/std/__cmath/traits.h    | 70 +++++++++++++++++--
 5 files changed, 91 insertions(+), 5 deletions(-)

diff --git a/usr/local/cuda-13.0/include/cccl/cuda/std/__cccl/builtin.h b/usr/local/cuda-13.0/include/cccl/cuda/std/__cccl/builtin.h
index cd45dd1..016d5d0 100644
--- a/usr/local/cuda-13.0/include/cccl/cuda/std/__cccl/builtin.h
+++ b/usr/local/cuda-13.0/include/cccl/cuda/std/__cccl/builtin.h
@@ -472,6 +472,26 @@
 #  define _CCCL_BUILTIN_ISNORMAL(...) __builtin_isnormal(__VA_ARGS__)
 #endif // _CCCL_CHECK_BUILTIN(isnormal)
 
+#if _CCCL_CHECK_BUILTIN(builtin_isgreater) || _CCCL_COMPILER(GCC)
+#  define _CCCL_BUILTIN_ISGREATER(...) __builtin_isgreater(__VA_ARGS__)
+#endif // _CCCL_CHECK_BUILTIN(builtin_isgreater)
+
+#if _CCCL_CHECK_BUILTIN(builtin_isgreaterequal) || _CCCL_COMPILER(GCC)
+#  define _CCCL_BUILTIN_ISGREATEREQUAL(...) __builtin_isgreaterequal(__VA_ARGS__)
+#endif // _CCCL_CHECK_BUILTIN(builtin_isgreaterequal)
+
+#if _CCCL_CHECK_BUILTIN(builtin_isless) || _CCCL_COMPILER(GCC)
+#  define _CCCL_BUILTIN_ISLESS(...) __builtin_isless(__VA_ARGS__)
+#endif // _CCCL_CHECK_BUILTIN(builtin_isless)
+
+#if _CCCL_CHECK_BUILTIN(builtin_islessequal) || _CCCL_COMPILER(GCC)
+#  define _CCCL_BUILTIN_ISLESSEQUAL(...) __builtin_islessequal(__VA_ARGS__)
+#endif // _CCCL_CHECK_BUILTIN(builtin_islessequal)
+
+#if _CCCL_CHECK_BUILTIN(builtin_islessgreater) || _CCCL_COMPILER(GCC)
+#  define _CCCL_BUILTIN_ISLESSGREATER(...) __builtin_islessgreater(__VA_ARGS__)
+#endif // _CCCL_CHECK_BUILTIN(builtin_islessgreater)
+
 // nvcc does not implement __builtin_isnormal
 #if _CCCL_CUDA_COMPILER(NVCC)
 #  undef _CCCL_BUILTIN_ISNORMAL
diff --git a/usr/local/cuda-13.0/include/cccl/cuda/std/__cmath/isfinite.h b/usr/local/cuda-13.0/include/cccl/cuda/std/__cmath/isfinite.h
index 8bd5bd9..07ae9a2 100644
--- a/usr/local/cuda-13.0/include/cccl/cuda/std/__cmath/isfinite.h
+++ b/usr/local/cuda-13.0/include/cccl/cuda/std/__cmath/isfinite.h
@@ -35,6 +35,7 @@
 
 _LIBCUDACXX_BEGIN_NAMESPACE_STD
 
+#if !defined(_CCCL_BUILTIN_ISFINITE)
 template <class _Tp>
 _CCCL_NODISCARD _LIBCUDACXX_HIDE_FROM_ABI constexpr bool __isfinite_impl(_Tp __x) noexcept
 {
@@ -45,6 +46,7 @@ _CCCL_NODISCARD _LIBCUDACXX_HIDE_FROM_ABI constexpr bool __isfinite_impl(_Tp __x
   }
   return !_CUDA_VSTD::isnan(__x) && !_CUDA_VSTD::isinf(__x);
 }
+#endif // ^^^ !_CCCL_BUILTIN_ISFINITE ^^^
 
 _CCCL_NODISCARD _LIBCUDACXX_HIDE_FROM_ABI constexpr bool isfinite(float __x) noexcept
 {
diff --git a/usr/local/cuda-13.0/include/cccl/cuda/std/__cmath/isinf.h b/usr/local/cuda-13.0/include/cccl/cuda/std/__cmath/isinf.h
index a2a75ac..1bb14fc 100644
--- a/usr/local/cuda-13.0/include/cccl/cuda/std/__cmath/isinf.h
+++ b/usr/local/cuda-13.0/include/cccl/cuda/std/__cmath/isinf.h
@@ -36,6 +36,7 @@
 
 _LIBCUDACXX_BEGIN_NAMESPACE_STD
 
+#if !defined(_CCCL_BUILTIN_ISINF) && !_CCCL_CUDA_COMPILER(NVCC) && !_CCCL_CUDA_COMPILER(NVRTC)
 template <class _Tp>
 _CCCL_NODISCARD _LIBCUDACXX_HIDE_FROM_ABI constexpr bool __isinf_impl(_Tp __x) noexcept
 {
@@ -50,6 +51,7 @@ _CCCL_NODISCARD _LIBCUDACXX_HIDE_FROM_ABI constexpr bool __isinf_impl(_Tp __x) n
   }
   return __x > numeric_limits<_Tp>::max() || __x < numeric_limits<_Tp>::lowest();
 }
+#endif // ^^^ !_CCCL_BUILTIN_ISINF ^^^
 
 _CCCL_NODISCARD _LIBCUDACXX_HIDE_FROM_ABI constexpr bool isinf(float __x) noexcept
 {
diff --git a/usr/local/cuda-13.0/include/cccl/cuda/std/__cmath/isnan.h b/usr/local/cuda-13.0/include/cccl/cuda/std/__cmath/isnan.h
index cd0cdf6..803b666 100644
--- a/usr/local/cuda-13.0/include/cccl/cuda/std/__cmath/isnan.h
+++ b/usr/local/cuda-13.0/include/cccl/cuda/std/__cmath/isnan.h
@@ -34,6 +34,7 @@
 
 _LIBCUDACXX_BEGIN_NAMESPACE_STD
 
+#if !defined(_CCCL_BUILTIN_ISNAN)
 template <class _Tp>
 _CCCL_NODISCARD _LIBCUDACXX_HIDE_FROM_ABI constexpr bool __isnan_impl(_Tp __x) noexcept
 {
@@ -44,6 +45,7 @@ _CCCL_NODISCARD _LIBCUDACXX_HIDE_FROM_ABI constexpr bool __isnan_impl(_Tp __x) n
   }
   return __x != __x;
 }
+#endif // ^^^ !_CCCL_BUILTIN_ISNAN ^^^
 
 _CCCL_NODISCARD _LIBCUDACXX_HIDE_FROM_ABI constexpr bool isnan(float __x) noexcept
 {
diff --git a/usr/local/cuda-13.0/include/cccl/cuda/std/__cmath/traits.h b/usr/local/cuda-13.0/include/cccl/cuda/std/__cmath/traits.h
index f804387..a7fe0bc 100644
--- a/usr/local/cuda-13.0/include/cccl/cuda/std/__cmath/traits.h
+++ b/usr/local/cuda-13.0/include/cccl/cuda/std/__cmath/traits.h
@@ -47,6 +47,18 @@ _CCCL_NODISCARD _CCCL_DEVICE _CCCL_HIDE_FROM_ABI bool __device_isgreater(_A1 __x
   return __x > __y;
 }
 
+#if !_CCCL_COMPILER(NVRTC)
+template <class _A1, enable_if_t<_CCCL_TRAIT(__is_extended_arithmetic, _A1), int> = 0>
+_CCCL_NODISCARD _CCCL_HIDE_FROM_ABI bool __host_isgreater(_A1 __x, _A1 __y) noexcept
+{
+#  if defined(_CCCL_BUILTIN_ISGREATER)
+  return _CCCL_BUILTIN_ISGREATER(__x, __y);
+#  else // ^^^ _CCCL_BUILTIN_ISGREATER ^^^ / vvv !_CCCL_BUILTIN_ISGREATER vvv
+  return ::isgreater(__x, __y);
+#  endif // !_CCCL_BUILTIN_ISGREATER
+}
+#endif // !_CCCL_COMPILER(NVRTC)
+
 template <class _A1,
           class _A2,
           enable_if_t<_CCCL_TRAIT(__is_extended_arithmetic, _A1) && _CCCL_TRAIT(__is_extended_arithmetic, _A2), int> = 0>
@@ -54,7 +66,7 @@ _CCCL_NODISCARD _LIBCUDACXX_HIDE_FROM_ABI bool isgreater(_A1 __x, _A2 __y) noexc
 {
   using type = __promote_t<_A1, _A2>;
   NV_IF_ELSE_TARGET(NV_IS_HOST,
-                    (return ::isgreater((type) __x, (type) __y);),
+                    (return _CUDA_VSTD::__host_isgreater((type) __x, (type) __y);),
                     (return _CUDA_VSTD::__device_isgreater((type) __x, (type) __y);))
 }
 
@@ -70,6 +82,18 @@ _CCCL_NODISCARD _CCCL_DEVICE _CCCL_HIDE_FROM_ABI bool __device_isgreaterequal(_A
   return __x >= __y;
 }
 
+#if !_CCCL_COMPILER(NVRTC)
+template <class _A1, enable_if_t<_CCCL_TRAIT(__is_extended_arithmetic, _A1), int> = 0>
+_CCCL_NODISCARD _CCCL_HIDE_FROM_ABI bool __host_isgreaterequal(_A1 __x, _A1 __y) noexcept
+{
+#  if defined(_CCCL_BUILTIN_ISGREATEREQUAL)
+  return _CCCL_BUILTIN_ISGREATEREQUAL(__x, __y);
+#  else // ^^^ _CCCL_BUILTIN_ISGREATEREQUAL ^^^ / vvv !_CCCL_BUILTIN_ISGREATEREQUAL vvv
+  return ::isgreaterequal(__x, __y);
+#  endif // !_CCCL_BUILTIN_ISGREATEREQUAL
+}
+#endif // !_CCCL_COMPILER(NVRTC)
+
 template <class _A1,
           class _A2,
           enable_if_t<_CCCL_TRAIT(__is_extended_arithmetic, _A1) && _CCCL_TRAIT(__is_extended_arithmetic, _A2), int> = 0>
@@ -77,7 +101,7 @@ _CCCL_NODISCARD _LIBCUDACXX_HIDE_FROM_ABI bool isgreaterequal(_A1 __x, _A2 __y)
 {
   using type = __promote_t<_A1, _A2>;
   NV_IF_ELSE_TARGET(NV_IS_HOST,
-                    (return ::isgreaterequal((type) __x, (type) __y);),
+                    (return _CUDA_VSTD::__host_isgreaterequal((type) __x, (type) __y);),
                     (return _CUDA_VSTD::__device_isgreaterequal((type) __x, (type) __y);))
 }
 
@@ -93,6 +117,18 @@ _CCCL_NODISCARD _CCCL_DEVICE _CCCL_HIDE_FROM_ABI bool __device_isless(_A1 __x, _
   return __x < __y;
 }
 
+#if !_CCCL_COMPILER(NVRTC)
+template <class _A1, enable_if_t<_CCCL_TRAIT(__is_extended_arithmetic, _A1), int> = 0>
+_CCCL_NODISCARD _CCCL_HIDE_FROM_ABI bool __host_isless(_A1 __x, _A1 __y) noexcept
+{
+#  if defined(_CCCL_BUILTIN_ISLESS)
+  return _CCCL_BUILTIN_ISLESS(__x, __y);
+#  else // ^^^ _CCCL_BUILTIN_ISLESS ^^^ / vvv !_CCCL_BUILTIN_ISLESS vvv
+  return ::isless(__x, __y);
+#  endif // !_CCCL_BUILTIN_ISLESS
+}
+#endif // !_CCCL_COMPILER(NVRTC)
+
 template <class _A1,
           class _A2,
           enable_if_t<_CCCL_TRAIT(__is_extended_arithmetic, _A1) && _CCCL_TRAIT(__is_extended_arithmetic, _A2), int> = 0>
@@ -100,7 +136,7 @@ _CCCL_NODISCARD _LIBCUDACXX_HIDE_FROM_ABI bool isless(_A1 __x, _A2 __y) noexcept
 {
   using type = __promote_t<_A1, _A2>;
   NV_IF_ELSE_TARGET(NV_IS_HOST,
-                    (return ::isless((type) __x, (type) __y);),
+                    (return _CUDA_VSTD::__host_isless((type) __x, (type) __y);),
                     (return _CUDA_VSTD::__device_isless((type) __x, (type) __y);))
 }
 
@@ -116,6 +152,18 @@ _CCCL_NODISCARD _CCCL_DEVICE _CCCL_HIDE_FROM_ABI bool __device_islessequal(_A1 _
   return __x <= __y;
 }
 
+#if !_CCCL_COMPILER(NVRTC)
+template <class _A1, enable_if_t<_CCCL_TRAIT(__is_extended_arithmetic, _A1), int> = 0>
+_CCCL_NODISCARD _CCCL_HIDE_FROM_ABI bool __host_islessequal(_A1 __x, _A1 __y) noexcept
+{
+#  if defined(_CCCL_BUILTIN_ISLESSEQUAL)
+  return _CCCL_BUILTIN_ISLESSEQUAL(__x, __y);
+#  else // ^^^ _CCCL_BUILTIN_ISLESSEQUAL ^^^ / vvv !_CCCL_BUILTIN_ISLESSEQUAL vvv
+  return ::islessequal(__x, __y);
+#  endif // !_CCCL_BUILTIN_ISLESSEQUAL
+}
+#endif // !_CCCL_COMPILER(NVRTC)
+
 template <class _A1,
           class _A2,
           enable_if_t<_CCCL_TRAIT(__is_extended_arithmetic, _A1) && _CCCL_TRAIT(__is_extended_arithmetic, _A2), int> = 0>
@@ -123,7 +171,7 @@ _CCCL_NODISCARD _LIBCUDACXX_HIDE_FROM_ABI bool islessequal(_A1 __x, _A2 __y) noe
 {
   using type = __promote_t<_A1, _A2>;
   NV_IF_ELSE_TARGET(NV_IS_HOST,
-                    (return ::islessequal((type) __x, (type) __y);),
+                    (return _CUDA_VSTD::__host_islessequal((type) __x, (type) __y);),
                     (return _CUDA_VSTD::__device_islessequal((type) __x, (type) __y);))
 }
 
@@ -139,6 +187,18 @@ _CCCL_NODISCARD _CCCL_DEVICE _CCCL_HIDE_FROM_ABI bool __device_islessgreater(_A1
   return __x < __y || __x > __y;
 }
 
+#if !_CCCL_COMPILER(NVRTC)
+template <class _A1, enable_if_t<_CCCL_TRAIT(__is_extended_arithmetic, _A1), int> = 0>
+_CCCL_NODISCARD _CCCL_HIDE_FROM_ABI bool __host_islessgreater(_A1 __x, _A1 __y) noexcept
+{
+#  if defined(_CCCL_BUILTIN_ISLESSGREATER)
+  return _CCCL_BUILTIN_ISLESSGREATER(__x, __y);
+#  else // ^^^ _CCCL_BUILTIN_ISLESSGREATER ^^^ / vvv !_CCCL_BUILTIN_ISLESSGREATER vvv
+  return ::islessgreater(__x, __y);
+#  endif // !_CCCL_BUILTIN_ISLESSGREATER
+}
+#endif // !_CCCL_COMPILER(NVRTC)
+
 template <class _A1,
           class _A2,
           enable_if_t<_CCCL_TRAIT(__is_extended_arithmetic, _A1) && _CCCL_TRAIT(__is_extended_arithmetic, _A2), int> = 0>
@@ -146,7 +206,7 @@ _CCCL_NODISCARD _LIBCUDACXX_HIDE_FROM_ABI bool islessgreater(_A1 __x, _A2 __y) n
 {
   using type = __promote_t<_A1, _A2>;
   NV_IF_ELSE_TARGET(NV_IS_HOST,
-                    (return ::islessgreater((type) __x, (type) __y);),
+                    (return _CUDA_VSTD::__host_islessgreater((type) __x, (type) __y);),
                     (return _CUDA_VSTD::__device_islessgreater((type) __x, (type) __y);))
 }
 
-- 
2.34.1

