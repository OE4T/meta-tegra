From 82ae29c900f5715a4f0b0b028d709735f6aa1839 Mon Sep 17 00:00:00 2001
From: "Miguel A. Vico" <mvicomoya@nvidia.com>
Date: Thu, 18 May 2017 14:35:36 -0700
Subject: [PATCH] compositor: Process stream attach requests with
 wl_eglstream_controller

So far, the EGLStream implementation of the Wayland client-side driver
has been using wl_surface_attach + commit in order to make the server
create its stream endpoint and attach a consumer to it.

However, no actual buffer would be actually shared between client and
server, which goes against many of the assumptions behind
wl_surface_attach + commit.

This has caused different interaction issues in the past.

In order to properly resolve this once and for all, a new
wl_eglstream_controller protocol has been added which will let clients
request the compositor to create its stream.

This change adds the required code for weston to create a
wl_eglstream_controller global and process attach_eglstream_consumer
requests.

[mvicomoya: - Dynamically load libnvidia-egl-wayland.so.1 instead linking
              against it
            - Add wayland-eglstream-protocols package dependency and
              generate server header for wayland-eglstream-controller at
              build time]

Signed-off-by: Ashutosh Agarwal <asagarwal@nvidia.com>
Signed-off-by: Miguel A Vico Moya <mvicomoya@nvidia.com>

---
 compositor/meson.build              |   1 +
 include/libweston/libweston.h       |  13 +++
 libweston/compositor.c              |  79 ++++++++++++++-
 libweston/renderer-gl/gl-renderer.c | 145 ++++++++++++++++++----------
 protocol/meson.build                |   7 ++
 5 files changed, 191 insertions(+), 54 deletions(-)

diff --git a/compositor/meson.build b/compositor/meson.build
index 8a54ea9..e1878be 100644
--- a/compositor/meson.build
+++ b/compositor/meson.build
@@ -9,6 +9,7 @@ srcs_weston = [
 	input_method_unstable_v1_protocol_c,
 	weston_screenshooter_server_protocol_h,
 	weston_screenshooter_protocol_c,
+	wayland_eglstream_controller_server_protocol_h,
 ]
 deps_weston = [
 	dep_libshared,
diff --git a/include/libweston/libweston.h b/include/libweston/libweston.h
index d99dc76..8d87dc4 100644
--- a/include/libweston/libweston.h
+++ b/include/libweston/libweston.h
@@ -968,6 +968,19 @@ struct weston_renderer {
 
 	const struct weston_drm_format_array *
 			(*get_supported_formats)(struct weston_compositor *ec);
+
+	/** On error sets num_formats to zero */
+	void (*query_dmabuf_formats)(struct weston_compositor *ec,
+				int **formats, int *num_formats);
+
+	/** On error sets num_modifiers to zero */
+	void (*query_dmabuf_modifiers)(struct weston_compositor *ec,
+				int format, uint64_t **modifiers,
+				int *num_modifiers);
+
+	/** Create weston endpoint of an EGLStream & attach a consumer to it */
+	bool (*attach_eglstream_consumer)(struct weston_surface *es,
+					  struct wl_resource *wl_eglstream);
 };
 
 enum weston_capability {
diff --git a/libweston/compositor.c b/libweston/compositor.c
index 1670c50..c5d9828 100644
--- a/libweston/compositor.c
+++ b/libweston/compositor.c
@@ -76,6 +76,7 @@
 #include "backend.h"
 #include "libweston-internal.h"
 #include "color.h"
+#include "wayland-eglstream-controller-server-protocol.h"
 
 #include "weston-log-internal.h"
 
@@ -7422,6 +7423,80 @@ bind_presentation(struct wl_client *client,
 	wp_presentation_send_clock_id(resource, compositor->presentation_clock);
 }
 
+static struct wl_interface *eglstream_controller_interface = NULL;
+
+static void
+attach_eglstream_consumer(struct wl_client *client,
+			  struct wl_resource *resource,
+			  struct wl_resource *wl_surface,
+			  struct wl_resource *wl_eglstream)
+{
+	struct weston_surface *surface =
+		wl_resource_get_user_data(wl_surface);
+
+	surface->compositor->renderer->attach_eglstream_consumer(surface,
+								 wl_eglstream);
+}
+
+static const struct wl_eglstream_controller_interface
+eglstream_controller_implementation = {
+	attach_eglstream_consumer
+};
+
+static void
+bind_eglstream_controller(struct wl_client *client,
+			  void *data, uint32_t version, uint32_t id)
+{
+	struct wl_resource *resource;
+
+	resource = wl_resource_create(client, eglstream_controller_interface,
+				      version, id);
+
+	if (resource == NULL) {
+		wl_client_post_no_memory(client);
+		return;
+	}
+	wl_resource_set_implementation(resource,
+				       &eglstream_controller_implementation,
+				       data,
+				       NULL);
+}
+
+static void
+init_eglstream_controller(struct wl_display *display)
+{
+	/*
+	 * wl_eglstream_controller_interface is provided by
+	 * libnvidia-egl-wayland.so.1
+	 *
+	 * Since it might not be available on the
+	 * system, dynamically load it at runtime and resolve the needed
+	 * symbols. If available, it should be found under any of the search
+	 * directories of dlopen()
+	 *
+	 * Failure to initialize wl_eglstream_controller is non-fatal
+	 */
+
+	void *lib = dlopen("libnvidia-egl-wayland.so.1", RTLD_NOW | RTLD_LAZY);
+	if (!lib)
+		goto fail;
+
+	eglstream_controller_interface =
+		dlsym(lib, "wl_eglstream_controller_interface");
+
+	if (!eglstream_controller_interface)
+		goto fail;
+
+	if (wl_global_create(display,
+			     eglstream_controller_interface, 1,
+			     NULL, bind_eglstream_controller))
+		return; /* success */
+fail:
+	if (lib)
+		dlclose(lib);
+	weston_log("warning: Unable to initialize wl_eglstream_controller.\n");
+}
+
 static void
 compositor_bind(struct wl_client *client,
 		void *data, uint32_t version, uint32_t id)
@@ -7799,7 +7874,9 @@ weston_compositor_create(struct wl_display *display,
 			      ec, bind_presentation))
 		goto fail;
 
-	if (weston_input_init(ec) != 0)
+	init_eglstream_controller(ec->wl_display);
+
+        if (weston_input_init(ec) != 0)
 		goto fail;
 
 	wl_list_init(&ec->view_list);
diff --git a/libweston/renderer-gl/gl-renderer.c b/libweston/renderer-gl/gl-renderer.c
index c775077..67c8a57 100644
--- a/libweston/renderer-gl/gl-renderer.c
+++ b/libweston/renderer-gl/gl-renderer.c
@@ -2926,85 +2926,122 @@ out:
 	return ret;
 }
 
-/*
- * gl_renderer_attach_stream_texture
- *
- * Try to bind given <buffer> to an EGLStream. If the given buffer was already
- * bound, it will acquire next frame on the stream.
- *
- * Return true if the given <buffer> corresponds to an EGLStream; otherwise,
- * return false (if might be another kind of buffer).
- */
-static bool
-gl_renderer_attach_stream_texture(struct weston_surface *es,
-				  struct weston_buffer *buffer)
+static EGLint
+gl_renderer_attach_eglstream_consumer_common(struct weston_surface *es,
+					     struct wl_resource *wl_eglstream)
 {
 #ifdef EGL_NV_stream_attrib
 	struct weston_compositor *ec = es->compositor;
 	struct gl_renderer *gr = get_renderer(ec);
 	struct gl_surface_state *gs = get_surface_state(es);
 	EGLStreamKHR stream = EGL_NO_STREAM_KHR;
+	GLenum target;
 	EGLAttrib stream_attribs[] = {
 #ifdef EGL_WL_wayland_eglstream
-		EGL_WAYLAND_EGLSTREAM_WL, (EGLAttrib)buffer->resource,
+		EGL_WAYLAND_EGLSTREAM_WL, (EGLAttrib)wl_eglstream,
 #endif
 		EGL_NONE
 	};
-	EGLint stream_state = EGL_STREAM_STATE_EMPTY_KHR;
 
 	/* Check for required extensions. If they arent supported, there's no
-	 * way the given buffer corresponds to an EGLStream */
+	 *  way the given resource corresponds to an EGLStream */
 	if (!gr->has_egl_stream_attrib ||
 	    !gr->has_egl_stream_consumer_gltexture ||
 	    !gr->has_egl_wayland_eglstream)
-		return false;
+		return EGL_BAD_ACCESS;
 
 	stream = gr->create_stream_attrib(gr->egl_display, stream_attribs);
-	if (stream == EGL_NO_STREAM_KHR) {
+
+	if (stream == EGL_NO_STREAM_KHR)
+		return eglGetError();
+
+	if (gs->egl_stream != EGL_NO_STREAM_KHR)
+		gr->destroy_stream(gr->egl_display, gs->egl_stream);
+
+	gs->egl_stream = stream;
+	gs->shader_variant = SHADER_VARIANT_EXTERNAL;
+	target = gl_shader_texture_variant_get_target(gs->shader_variant);
+
+	glActiveTexture(GL_TEXTURE0);
+	ensure_textures(gs, target, 1);
+	glBindTexture(target, gs->textures[0]);
+
+	gs->new_stream = (gr->stream_consumer_gltexture(
+					gr->egl_display,
+					gs->egl_stream) == EGL_TRUE);
+
+	if (!gs->new_stream) {
 		EGLint err = eglGetError();
 
-		switch (err) {
-		case EGL_BAD_ACCESS:
-			/* EGL_BAD_ACCESS is generated whenever buffer->resource
-			 * does not corresponds to a stream */
-			return false;
+		weston_log("failed to set stream consumer\n");
+		weston_log("EGL error: 0x%04lx\n", (long)err);
 
-		case EGL_BAD_STREAM_KHR:
-			/* EGL_BAD_STREAM_KHR is generated whenever
-			 * buffer->resource corresponds to a previously created
-			 * stream so we must have a valid stream handle already
-			 * we can use to acquire next frame */
-			break;
+		gr->destroy_stream(gr->egl_display, gs->egl_stream);
+		gs->egl_stream = EGL_NO_STREAM_KHR;
+		return err;
+	}
 
-		default:
-			/* An unknown error was generated */
-			assert(0);
-			return false;
-		}
-	} else {
-		/* Clean up current stream resources if needed */
-		if (gs->egl_stream != EGL_NO_STREAM_KHR)
-			gr->destroy_stream(gr->egl_display, gs->egl_stream);
+	return EGL_SUCCESS;
+#else
+	return EGL_BAD_ACCESS;
+#endif
+}
 
-		gs->egl_stream = stream;
-		gs->shader_variant = SHADER_VARIANT_EXTERNAL;
-		target = gl_shader_texture_variant_get_target(gs->shader_variant);
+static bool
+gl_renderer_attach_eglstream_consumer(struct weston_surface *es,
+				      struct wl_resource *stream)
+{
+	EGLint err = gl_renderer_attach_eglstream_consumer_common(es, stream);
+	return (err == EGL_SUCCESS);
+}
+
+/*
+ * gl_renderer_attach_stream_texture
+ *
+ * Try to bind given <buffer> to an EGLStream. If the given buffer was already
+ * bound, it will acquire next frame on the stream.
+ *
+ * Return true if the given <buffer> corresponds to an EGLStream; otherwise,
+ * return false (if might be another kind of buffer).
+ */
+static bool
+gl_renderer_attach_stream_texture(struct weston_surface *es,
+				  struct weston_buffer *buffer)
+{
+#ifdef EGL_NV_stream_attrib
+	struct weston_compositor *ec = es->compositor;
+	struct gl_renderer *gr = get_renderer(ec);
+	struct gl_surface_state *gs = get_surface_state(es);
+	EGLint stream_state = EGL_STREAM_STATE_EMPTY_KHR;
 
-		glActiveTexture(GL_TEXTURE0);
-		ensure_textures(gs, target, 1);
-		glBindTexture(target, gs->textures[0]);
+	EGLint err;
 
-		gs->new_stream = (gr->stream_consumer_gltexture(
-						gr->egl_display,
-						gs->egl_stream) == EGL_TRUE);
+	err = gl_renderer_attach_eglstream_consumer_common(es, buffer->resource);
 
-		if (!gs->new_stream) {
-			weston_log("failed to set stream consumer\n");
-			gl_renderer_print_egl_error_state();
-			gr->destroy_stream(gr->egl_display, gs->egl_stream);
-			gs->egl_stream = EGL_NO_STREAM_KHR;
-			return true; /* buffer->resource is EGLStream */
-		}
+	switch (err) {
+	case EGL_BAD_ACCESS:
+		/* EGL_BAD_ACCESS is generated whenever buffer->resource
+		 * does not corresponds to a stream */
+		return false;
+
+	case EGL_BAD_STREAM_KHR:
+		/* EGL_BAD_STREAM_KHR is generated whenever
+		 * buffer->resource corresponds to a previously created
+		 * stream so we must have a valid stream handle already
+		 * we can use to acquire next frame */
+		break;
+
+	case EGL_SUCCESS:
+		/* EGL_SUCCESS is returned when the server stream endpoint is
+		 * created and a consumer is attached successfully. This path is
+		 * hit with old drivers which use wl_surface::attach + commit to
+		 * request stream creation. */
+		return true; /* buffer->resource is EGLStream */
+
+	default:
+		/* An unknown error was generated */
+		assert(0);
+		return false;
 	}
 
 	/* At this point we should have a valid stream handle */
@@ -3832,6 +3869,8 @@ gl_renderer_display_create(struct weston_compositor *ec,
 	gr->base.surface_get_content_size =
 		gl_renderer_surface_get_content_size;
 	gr->base.surface_copy_content = gl_renderer_surface_copy_content;
+	gr->base.attach_eglstream_consumer =
+	    gl_renderer_attach_eglstream_consumer;
 
 	if (gl_renderer_setup_egl_display(gr, options->egl_native_display) < 0)
 		goto fail;
diff --git a/protocol/meson.build b/protocol/meson.build
index 7d869da..60a0391 100644
--- a/protocol/meson.build
+++ b/protocol/meson.build
@@ -4,6 +4,9 @@ prog_scanner = find_program(dep_scanner.get_pkgconfig_variable('wayland_scanner'
 dep_wp = dependency('wayland-protocols', version: '>= 1.24')
 dir_wp_base = dep_wp.get_pkgconfig_variable('pkgdatadir')
 
+dep_wep = dependency('wayland-eglstream-protocols')
+dir_wep_base = dep_wep.get_pkgconfig_variable('pkgdatadir')
+
 install_data(
 	[
 		'weston-debug.xml',
@@ -37,6 +40,7 @@ generated_protocols = [
 	[ 'xdg-output', 'v1' ],
 	[ 'xdg-shell', 'v6' ],
 	[ 'xdg-shell', 'stable' ],
+	[ 'wayland-eglstream-controller', '3rdparty', dir_wep_base ],
 ]
 
 foreach proto: generated_protocols
@@ -44,6 +48,9 @@ foreach proto: generated_protocols
 	if proto[1] == 'internal'
 		base_file = proto_name
 		xml_path = '@0@.xml'.format(proto_name)
+	elif proto[1] == '3rdparty'
+		base_file = proto_name
+		xml_path = '@0@/@1@.xml'.format(proto[2], base_file)
 	elif proto[1] == 'stable'
 		base_file = proto_name
 		xml_path = '@0@/stable/@1@/@1@.xml'.format(dir_wp_base, base_file)
