BBPATH .= ":${LAYERDIR}"
BBFILES += " \
    ${LAYERDIR}/recipes-*/*/*.bb \
    ${LAYERDIR}/recipes-*/*/*.bbappend \
"

BBFILE_COLLECTIONS += "tegra"
BBFILE_PATTERN_tegra = "^${LAYERDIR}/"
BBFILE_PRIORITY_tegra = "5"

LAYERVERSION_tegra = "1"

LAYERDEPENDS_tegra = "core"

LAYERSERIES_COMPAT_tegra = "gatesgarth"

# Recipe modifications for other layers that may be included in the build
BBFILES += "${@' '.join('${LAYERDIR}/external/%s/recipes*/*/*.bb' % layer \
               for layer in BBFILE_COLLECTIONS.split() if os.path.exists(os.path.join('${LAYERDIR}','external',layer)))}"
BBFILES += "${@' '.join('${LAYERDIR}/external/%s/recipes*/*/*.bbappend' % layer \
               for layer in BBFILE_COLLECTIONS.split() if os.path.exists(os.path.join('${LAYERDIR}','external',layer)))}"

SIGGEN_EXCLUDE_SAFE_RECIPE_DEPS += "\
  tegra-nvstartup->tegra-configs-nvstartup \
  xserver-xorg-video-nvidia->tegra-configs-xorg \
  alsa-state->tegra-configs-alsa \
  tegra-boot-tools->tegra-bootpart-config \
  weston->tegra-udrm-probeconf \
  gstreamer1.0-omx-tegra->tegra-configs-omx-tegra \
  libglvnd->tegra-libraries \
  vulkan-loader->tegra-libraries \
  cuda-cudart->tegra-libraries \
  cuda-cufft->tegra-libraries \
  cuda-cuobjdump->tegra-libraries \
  cuda-cupti->tegra-libraries \
  cuda-curand->tegra-libraries \
  cuda-cusolver->tegra-libraries \
  cuda-cusparse->tegra-libraries \
  cuda-driver->tegra-libraries \
  cuda-gdb->tegra-libraries \
  cuda-memcheck->tegra-libraries \
  cuda-misc-headers->tegra-libraries \
  cuda-npp->tegra-libraries \
  cuda-nvcc->tegra-libraries \
  cuda-nvcc-headers->tegra-libraries \
  cuda-nvdisasm->tegra-libraries \
  cuda-nvgraph->tegra-libraries \
  cuda-nvml->tegra-libraries \
  cuda-nvprof->tegra-libraries \
  cuda-nvprune->tegra-libraries \
  cuda-nvrtc->tegra-libraries \
  cuda-nvtx->tegra-libraries \
  libcublas->tegra-libraries \
  tensorrt->tegra-libraries \
  libdrm->libdrm-nvdc \
  libdrm-nvdc->tegra-libraries \
  tegra-nvs-service->tegra-nvs-base \
"
